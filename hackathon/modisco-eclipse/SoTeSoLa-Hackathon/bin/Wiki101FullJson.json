{"Category": {"Language_implementation": {"languageMembers": [], "discussion_links": [], "name": "Language implementation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language implementation", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "BaseX"}, {"type": "Technology", "name": "ErlangASLASHOTP"}, {"type": "Technology", "name": "GReTL"}, {"type": "Technology", "name": "Rhino"}, {"type": "Technology", "name": "Saxon"}, {"type": "Technology", "name": "XalanADASHJava"}, {"type": "Technology", "name": "xsltproc"}], "headline": "an implementation of a language with which programs of the language can be executed", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Compiler"}, {"type": "Category", "name": "Interpreter"}], "featureMembers": []}, "ThreeADASHtier_architecture": {"languageMembers": [], "discussion_links": [], "name": "Three-tier architecture", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Three-tier architecture", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Miscellaneous": {"languageMembers": [], "discussion_links": [], "name": "Miscellaneous", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Miscellaneous", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ParadigmADASHspecific_term": {"languageMembers": [], "discussion_links": [], "name": "Paradigm-specific term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Paradigm-specific term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XML_language": {"languageMembers": [{"type": "Language", "name": "JNLP"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "XQuery"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "XSLT"}], "discussion_links": [], "name": "XML language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that uses XML for representation", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101supporter": {"languageMembers": [], "discussion_links": [], "name": "101supporter", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101supporter", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_construct": {"languageMembers": [], "discussion_links": [], "name": "Language construct", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language construct", "headline_links": [{"type": "Concept", "name": "language"}], "discussion": "", "technologyMembers": [], "headline": "a construct provided by a (software) [[language]]", "conceptMembers": [{"type": "Concept", "name": "Conditional"}, {"type": "Concept", "name": "Declaration"}, {"type": "Concept", "name": "Equation"}, {"type": "Concept", "name": "Export"}, {"type": "Concept", "name": "Import"}, {"type": "Concept", "name": "Lambda_abstraction"}, {"type": "Concept", "name": "List_comprehension"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Declaration"}], "featureMembers": []}, "101language": {"languageMembers": [{"type": "Language", "name": "101meta"}], "discussion_links": [], "name": "101language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101language", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "a language-like contribution to the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Standard": {"languageMembers": [], "discussion_links": [], "name": "Standard", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Standard", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "CGI"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Fragment_locator": {"languageMembers": [], "discussion_links": [], "name": "Fragment locator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Fragment locator", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "CSharpFragmentLocator"}, {"type": "Technology", "name": "GeFLo"}, {"type": "Technology", "name": "HsFragmentLocator"}, {"type": "Technology", "name": "JFragmentLocator"}, {"type": "Technology", "name": "XmlFragmentLocator"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101feature": {"languageMembers": [], "discussion_links": [], "name": "101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101feature", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Behavioral_101feature"}, {"type": "Category", "name": "MetaADASHlevel_101feature"}, {"type": "Category", "name": "Quality_101feature"}, {"type": "Category", "name": "Structural_101feature"}, {"type": "Category", "name": "UI_101feature"}], "featureMembers": []}, "101developer": {"languageMembers": [], "discussion_links": [], "name": "101developer", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONAlexander_Anthes"}, {"type": "Page", "name": "101contributorACOLONAndrei_Varanovich"}, {"type": "Page", "name": "101contributorACOLONBas_Basten"}, {"type": "Page", "name": "101contributorACOLONBetim_Sojeva"}, {"type": "Page", "name": "101contributorACOLONChristian_Schl\u00f6ffel"}, {"type": "Page", "name": "101contributorACOLONChristian_Wende"}, {"type": "Page", "name": "101contributorACOLONDavid_Saile"}, {"type": "Page", "name": "101contributorACOLONEduard_Ditler"}, {"type": "Page", "name": "101contributorACOLONEkaterina_Pek"}, {"type": "Page", "name": "101contributorACOLONFlorian_Heidenreich"}, {"type": "Page", "name": "101contributorACOLONHakan_Aksu"}, {"type": "Page", "name": "101contributorACOLONHannaADASHMarike_Reger"}, {"type": "Page", "name": "101contributorACOLONHelena_Swerdlow"}, {"type": "Page", "name": "101contributorACOLONHugo_Bruneli\u00e8re"}, {"type": "Page", "name": "101contributorACOLONIna_Schroeder"}, {"type": "Page", "name": "101contributorACOLONJan_Baltzer"}, {"type": "Page", "name": "101contributorACOLONJan_Reimann"}, {"type": "Page", "name": "101contributorACOLONJan_Ruether"}, {"type": "Page", "name": "101contributorACOLONJesper_Louis_Andersen"}, {"type": "Page", "name": "101contributorACOLONJohann_Tissen"}, {"type": "Page", "name": "101contributorACOLONKatharina_Naujokat"}, {"type": "Page", "name": "101contributorACOLONLyzun_Oleksandr"}, {"type": "Page", "name": "101contributorACOLONMahdi_Derakhshanmanesh"}, {"type": "Page", "name": "101contributorACOLONMarius_Rackwitz"}, {"type": "Page", "name": "101contributorACOLONMark_Hills"}, {"type": "Page", "name": "101contributorACOLONMartijn_van_Steenbergen"}, {"type": "Page", "name": "101contributorACOLONMartin_Leinberger"}, {"type": "Page", "name": "101contributorACOLONMartina_Sekulla"}, {"type": "Page", "name": "101contributorACOLONMatt_Roberts"}, {"type": "Page", "name": "101contributorACOLONMichael_Kusenbach"}, {"type": "Page", "name": "101contributorACOLONPaul_Klint"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}, {"type": "Page", "name": "101contributorACOLONRebecca_Bindarra"}, {"type": "Page", "name": "101contributorACOLONRodrigo_Bonifacio"}, {"type": "Page", "name": "101contributorACOLONSebastian_Jackel"}, {"type": "Page", "name": "101contributorACOLONSteffen_Zschaler"}, {"type": "Page", "name": "101contributorACOLONSven_Karol"}, {"type": "Page", "name": "101contributorACOLONTassilo_Horn"}, {"type": "Page", "name": "101contributorACOLONThiago_Tonelli_Bartolomei"}, {"type": "Page", "name": "101contributorACOLONThomas_Schmorleiz"}, {"type": "Page", "name": "101contributorACOLONTobias_Schmidt"}, {"type": "Page", "name": "101contributorACOLONTobias_Zimmer"}, {"type": "Page", "name": "101contributorACOLONTony_Sloane"}, {"type": "Page", "name": "101contributorACOLONTravis_Gockel"}, {"type": "Page", "name": "101contributorACOLONVadim_Zaytsev"}, {"type": "Page", "name": "101contributorACOLONZef_Hemel"}], "url": "http://101companies.org/index.php/Category:101developer", "headline_links": [{"type": "Page", "name": "101contribution"}, {"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "anyone who develops a [[:Category:101contribution|contribution]] to the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OASLASHR_Mapping": {"languageMembers": [], "discussion_links": [], "name": "O/R Mapping", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:O/R Mapping", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Ambiguous_Term": {"languageMembers": [], "discussion_links": [], "name": "Ambiguous Term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Ambiguous Term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_engineering_term": {"languageMembers": [], "discussion_links": [{"type": "Page", "name": "Project"}, {"type": "Page", "name": "Term"}], "name": "Software engineering term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software engineering term", "headline_links": [], "discussion": "\n\nWe use the term \"engineering\" here in a sloppy sense to include programming methodology, reasoning about programs, and possibly formal, semi-formal, or engineering methods of program or software development. Such engineering is currently not too much in the focus of the [[101companies:Project]].\n\n[[Category:Term]]\n", "technologyMembers": [], "headline": "terms making up the (software) \"engineering\" vocabulary", "conceptMembers": [{"type": "Concept", "name": "Algorithm_design"}, {"type": "Concept", "name": "Data_generator"}, {"type": "Concept", "name": "Data_structure_design"}, {"type": "Concept", "name": "Performance"}, {"type": "Concept", "name": "Profiling"}, {"type": "Concept", "name": "Program_design"}, {"type": "Concept", "name": "Program_generation"}, {"type": "Concept", "name": "Program_optimization"}, {"type": "Concept", "name": "Software_design"}, {"type": "Concept", "name": "Source_code_repository"}, {"type": "Concept", "name": "Test_case"}, {"type": "Concept", "name": "Test_data_generation"}, {"type": "Concept", "name": "Testing"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Presentation_layer": {"languageMembers": [], "discussion_links": [], "name": "Presentation layer", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Presentation layer", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Application_server": {"languageMembers": [], "discussion_links": [], "name": "Application server", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Application server", "headline_links": [{"type": "Page", "name": "Framework"}, {"type": "Page", "name": "WebADASHapplication"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Apache_Tomcat"}, {"type": "Technology", "name": "GlassFish"}, {"type": "Technology", "name": "JBoss_Application_Server"}], "headline": "a [[:Category:Framework]] providing an environment for running [[:Category:Web-application|(web) applications]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Query_language": {"languageMembers": [{"type": "Language", "name": "HQL"}, {"type": "Language", "name": "HSQLDialect"}, {"type": "Language", "name": "SQL"}], "discussion_links": [], "name": "Query language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Query language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101capabilities": {"languageMembers": [], "discussion_links": [], "name": "101capabilities", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101capabilities", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ComputationACOLONcomputation": {"languageMembers": [], "discussion_links": [], "name": "Computation:computation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Computation:computation", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101capability": {"languageMembers": [], "discussion_links": [], "name": "101capability", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101capability", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DocumentADASHoriented_Database": {"languageMembers": [], "discussion_links": [], "name": "Document-oriented Database", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Document-oriented Database", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_domain": {"languageMembers": [], "discussion_links": [], "name": "Programming domain", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming domain", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Concurrent_programming"}, {"type": "Concept", "name": "Data_programming"}, {"type": "Concept", "name": "Database_programming"}, {"type": "Concept", "name": "Distributed_programming"}, {"type": "Concept", "name": "GUI_programming"}, {"type": "Concept", "name": "Generic_programming"}, {"type": "Concept", "name": "Web_programming"}, {"type": "Concept", "name": "XML_programming"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_idiom": {"languageMembers": [], "discussion_links": [], "name": "Programming idiom", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming idiom", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Accumulator"}, {"type": "Concept", "name": "Applicative_functor"}, {"type": "Concept", "name": "Arrow"}, {"type": "Concept", "name": "Functor"}, {"type": "Concept", "name": "Guard"}, {"type": "Concept", "name": "Monad"}, {"type": "Concept", "name": "Monad_transformer"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "User_interface": {"languageMembers": [], "discussion_links": [], "name": "User interface", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:User interface", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "CLI"}, {"type": "Concept", "name": "GUI"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Transformation": {"languageMembers": [], "discussion_links": [], "name": "Transformation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Transformation", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Endogenous_transformation"}, {"type": "Concept", "name": "Exogenous_transformation"}, {"type": "Concept", "name": "Fold_transformation"}, {"type": "Concept", "name": "Horizontal_transformation"}, {"type": "Concept", "name": "Unfold_transformation"}, {"type": "Concept", "name": "Vertical_transformation"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Serialization": {"languageMembers": [], "discussion_links": [], "name": "Serialization", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Serialization", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Closed_serialization"}, {"type": "Concept", "name": "Open_serialization"}, {"type": "Concept", "name": "XML_serialization"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Interpreted_programming_language": {"languageMembers": [{"type": "Language", "name": "Python"}], "discussion_links": [], "name": "Interpreted programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Interpreted programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_processor": {"languageMembers": [], "discussion_links": [], "name": "Language processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language processor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Parallelism": {"languageMembers": [], "discussion_links": [], "name": "Parallelism", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Parallelism", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Data_parallelism"}, {"type": "Concept", "name": "Nested_data_parallelism"}, {"type": "Concept", "name": "Task_parallelism"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Executor": {"languageMembers": [], "discussion_links": [], "name": "Executor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Executor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Architecture_component": {"languageMembers": [], "discussion_links": [], "name": "Architecture component", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Architecture component", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Pure_vsADOT_impure_computation": {"languageMembers": [], "discussion_links": [], "name": "Pure vs. impure computation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Pure vs. impure computation", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Communication": {"languageMembers": [], "discussion_links": [], "name": "Communication", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Communication", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "A method for data exchange between computers", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Network_communication"}], "featureMembers": []}, "Hardware_term": {"languageMembers": [], "discussion_links": [], "name": "Hardware term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Hardware term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "terms making up a hardware vocabulary", "conceptMembers": [{"type": "Concept", "name": "Core"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Validator": {"languageMembers": [], "discussion_links": [], "name": "Validator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Validator", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "CSharpValidator"}, {"type": "Technology", "name": "JValidator"}, {"type": "Technology", "name": "W3CValidator"}, {"type": "Technology", "name": "XMLValidator"}, {"type": "Technology", "name": "XSDValidator"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Reuseware": {"languageMembers": [], "discussion_links": [], "name": "Reuseware", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Reuseware", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XML_data_binding": {"languageMembers": [], "discussion_links": [], "name": "XML data binding", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML data binding", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101qualities": {"languageMembers": [], "discussion_links": [], "name": "101qualities", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101qualities", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technology": {"languageMembers": [], "discussion_links": [], "name": "Technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "DLL"}, {"type": "Technology", "name": "Microsoft_Excel"}, {"type": "Technology", "name": "basename"}, {"type": "Technology", "name": "dirname"}, {"type": "Technology", "name": "gzip"}], "headline": "All software technologies", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101technology"}, {"type": "Category", "name": "Application_technology"}, {"type": "Category", "name": "Comprehension_technology"}, {"type": "Category", "name": "Development_technology"}, {"type": "Category", "name": "Language_technology"}, {"type": "Category", "name": "Mapping_technology"}, {"type": "Category", "name": "Modeling_technology"}, {"type": "Category", "name": "Programming_technology"}, {"type": "Category", "name": "Standard"}, {"type": "Category", "name": "Web_application"}], "featureMembers": []}, "101scenario": {"languageMembers": [], "discussion_links": [], "name": "101scenario", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101scenario", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Java_EE": {"languageMembers": [], "discussion_links": [], "name": "Java EE", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Java EE", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technique": {"languageMembers": [], "discussion_links": [], "name": "Technique", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technique", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a programming technique", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Design_pattern"}, {"type": "Category", "name": "Paradigmatic_technique"}], "featureMembers": []}, "Android_term": {"languageMembers": [], "discussion_links": [], "name": "Android term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Android term", "headline_links": [{"type": "Language", "name": "Android"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[Language:Android]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Android_Resource"}, {"type": "Concept", "name": "Android_Service"}, {"type": "Concept", "name": "Android_project"}, {"type": "Concept", "name": "AndroidManifest"}, {"type": "Concept", "name": "Employee_Profile"}, {"type": "Concept", "name": "Intent"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Android_Location"}, {"type": "Category", "name": "Android_UI"}], "featureMembers": []}, "Multitier_architecture": {"languageMembers": [], "discussion_links": [], "name": "Multitier architecture", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Multitier architecture", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ADOTNET_namespace": {"languageMembers": [], "discussion_links": [], "name": ".NET namespace", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "DotnetACOLONSystemADOTXml"}, {"type": "Page", "name": "DotnetACOLONSystemADOTXmlADOTSerialization"}], "url": "http://101companies.org/index.php/Category:.NET namespace", "headline_links": [{"type": "Technology", "name": "ADOTNET"}], "discussion": "", "technologyMembers": [], "headline": ".NET namespaces as they contribute to [[Technology:.NET]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_technology": {"languageMembers": [], "discussion_links": [], "name": "Language technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language technology", "headline_links": [{"type": "Page", "name": "language"}], "discussion": "", "technologyMembers": [], "headline": "a technology that deals with software [[:Category:language]]s", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Fragment_locator"}, {"type": "Category", "name": "Import_matcher"}, {"type": "Category", "name": "Language_framework"}, {"type": "Category", "name": "Language_implementation"}, {"type": "Category", "name": "LanguageADASHspecific_technology"}, {"type": "Category", "name": "Lexer"}, {"type": "Category", "name": "Parser"}, {"type": "Category", "name": "Pretty_printer"}, {"type": "Category", "name": "Program_analyzer"}, {"type": "Category", "name": "Program_generator"}, {"type": "Category", "name": "Program_transformer"}], "featureMembers": []}, "Design_pattern": {"languageMembers": [], "discussion_links": [], "name": "Design pattern", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Design pattern", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a reusable solution to a recurring programming problem", "conceptMembers": [{"type": "Concept", "name": "Builder_pattern"}, {"type": "Concept", "name": "Composite_pattern"}, {"type": "Concept", "name": "DAO"}, {"type": "Concept", "name": "DTO"}, {"type": "Concept", "name": "Front_Controller"}, {"type": "Concept", "name": "Marker_interface_pattern"}, {"type": "Concept", "name": "Observer_pattern"}, {"type": "Concept", "name": "Proxy_pattern"}, {"type": "Concept", "name": "Visitor_pattern"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Declaration": {"languageMembers": [], "discussion_links": [], "name": "Declaration", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Declaration", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "InterADASHtype_declaration"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Generic_programming": {"languageMembers": [], "discussion_links": [], "name": "Generic programming", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Generic programming", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "generic programming (specifically, techniques for it)", "conceptMembers": [{"type": "Concept", "name": "SYB"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Comprehension_technology": {"languageMembers": [], "discussion_links": [], "name": "Comprehension technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Comprehension technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "101explorer"}], "headline": "a technology for helping with understanding software", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Terminology": {"languageMembers": [], "discussion_links": [], "name": "Terminology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Terminology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Toolkit": {"languageMembers": [], "discussion_links": [], "name": "Toolkit", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Toolkit", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ADT"}, {"type": "Technology", "name": "AJDT"}, {"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "BaseX"}, {"type": "Technology", "name": "Dropsbox"}, {"type": "Technology", "name": "EMF"}, {"type": "Technology", "name": "Entity_Framework"}, {"type": "Technology", "name": "GWT"}, {"type": "Technology", "name": "GraphViz"}, {"type": "Technology", "name": "HXT"}, {"type": "Technology", "name": "JDK"}, {"type": "Technology", "name": "JUnit"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "Xtext"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Library": {"languageMembers": [], "discussion_links": [], "name": "Library", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "DotnetACOLONSystemADOTXml"}, {"type": "Page", "name": "DotnetACOLONSystemADOTXmlADOTSerialization"}, {"type": "Page", "name": "JavaACOLONcomADOTappleADOTeawt"}, {"type": "Page", "name": "JavaACOLONcomADOTsunADOTimageADOTcodecADOTjpeg"}, {"type": "Page", "name": "JavaACOLONgnuADOTregexp"}, {"type": "Page", "name": "JavaACOLONjava_cupADOTruntime"}, {"type": "Page", "name": "JavaACOLONjavaADOTlang"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTannotation"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTref"}, {"type": "Page", "name": "JavaACOLONjavaADOTmath"}, {"type": "Page", "name": "JavaACOLONjavaADOTsql"}, {"type": "Page", "name": "JavaACOLONjavaADOTtext"}, {"type": "Page", "name": "JavaACOLONjavaADOTutil"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTconcurrent"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTjar"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTregex"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTzip"}, {"type": "Page", "name": "JavaACOLONjavaxADOTannotation"}, {"type": "Page", "name": "JavaACOLONjavaxADOTnet"}, {"type": "Page", "name": "JavaACOLONjavaxADOTswing"}, {"type": "Page", "name": "JavaACOLONorgADOTantlrADOTruntime"}, {"type": "Page", "name": "JavaACOLONorgADOTcodehausADOTplexusADOTutilADOTxmlADOTpull"}, {"type": "Page", "name": "JavaACOLONsunADOTmisc"}], "url": "http://101companies.org/index.php/Category:Library", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "Apache_XMLADASHRPC"}, {"type": "Technology", "name": "Guava"}, {"type": "Technology", "name": "HDBC"}, {"type": "Technology", "name": "HTML_Parser"}, {"type": "Technology", "name": "Hamcrest"}, {"type": "Technology", "name": "HaskellDB"}, {"type": "Technology", "name": "JAF"}, {"type": "Technology", "name": "JAMA"}, {"type": "Technology", "name": "JFreeChart"}, {"type": "Technology", "name": "JGoodies"}, {"type": "Technology", "name": "JGraph"}, {"type": "Technology", "name": "JGroups"}, {"type": "Technology", "name": "JMF"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Technology", "name": "Java_Print_Service"}, {"type": "Technology", "name": "JavaMail"}, {"type": "Technology", "name": "Jaxen"}, {"type": "Technology", "name": "Kiama"}, {"type": "Technology", "name": "OGNL"}, {"type": "Technology", "name": "ORO"}, {"type": "Technology", "name": "Object_Streams"}, {"type": "Technology", "name": "Parsec"}, {"type": "Technology", "name": "Smack"}, {"type": "Technology", "name": "Swing"}, {"type": "Technology", "name": "XStream"}, {"type": "Technology", "name": "iText"}, {"type": "Technology", "name": "jQuery"}, {"type": "Technology", "name": "javaADOTutilADOTScanner"}, {"type": "Technology", "name": "wxHaskell"}, {"type": "Technology", "name": "wxWidgets"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Paradigmatic_technique": {"languageMembers": [], "discussion_links": [], "name": "Paradigmatic technique", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Paradigmatic technique", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "paradigmatic programming techniques", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Data_programming"}, {"type": "Category", "name": "Functional_programming"}, {"type": "Category", "name": "Generative_programming"}, {"type": "Category", "name": "Generic_programming"}, {"type": "Category", "name": "OO_programming"}], "featureMembers": []}, "Parallelism_theme": {"languageMembers": [], "discussion_links": [], "name": "Parallelism theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Parallelism theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Format_language": {"languageMembers": [{"type": "Language", "name": "ASCII"}, {"type": "Language", "name": "BSON"}, {"type": "Language", "name": "DLL"}, {"type": "Language", "name": "EXE"}, {"type": "Language", "name": "JAR"}, {"type": "Language", "name": "JSON"}, {"type": "Language", "name": "PDF"}, {"type": "Language", "name": "PlainText"}, {"type": "Language", "name": "RAR"}, {"type": "Language", "name": "Unicode"}, {"type": "Language", "name": "XLS"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "Zip"}, {"type": "Language", "name": "gzip"}, {"type": "Language", "name": "tar"}], "discussion_links": [], "name": "Format language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Format language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that defines a representation format", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Architectural_pattern": {"languageMembers": [], "discussion_links": [], "name": "Architectural pattern", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Architectural pattern", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "MVC"}, {"type": "Concept", "name": "MultiADASHtier_architecture"}, {"type": "Concept", "name": "ThreeADASHtier_architecture"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "MultiADASHtier_architecture"}], "featureMembers": []}, "LanguageADASHspecific_term": {"languageMembers": [], "discussion_links": [], "name": "Language-specific term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language-specific term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ADOTNET": {"languageMembers": [], "discussion_links": [], "name": ".NET", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:.NET", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101term": {"languageMembers": [], "discussion_links": [], "name": "101term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101term", "headline_links": [{"type": "Page", "name": "Vocabulary"}], "discussion": "", "technologyMembers": [], "headline": "The terms of the [[101companies:Vocabulary]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101noun"}, {"type": "Category", "name": "101verb"}], "featureMembers": []}, "XML_processing": {"languageMembers": [], "discussion_links": [], "name": "XML processing", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML processing", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "InADASHmemory_XML_processing"}, {"type": "Concept", "name": "PullADASHbased_XML_parsing"}, {"type": "Concept", "name": "PushADASHbased_XML_parsing"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101structure": {"languageMembers": [], "discussion_links": [], "name": "101structure", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101structure", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Metadata_language": {"languageMembers": [{"type": "Language", "name": "101meta"}, {"type": "Language", "name": "JAXB_annotations"}], "discussion_links": [], "name": "Metadata language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Metadata language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that facilitates the addition of metadata to artifacts", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Abstraction_mechanism": {"languageMembers": [], "discussion_links": [], "name": "Abstraction mechanism", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Abstraction mechanism", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Component"}, {"type": "Concept", "name": "Function"}, {"type": "Concept", "name": "Method"}, {"type": "Concept", "name": "Module"}, {"type": "Concept", "name": "OO_class"}, {"type": "Concept", "name": "OO_interface"}, {"type": "Concept", "name": "Object_model"}, {"type": "Concept", "name": "Package"}, {"type": "Concept", "name": "Type_class"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Template_processor": {"languageMembers": [], "discussion_links": [], "name": "Template processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Template processor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technical_segment": {"languageMembers": [], "discussion_links": [], "name": "Technical segment", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technical segment", "headline_links": [{"type": "Page", "name": "technical_space"}], "discussion": "", "technologyMembers": [], "headline": "a segment (say, a part or a fragment) of a [[:Category:technical space]]", "conceptMembers": [{"type": "Concept", "name": "Auxiliary_XMLware"}, {"type": "Concept", "name": "Generic_objectware"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Template_engine": {"languageMembers": [], "discussion_links": [], "name": "Template engine", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Template engine", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Facelets"}, {"type": "Technology", "name": "Heist"}, {"type": "Technology", "name": "JSP"}, {"type": "Technology", "name": "Velocity"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Interpreter": {"languageMembers": [], "discussion_links": [], "name": "Interpreter", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Interpreter", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "GHCi"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Runtime": {"languageMembers": [], "discussion_links": [], "name": "Runtime", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Runtime", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "CLR"}, {"type": "Technology", "name": "Java_EE"}, {"type": "Technology", "name": "Java_SE"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Internet_technology": {"languageMembers": [], "discussion_links": [], "name": "Internet technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Internet technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JavaMail"}], "headline": "technologies for operating on the internet", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Monad": {"languageMembers": [], "discussion_links": [], "name": "Monad", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Monad", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "IO_Monad"}, {"type": "Concept", "name": "Maybe_monad"}, {"type": "Concept", "name": "Reader_monad"}, {"type": "Concept", "name": "State_monad"}, {"type": "Concept", "name": "Writer_monad"}, {"type": "Concept", "name": "Zipper_monad"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "WebADASHprogramming_technology": {"languageMembers": [], "discussion_links": [], "name": "Web-programming technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web-programming technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "AspectADASHoriented_programming_language": {"languageMembers": [], "discussion_links": [], "name": "Aspect-oriented programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Aspect-oriented programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101technology": {"languageMembers": [], "discussion_links": [], "name": "101technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "101explorer"}, {"type": "Technology", "name": "101worker"}, {"type": "Technology", "name": "CSharpFragmentLocator"}, {"type": "Technology", "name": "CSharpValidator"}, {"type": "Technology", "name": "GeFLo"}, {"type": "Technology", "name": "HsFragmentLocator"}, {"type": "Technology", "name": "HsImportMatcher"}, {"type": "Technology", "name": "JFactExtractor"}, {"type": "Technology", "name": "JFragmentLocator"}, {"type": "Technology", "name": "JValidator"}, {"type": "Technology", "name": "MediaWikiRefactorer"}, {"type": "Technology", "name": "W3CValidator"}, {"type": "Technology", "name": "XMLValidator"}, {"type": "Technology", "name": "XSDValidator"}, {"type": "Technology", "name": "XmlFragmentLocator"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101function": {"languageMembers": [], "discussion_links": [], "name": "101function", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101function", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Application_Server": {"languageMembers": [], "discussion_links": [], "name": "Application Server", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Application Server", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Development_technology": {"languageMembers": [], "discussion_links": [], "name": "Development technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Development technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Glade"}, {"type": "Technology", "name": "JDT"}], "headline": "a technology that is used in software development", "conceptMembers": [{"type": "Concept", "name": "Toolkit"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "IDE"}, {"type": "Category", "name": "Source_code_repository"}, {"type": "Category", "name": "Tool"}, {"type": "Category", "name": "Toolkit"}], "featureMembers": []}, "101stakeholder": {"languageMembers": [], "discussion_links": [], "name": "101stakeholder", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101stakeholder", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "stakeholders of the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101contributor"}, {"type": "Category", "name": "101researcher"}, {"type": "Category", "name": "101technologist"}, {"type": "Category", "name": "101user"}], "featureMembers": []}, "Rules": {"languageMembers": [], "discussion_links": [], "name": "Rules", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Rules", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Communications_protocol": {"languageMembers": [], "discussion_links": [], "name": "Communications protocol", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Communications protocol", "headline_links": [{"type": "Page", "name": "File_format"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "HTTP"}, {"type": "Technology", "name": "TCP"}], "headline": "Rules and [[:Category:File format|formats]] for data exchange", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Data_term": {"languageMembers": [], "discussion_links": [], "name": "Data term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data term", "headline_links": [{"type": "Concept", "name": "data"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[data]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Abstract_data_type"}, {"type": "Concept", "name": "Association_list"}, {"type": "Concept", "name": "CRUD"}, {"type": "Concept", "name": "Concrete_data_type"}, {"type": "Concept", "name": "DBMS"}, {"type": "Concept", "name": "Data_structure"}, {"type": "Concept", "name": "Data_type"}, {"type": "Concept", "name": "Database"}, {"type": "Concept", "name": "Database_programming"}, {"type": "Concept", "name": "Database_schema"}, {"type": "Concept", "name": "Directory"}, {"type": "Concept", "name": "Equality"}, {"type": "Concept", "name": "File"}, {"type": "Concept", "name": "Head"}, {"type": "Concept", "name": "Infinite_data_structure"}, {"type": "Concept", "name": "Infinite_list"}, {"type": "Concept", "name": "Pattern"}, {"type": "Concept", "name": "Pattern_matching"}, {"type": "Concept", "name": "Pointer"}, {"type": "Concept", "name": "Prepared_statement"}, {"type": "Concept", "name": "Primitive_data_type"}, {"type": "Concept", "name": "Tail"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Data_type"}], "featureMembers": []}, "Noindexed_pages": {"languageMembers": [], "discussion_links": [], "name": "Noindexed pages", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Noindexed pages", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Mathematical_term": {"languageMembers": [], "discussion_links": [], "name": "Mathematical term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Mathematical term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Polymorphism": {"languageMembers": [], "discussion_links": [], "name": "Polymorphism", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Polymorphism", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "AdADASHhoc_polymorphism"}, {"type": "Concept", "name": "Parametric_polymorphism"}, {"type": "Concept", "name": "Subtype_polymorphism"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101founder": {"languageMembers": [], "discussion_links": [], "name": "101founder", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONDragan_Gasevic"}, {"type": "Page", "name": "101contributorACOLONJeanADASHMarie_Favre"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}], "url": "http://101companies.org/index.php/Category:101founder", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "the founders of the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_theme": {"languageMembers": [], "discussion_links": [], "name": "Web theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web theme", "headline_links": [{"type": "Concept", "name": "Web_programming"}], "discussion": "", "technologyMembers": [], "headline": "[[Web programming]] theme of implementations ", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "seaside"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "zend"}], "type": "Category", "categories": [], "featureMembers": []}, "Bytecode_language": {"languageMembers": [{"type": "Language", "name": "Java_bytecode"}], "discussion_links": [], "name": "Bytecode language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Bytecode language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language for instruction sets", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "WebADASHtemplate_system": {"languageMembers": [], "discussion_links": [], "name": "Web-template system", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web-template system", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101option": {"languageMembers": [], "discussion_links": [], "name": "101option", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101option", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101extra": {"languageMembers": [], "discussion_links": [], "name": "101extra", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101extra", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "API": {"languageMembers": [], "discussion_links": [], "name": "API", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "JavaACOLONjavaADOTlangADOTmanagement"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTreflect"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTxml"}], "url": "http://101companies.org/index.php/Category:API", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Bouncy_Castle"}, {"type": "Technology", "name": "DOM"}, {"type": "Technology", "name": "ECS"}, {"type": "Technology", "name": "IndexedDB"}, {"type": "Technology", "name": "JDBC"}, {"type": "Technology", "name": "JNDI"}, {"type": "Technology", "name": "JPA"}, {"type": "Technology", "name": "JTA"}, {"type": "Technology", "name": "Java_Image_IASLASHO"}, {"type": "Technology", "name": "Java_Media_APIs"}, {"type": "Technology", "name": "ODBC"}, {"type": "Technology", "name": "POI"}, {"type": "Technology", "name": "RMIADASHIIOP"}, {"type": "Technology", "name": "SLF4J"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Technology", "name": "Web_storage"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Technology", "name": "XMLStreamWriter"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Domain_technology": {"languageMembers": [], "discussion_links": [], "name": "Domain technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Domain technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Data_technology": {"languageMembers": [], "discussion_links": [], "name": "Data technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data technology", "headline_links": [{"type": "Concept", "name": "data_programming"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JAF"}, {"type": "Technology", "name": "JPA"}, {"type": "Technology", "name": "JTA"}, {"type": "Technology", "name": "XA"}], "headline": "a technology for [[data programming]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "DBMS"}, {"type": "Category", "name": "Persistence_technology"}, {"type": "Category", "name": "Search_technology"}], "featureMembers": []}, "101noun": {"languageMembers": [], "discussion_links": [], "name": "101noun", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101termACOLONAddress"}, {"type": "Page", "name": "101termACOLONCompany"}, {"type": "Page", "name": "101termACOLONDepartment"}, {"type": "Page", "name": "101termACOLONEmployee"}, {"type": "Page", "name": "101termACOLONManager"}, {"type": "Page", "name": "101termACOLONName"}, {"type": "Page", "name": "101termACOLONSalary"}], "url": "http://101companies.org/index.php/Category:101noun", "headline_links": [{"type": "Page", "name": "Vocabulary"}], "discussion": "", "technologyMembers": [], "headline": "The nouns of the [[101companies:Vocabulary]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Platform": {"languageMembers": [], "discussion_links": [], "name": "Platform", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Platform", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "Android_platform"}, {"type": "Technology", "name": "Haskell_platform"}, {"type": "Technology", "name": "Java_EE"}, {"type": "Technology", "name": "Java_SE"}, {"type": "Technology", "name": "Java_platform"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "AOP_language": {"languageMembers": [{"type": "Language", "name": "AspectJ"}], "discussion_links": [], "name": "AOP language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:AOP language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "aspect-oriented programming languages", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Type": {"languageMembers": [], "discussion_links": [], "name": "Type", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Type", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "programmatic data model used for dynamic or static type checking", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Primitive_Type"}], "featureMembers": []}, "Parser_generator": {"languageMembers": [], "discussion_links": [], "name": "Parser generator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Parser generator", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ANTLR"}, {"type": "Technology", "name": "CUP"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_technology": {"languageMembers": [], "discussion_links": [], "name": "Programming technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming technology", "headline_links": [{"type": "Page", "name": "Programming_domain"}], "discussion": "", "technologyMembers": [], "headline": "A technology that is dedicated to a certain [[:Category:Programming domain|programming domain]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Computing_technology"}, {"type": "Category", "name": "Data_technology"}, {"type": "Category", "name": "Encryption_technology"}, {"type": "Category", "name": "Internet_technology"}, {"type": "Category", "name": "Markup_technology"}, {"type": "Category", "name": "Messaging_technology"}, {"type": "Category", "name": "Network_technology"}, {"type": "Category", "name": "Server_technology"}, {"type": "Category", "name": "Web_technology"}, {"type": "Category", "name": "XML_technology"}], "featureMembers": []}, "Haskell_term": {"languageMembers": [], "discussion_links": [], "name": "Haskell term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Haskell term", "headline_links": [{"type": "Language", "name": "Haskell"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[Language:Haskell]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Action"}, {"type": "Concept", "name": "Haskell_package"}, {"type": "Concept", "name": "Haskell_script"}, {"type": "Concept", "name": "IASLASHO_system"}, {"type": "Concept", "name": "MVar"}, {"type": "Concept", "name": "Maybe_type"}, {"type": "Concept", "name": "Prelude"}, {"type": "Concept", "name": "TMVar"}, {"type": "Concept", "name": "Type_class"}, {"type": "Concept", "name": "TypeADASHclass_instance"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Haskell_technology"}], "featureMembers": []}, "OASLASHR_mapping_technology": {"languageMembers": [], "discussion_links": [], "name": "O/R mapping technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:O/R mapping technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Class": {"languageMembers": [], "discussion_links": [], "name": "Class", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Class", "headline_links": [{"type": "Page", "name": "OO_programming"}], "discussion": "", "technologyMembers": [], "headline": "the concept of declaring and invoking classes in [[:Category:OO programming]]", "conceptMembers": [{"type": "Concept", "name": "Abstract_class"}, {"type": "Concept", "name": "Concrete_class"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Primitive_data_type": {"languageMembers": [], "discussion_links": [], "name": "Primitive data type", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Primitive data type", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Bit"}, {"type": "Concept", "name": "Boolean"}, {"type": "Concept", "name": "Character"}, {"type": "Concept", "name": "Float"}, {"type": "Concept", "name": "Integer"}, {"type": "Concept", "name": "String"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Architectural_Pattern": {"languageMembers": [], "discussion_links": [], "name": "Architectural Pattern", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Architectural Pattern", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Toolkits": {"languageMembers": [], "discussion_links": [], "name": "Toolkits", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Toolkits", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XASLASHO_mapping_technology": {"languageMembers": [], "discussion_links": [], "name": "X/O mapping technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:X/O mapping technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101implementation": {"languageMembers": [], "discussion_links": [], "name": "101implementation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101implementation", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Implementation", "name": "antlrLexer"}, {"type": "Implementation", "name": "antlrObjects"}, {"type": "Implementation", "name": "antlrParser"}, {"type": "Implementation", "name": "antlrTrees"}, {"type": "Implementation", "name": "aspectJ"}, {"type": "Implementation", "name": "atl"}, {"type": "Implementation", "name": "clojure"}, {"type": "Implementation", "name": "clojureRefs"}, {"type": "Implementation", "name": "cobol"}, {"type": "Implementation", "name": "coq"}, {"type": "Implementation", "name": "cppMpl"}, {"type": "Implementation", "name": "csharp"}, {"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "csharpDryadLinq"}, {"type": "Implementation", "name": "csharpLinqToXml"}, {"type": "Implementation", "name": "dom"}, {"type": "Implementation", "name": "dph"}, {"type": "Implementation", "name": "ef"}, {"type": "Implementation", "name": "egl"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "emfReflexive"}, {"type": "Implementation", "name": "emftext"}, {"type": "Implementation", "name": "erlang"}, {"type": "Implementation", "name": "fsharp"}, {"type": "Implementation", "name": "gra2mol"}, {"type": "Implementation", "name": "gremlinADASHneo4j"}, {"type": "Implementation", "name": "groovyDataFlowVariables"}, {"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "hadoop"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskell"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5indexedDatabase"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "hxtPickler"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Implementation", "name": "javaExorcism"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Implementation", "name": "javaLexer"}, {"type": "Implementation", "name": "javaMultithreading"}, {"type": "Implementation", "name": "javaParseLib"}, {"type": "Implementation", "name": "javaParser"}, {"type": "Implementation", "name": "javaRmi"}, {"type": "Implementation", "name": "javaScanner"}, {"type": "Implementation", "name": "javaStatic"}, {"type": "Implementation", "name": "javaSyb"}, {"type": "Implementation", "name": "javaTemplate"}, {"type": "Implementation", "name": "javaTree"}, {"type": "Implementation", "name": "javaVisitor"}, {"type": "Implementation", "name": "javawsClient"}, {"type": "Implementation", "name": "javawsServer"}, {"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}, {"type": "Implementation", "name": "jdbc"}, {"type": "Implementation", "name": "jdbc2"}, {"type": "Implementation", "name": "jdom"}, {"type": "Implementation", "name": "jena"}, {"type": "Implementation", "name": "jena2"}, {"type": "Implementation", "name": "jgralab"}, {"type": "Implementation", "name": "jocamlJoinPatterns"}, {"type": "Implementation", "name": "jqueryDom"}, {"type": "Implementation", "name": "jsPrototyping"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "kiama"}, {"type": "Implementation", "name": "linq2DataSet"}, {"type": "Implementation", "name": "linq2Sql"}, {"type": "Implementation", "name": "mobl"}, {"type": "Implementation", "name": "mongodb"}, {"type": "Implementation", "name": "moose"}, {"type": "Implementation", "name": "mps"}, {"type": "Implementation", "name": "mvar"}, {"type": "Implementation", "name": "mySql"}, {"type": "Implementation", "name": "parsec"}, {"type": "Implementation", "name": "php"}, {"type": "Implementation", "name": "prolog"}, {"type": "Implementation", "name": "prologSyb"}, {"type": "Implementation", "name": "py3k"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "qt"}, {"type": "Implementation", "name": "rascal"}, {"type": "Implementation", "name": "ruby"}, {"type": "Implementation", "name": "rubyonrails"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "scala"}, {"type": "Implementation", "name": "scala2"}, {"type": "Implementation", "name": "scalaAkkaActors"}, {"type": "Implementation", "name": "scalaXML"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "seaside"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "simpleAndroid"}, {"type": "Implementation", "name": "spreadsheet"}, {"type": "Implementation", "name": "sqlServer"}, {"type": "Implementation", "name": "stratego"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "strutsXml"}, {"type": "Implementation", "name": "swing"}, {"type": "Implementation", "name": "syb"}, {"type": "Implementation", "name": "template"}, {"type": "Implementation", "name": "tmvar"}, {"type": "Implementation", "name": "wcf"}, {"type": "Implementation", "name": "wcfRest"}, {"type": "Implementation", "name": "webDSL"}, {"type": "Implementation", "name": "wp7"}, {"type": "Implementation", "name": "wpf"}, {"type": "Implementation", "name": "writerMonad"}, {"type": "Implementation", "name": "wxHaskell"}, {"type": "Implementation", "name": "xmlReader"}, {"type": "Implementation", "name": "xom"}, {"type": "Implementation", "name": "xpathAPI"}, {"type": "Implementation", "name": "xquery"}, {"type": "Implementation", "name": "xsdClasses"}, {"type": "Implementation", "name": "xsdDataSet"}, {"type": "Implementation", "name": "xslt"}, {"type": "Implementation", "name": "xtext"}, {"type": "Implementation", "name": "zend"}], "type": "Category", "categories": [], "featureMembers": []}, "101design": {"languageMembers": [], "discussion_links": [], "name": "101design", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101design", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "Design qualities of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Reusability"}, {"type": "Feature", "name": "Type_generation"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}]}, "Build_tool": {"languageMembers": [], "discussion_links": [], "name": "Build tool", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Build tool", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Ant"}, {"type": "Technology", "name": "Cabal"}, {"type": "Technology", "name": "GNU_make"}, {"type": "Technology", "name": "make"}], "headline": "build automation tools", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Data_structure_term": {"languageMembers": [], "discussion_links": [], "name": "Data structure term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data structure term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DocumentADASHoriented_database": {"languageMembers": [], "discussion_links": [], "name": "Document-oriented database", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Document-oriented database", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "MongoDB"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Metalanguage": {"languageMembers": [{"type": "Language", "name": "BNF"}, {"type": "Language", "name": "EBNF"}, {"type": "Language", "name": "Rascal"}], "discussion_links": [], "name": "Metalanguage", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Metalanguage", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language to define software languages", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Data_type": {"languageMembers": [], "discussion_links": [], "name": "Data type", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data type", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Abstract_data_type"}, {"type": "Category", "name": "Concrete_data_type"}, {"type": "Category", "name": "Data_structure"}, {"type": "Category", "name": "Primitive_data_type"}], "featureMembers": []}, "101researcher": {"languageMembers": [], "discussion_links": [], "name": "101researcher", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101researcher", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "anyone interested in research on software technologies and languages", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101linguist"}, {"type": "Category", "name": "101ontologist"}], "featureMembers": []}, "Procedural_programming_language": {"languageMembers": [{"type": "Language", "name": "Cobol"}, {"type": "Language", "name": "Cobol_85"}, {"type": "Language", "name": "Perl"}], "discussion_links": [], "name": "Procedural programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Procedural programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XML_technology": {"languageMembers": [], "discussion_links": [], "name": "XML technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML technology", "headline_links": [{"type": "Concept", "name": "XML_programming"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ADOTNET_XML_Serialization"}], "headline": "a technology for [[XML programming]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Theory_term": {"languageMembers": [], "discussion_links": [], "name": "Theory term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Theory term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Computation": {"languageMembers": [], "discussion_links": [{"type": "Concept", "name": "functional_programming"}, {"type": "Concept", "name": "OO_programming"}, {"type": "Concept", "name": "query"}, {"type": "Page", "name": "transformation"}, {"type": "Concept", "name": "condition"}, {"type": "Concept", "name": "Pure_computation"}, {"type": "Concept", "name": "Impure_computation"}, {"type": "Page", "name": "Misc"}], "name": "Computation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Computation", "headline_links": [], "discussion": "\n\nDepending on the programming language at hand, I/O behaviors can be implemented in various ways.For instance, a computation may be a function in [[functional programming]] or a method in [[OO programming]]. The central dimension for distinguishing computations is the one of distinguishing [[query]], [[:Category:transformation]], and [[condition]]. In another dimension, [[Pure computation|pure]] vs. [[Impure computation|impure]] computations can be distinguished. \n\n[[Category:Misc]]\n", "technologyMembers": [], "headline": "an executable I/O behavior", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "API_implementation": {"languageMembers": [], "discussion_links": [], "name": "API implementation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:API implementation", "headline_links": [], "discussion": "\n\nThe notions of ''API'' and ''API implementation'' are often confused.\n\nSuch confusion may be intentional if there is only one major implementation in the scope of the discussion.\n\nSuch confusion may also be accidental otherwise.\n", "technologyMembers": [{"type": "Technology", "name": "JAXP"}, {"type": "Technology", "name": "JDOM"}, {"type": "Technology", "name": "XOM"}, {"type": "Technology", "name": "XalanADASHJava"}, {"type": "Technology", "name": "dom4j"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ANTLR_theme": {"languageMembers": [], "discussion_links": [], "name": "ANTLR theme", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101demonstrationACOLONyapg"}], "url": "http://101companies.org/index.php/Category:ANTLR theme", "headline_links": [{"type": "Technology", "name": "ANTLR"}, {"type": "Concept", "name": "grammarware"}], "discussion": "", "technologyMembers": [], "headline": "[[Technology:ANTLR]]-centric [[grammarware]] theme", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Implementation", "name": "antlrLexer"}, {"type": "Implementation", "name": "antlrObjects"}, {"type": "Implementation", "name": "antlrParser"}, {"type": "Implementation", "name": "antlrTrees"}, {"type": "Implementation", "name": "gra2mol"}, {"type": "Implementation", "name": "xtext"}], "type": "Category", "categories": [], "featureMembers": []}, "Language_concept": {"languageMembers": [], "discussion_links": [], "name": "Language concept", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language concept", "headline_links": [{"type": "Page", "name": "language"}], "discussion": "", "technologyMembers": [], "headline": "a concept for designing and using (software) [[:Category:language]]s", "conceptMembers": [{"type": "Concept", "name": "Ajax"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Advice"}, {"type": "Category", "name": "Annotation"}, {"type": "Category", "name": "Application"}, {"type": "Category", "name": "Class"}, {"type": "Category", "name": "Expression"}, {"type": "Category", "name": "Field"}, {"type": "Category", "name": "Method"}, {"type": "Category", "name": "Relationship"}, {"type": "Category", "name": "Statement"}, {"type": "Category", "name": "Type"}], "featureMembers": []}, "Engineering_term": {"languageMembers": [], "discussion_links": [], "name": "Engineering term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Engineering term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Unspecific_language": {"languageMembers": [], "discussion_links": [], "name": "Unspecific language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Unspecific language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Markup_language": {"languageMembers": [{"type": "Language", "name": "HTML"}, {"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "XHTML"}], "discussion_links": [], "name": "Markup language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Markup language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that facilitates the annotation of text", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Server_technology": {"languageMembers": [], "discussion_links": [], "name": "Server technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Server technology", "headline_links": [{"type": "Page", "name": "server"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Java_Servlet"}, {"type": "Technology", "name": "Java_Servlet_API"}], "headline": "technologies for developing [[:Category:server]] functionality", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Media_processor": {"languageMembers": [], "discussion_links": [], "name": "Media processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Media processor", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JMF"}], "headline": "technologie for media handling", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Image_processor"}], "featureMembers": []}, "Modeling_technology": {"languageMembers": [], "discussion_links": [], "name": "Modeling technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Modeling technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ArgoUML"}], "headline": "A technology for software modeling", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101execution": {"languageMembers": [], "discussion_links": [], "name": "101execution", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101execution", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "Execution qualities of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Access_control"}, {"type": "Feature", "name": "Data_parallelism"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Reliability"}, {"type": "Feature", "name": "Serialization"}, {"type": "Feature", "name": "Task_parallelism"}]}, "101statekholder": {"languageMembers": [], "discussion_links": [], "name": "101statekholder", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101statekholder", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_term": {"languageMembers": [], "discussion_links": [], "name": "Language term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "CategoryACOLONXML_technology": {"languageMembers": [], "discussion_links": [], "name": "Category:XML technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Category:XML technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ADOTNET_XML_Serialization"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language": {"languageMembers": [], "discussion_links": [], "name": "Language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "All software languages", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101language"}, {"type": "Category", "name": "Bytecode_language"}, {"type": "Category", "name": "DomainADASHspecific_language"}, {"type": "Category", "name": "Format_language"}, {"type": "Category", "name": "Markup_language"}, {"type": "Category", "name": "Metadata_language"}, {"type": "Category", "name": "Metalanguage"}, {"type": "Category", "name": "Modeling_language"}, {"type": "Category", "name": "Programming_language"}, {"type": "Category", "name": "Query_language"}, {"type": "Category", "name": "Scripting_language"}, {"type": "Category", "name": "ToolADASHdefined_language"}, {"type": "Category", "name": "Transformation_language"}, {"type": "Category", "name": "XML_language"}], "featureMembers": []}, "Ambigious_term": {"languageMembers": [], "discussion_links": [], "name": "Ambigious term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Ambigious term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_browser": {"languageMembers": [], "discussion_links": [], "name": "Web browser", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web browser", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Google_Chrome"}, {"type": "Technology", "name": "Internet_Explorer"}, {"type": "Technology", "name": "Mozilla_Firefox"}, {"type": "Technology", "name": "Opera"}, {"type": "Technology", "name": "Safari"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "API2": {"languageMembers": [], "discussion_links": [], "name": "API2", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:API2", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Type_system_term": {"languageMembers": [], "discussion_links": [], "name": "Type system term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Type system term", "headline_links": [{"type": "Concept", "name": "type_system"}], "discussion": "", "technologyMembers": [], "headline": "Terms making up the [[type system]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Type_checking"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101verb": {"languageMembers": [], "discussion_links": [], "name": "101verb", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101termACOLONCut"}, {"type": "Page", "name": "101termACOLONDeserialize"}, {"type": "Page", "name": "101termACOLONEdit"}, {"type": "Page", "name": "101termACOLONExport"}, {"type": "Page", "name": "101termACOLONImport"}, {"type": "Page", "name": "101termACOLONLoad"}, {"type": "Page", "name": "101termACOLONParse"}, {"type": "Page", "name": "101termACOLONPrettyprint"}, {"type": "Page", "name": "101termACOLONSave"}, {"type": "Page", "name": "101termACOLONSerialize"}, {"type": "Page", "name": "101termACOLONTotal"}, {"type": "Page", "name": "101termACOLONUnparse"}, {"type": "Page", "name": "101termACOLONView"}], "url": "http://101companies.org/index.php/Category:101verb", "headline_links": [{"type": "Page", "name": "Vocabulary"}], "discussion": "", "technologyMembers": [], "headline": "The verbs of the [[101companies:Vocabulary]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "MultiADASHparadigm_programming_language": {"languageMembers": [{"type": "Language", "name": "FSharp"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "Perl"}, {"type": "Language", "name": "Python"}, {"type": "Language", "name": "Ruby"}], "discussion_links": [], "name": "Multi-paradigm programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Multi-paradigm programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101minimum": {"languageMembers": [], "discussion_links": [], "name": "101minimum", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101minimum", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_server": {"languageMembers": [], "discussion_links": [], "name": "Web server", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web server", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Apache_HTTP_Server"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Modeling_language": {"languageMembers": [{"type": "Language", "name": "MegaL"}, {"type": "Language", "name": "UML"}], "discussion_links": [], "name": "Modeling language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Modeling language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language to express information or knowledge or systems", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Behavioral_modeling_language"}, {"type": "Category", "name": "Data_modeling_language"}, {"type": "Category", "name": "Structural_modeling_language"}], "featureMembers": []}, "Computing_technology": {"languageMembers": [], "discussion_links": [], "name": "Computing technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Computing technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JAMA"}], "headline": "technologies for (scientific) computing", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101behavior": {"languageMembers": [], "discussion_links": [], "name": "101behavior", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101behavior", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Grammar_processor": {"languageMembers": [], "discussion_links": [], "name": "Grammar processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Grammar processor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Transformation_language": {"languageMembers": [{"type": "Language", "name": "ATL"}, {"type": "Language", "name": "GReTL"}], "discussion_links": [], "name": "Transformation language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Transformation language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language for executable transformations", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_theory_term": {"languageMembers": [], "discussion_links": [{"type": "Page", "name": "Project"}, {"type": "Page", "name": "Project"}, {"type": "Page", "name": "Term"}], "name": "Programming theory term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming theory term", "headline_links": [], "discussion": "\n\nWe use the term \"theory\" in a sloppy sense to include mathematics (such as logic or category theory), theoretical computer science as well as ontological foundations of the [[101companies:Project]]. Coverage of theory is very limited because this is not a major concern of the [[101companies:Project]] at this stage. \n\n[[Category:Term]]\n", "technologyMembers": [], "headline": "terms making up the \"theory\" vocabulary", "conceptMembers": [{"type": "Concept", "name": "Anamorphism"}, {"type": "Concept", "name": "Base_case"}, {"type": "Concept", "name": "Calculation"}, {"type": "Concept", "name": "Complexity"}, {"type": "Concept", "name": "Corecursion"}, {"type": "Concept", "name": "Equational_reasoning"}, {"type": "Concept", "name": "Fold_function"}, {"type": "Concept", "name": "Identity_element"}, {"type": "Concept", "name": "Induction"}, {"type": "Concept", "name": "Inductive_step"}, {"type": "Concept", "name": "Operation"}, {"type": "Concept", "name": "Proof"}, {"type": "Concept", "name": "Property"}, {"type": "Concept", "name": "Recursion"}, {"type": "Concept", "name": "Taxonomy"}, {"type": "Concept", "name": "Unfold_function"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_architecture_term": {"languageMembers": [], "discussion_links": [], "name": "Software architecture term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software architecture term", "headline_links": [{"type": "Concept", "name": "architecture"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[architecture]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Architectural_pattern"}, {"type": "Concept", "name": "User_interface"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Architectural_pattern"}], "featureMembers": []}, "Main": {"languageMembers": [], "discussion_links": [], "name": "Main", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Main", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the base category of primary, general entities", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Capability"}, {"type": "Category", "name": "Language"}, {"type": "Category", "name": "Space"}, {"type": "Category", "name": "Technology"}], "featureMembers": []}, "Foo": {"languageMembers": [], "discussion_links": [], "name": "Foo", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Foo", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Android_UI": {"languageMembers": [], "discussion_links": [], "name": "Android UI", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Android UI", "headline_links": [{"type": "Language", "name": "Android"}], "discussion": "", "technologyMembers": [], "headline": "The UI concepts in [[Language:Android]] programming", "conceptMembers": [{"type": "Concept", "name": "Activity"}, {"type": "Concept", "name": "Adapter"}, {"type": "Concept", "name": "Dialog"}, {"type": "Concept", "name": "Layout"}, {"type": "Concept", "name": "Listener"}, {"type": "Concept", "name": "Menu"}, {"type": "Concept", "name": "Toast"}, {"type": "Concept", "name": "View"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Mapping": {"languageMembers": [], "discussion_links": [], "name": "Mapping", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Mapping", "headline_links": [{"type": "Page", "name": "Capability"}, {"type": "Page", "name": "Space"}], "discussion": "", "technologyMembers": [], "headline": "all [[:Category:Capability|capabilities]] of bridging [[:Category:Space|technological space]]s", "conceptMembers": [{"type": "Concept", "name": "CodeADASHfirst_mapping"}, {"type": "Concept", "name": "Generic_mapping"}, {"type": "Concept", "name": "ModelASLASHObject_mapping"}, {"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Concept", "name": "RelationalASLASHXML_mapping"}, {"type": "Concept", "name": "SchemaADASHfirst_mapping"}, {"type": "Concept", "name": "TextADASHtoADASHobject_mapping"}, {"type": "Concept", "name": "TypeADASHbased_mapping"}, {"type": "Concept", "name": "XML_data_binding"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "POO": {"languageMembers": [], "discussion_links": [], "name": "POO", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:POO", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "Plain Old Objects", "conceptMembers": [{"type": "Concept", "name": "POJO"}, {"type": "Concept", "name": "PONO"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Webserver": {"languageMembers": [], "discussion_links": [], "name": "Webserver", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Webserver", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101extras": {"languageMembers": [], "discussion_links": [], "name": "101extras", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101extras", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XML_processor": {"languageMembers": [], "discussion_links": [], "name": "XML processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML processor", "headline_links": [{"type": "Language", "name": "XML"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JAXP"}, {"type": "Technology", "name": "SAX"}], "headline": "technologies for processing [[Language:XML]] documents", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Type_class": {"languageMembers": [], "discussion_links": [], "name": "Type class", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Type class", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Arrow"}, {"type": "Concept", "name": "Monad"}, {"type": "Concept", "name": "Monoid"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ClientADASHServer_architecture": {"languageMembers": [], "discussion_links": [], "name": "Client-Server architecture", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Client-Server architecture", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DataADASHaccess_layer": {"languageMembers": [], "discussion_links": [], "name": "Data-access layer", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data-access layer", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_framework": {"languageMembers": [], "discussion_links": [], "name": "Language framework", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language framework", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "BSF"}, {"type": "Technology", "name": "JDT"}], "headline": "a framework that helps programming for a language", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Procedural_language": {"languageMembers": [], "discussion_links": [], "name": "Procedural language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Procedural language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_Concept": {"languageMembers": [], "discussion_links": [], "name": "Language Concept", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language Concept", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Program_structure": {"languageMembers": [], "discussion_links": [], "name": "Program structure", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Program structure", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101profile": {"languageMembers": [], "discussion_links": [], "name": "101profile", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101profileACOLONJava_CLI"}], "url": "http://101companies.org/index.php/Category:101profile", "headline_links": [{"type": "Page", "name": "Implementations"}], "discussion": "", "technologyMembers": [], "headline": "a profile for using technologies in [[101companies:Implementations]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Style_sheet_languages": {"languageMembers": [], "discussion_links": [], "name": "Style sheet languages", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Style sheet languages", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Foo4": {"languageMembers": [], "discussion_links": [], "name": "Foo4", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Foo4", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Foo1": {"languageMembers": [], "discussion_links": [], "name": "Foo1", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Foo1", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Foo2": {"languageMembers": [], "discussion_links": [], "name": "Foo2", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Foo2", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Foo3": {"languageMembers": [], "discussion_links": [], "name": "Foo3", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Foo3", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technology_term": {"languageMembers": [], "discussion_links": [], "name": "Technology term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technology term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Best_practice_theme": {"languageMembers": [], "discussion_links": [], "name": "Best practice theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Best practice theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_language_term": {"languageMembers": [], "discussion_links": [], "name": "Software language term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software language term", "headline_links": [{"type": "Concept", "name": "language"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the (software) [[language]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Abstraction_mechanism"}, {"type": "Concept", "name": "Compiler"}, {"type": "Concept", "name": "Fact_extractor"}, {"type": "Concept", "name": "Fragment_locator"}, {"type": "Concept", "name": "Lexer"}, {"type": "Concept", "name": "Lexical_analysis"}, {"type": "Concept", "name": "Local_scope"}, {"type": "Concept", "name": "Parser"}, {"type": "Concept", "name": "Parsing"}, {"type": "Concept", "name": "Query_language"}, {"type": "Concept", "name": "SchemaADASHbased_validation"}, {"type": "Concept", "name": "Style_sheet_language"}, {"type": "Concept", "name": "Syntactic_category"}, {"type": "Concept", "name": "Type_system"}, {"type": "Concept", "name": "Validator"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Abstraction_mechanism"}, {"type": "Category", "name": "Language"}, {"type": "Category", "name": "Language_construct"}, {"type": "Category", "name": "Syntactic_category"}], "featureMembers": []}, "Messaging_technology": {"languageMembers": [], "discussion_links": [], "name": "Messaging technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Messaging technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Smack"}], "headline": "technologies for messaging", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technical_space": {"languageMembers": [], "discussion_links": [], "name": "Technical space", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technical space", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Component_technology": {"languageMembers": [], "discussion_links": [], "name": "Component technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Component technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "EJB"}], "headline": "technologies for component development and deployment", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "WebADASHapplication_framework": {"languageMembers": [], "discussion_links": [], "name": "Web-application framework", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "TechologyACOLONASP_ADOTNET"}], "url": "http://101companies.org/index.php/Category:Web-application framework", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "GWT"}, {"type": "Technology", "name": "JSF"}, {"type": "Technology", "name": "Ruby_on_Rails"}, {"type": "Technology", "name": "Seam"}, {"type": "Technology", "name": "Silverlight"}, {"type": "Technology", "name": "Struts"}, {"type": "Technology", "name": "Zend_framework"}], "headline": "a programming technology for creating web applications", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "rubyonrails"}], "type": "Category", "categories": [], "featureMembers": []}, "Programming_term": {"languageMembers": [], "discussion_links": [], "name": "Programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming term", "headline_links": [{"type": "Concept", "name": "programming"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[programming]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Abstraction"}, {"type": "Concept", "name": "Abstraction_mechanism"}, {"type": "Concept", "name": "Algorithm"}, {"type": "Concept", "name": "CRUD"}, {"type": "Concept", "name": "Code"}, {"type": "Concept", "name": "Corecursion"}, {"type": "Concept", "name": "Evaluation_strategy"}, {"type": "Concept", "name": "Exception"}, {"type": "Concept", "name": "Export"}, {"type": "Concept", "name": "Foreign_function_interface"}, {"type": "Concept", "name": "Import"}, {"type": "Concept", "name": "Loop"}, {"type": "Concept", "name": "Operator"}, {"type": "Concept", "name": "Operator_precedence"}, {"type": "Concept", "name": "Polymorphism"}, {"type": "Concept", "name": "Predicate"}, {"type": "Concept", "name": "Programming"}, {"type": "Concept", "name": "Programming_idiom"}, {"type": "Concept", "name": "Programming_language"}, {"type": "Concept", "name": "Programming_paradigm"}, {"type": "Concept", "name": "Recursion"}, {"type": "Concept", "name": "STM"}, {"type": "Concept", "name": "Type_definition"}, {"type": "Concept", "name": "Type_signature"}, {"type": "Concept", "name": "XML_processing"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Abstraction_mechanism"}, {"type": "Category", "name": "Evaluation_strategy"}, {"type": "Category", "name": "Polymorphism"}, {"type": "Category", "name": "Programming_idiom"}, {"type": "Category", "name": "Programming_paradigm"}, {"type": "Category", "name": "XML_processing"}], "featureMembers": []}, "Application_technology": {"languageMembers": [], "discussion_links": [], "name": "Application technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Application technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Apache_Commons"}], "headline": "a technology that is reusable in software applications", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "API"}, {"type": "Category", "name": "API_implementation"}, {"type": "Category", "name": "Communications_protocol"}, {"type": "Category", "name": "Component_technology"}, {"type": "Category", "name": "Framework"}, {"type": "Category", "name": "Library"}, {"type": "Category", "name": "Platform"}, {"type": "Category", "name": "Plugin"}, {"type": "Category", "name": "Runtime"}, {"type": "Category", "name": "Server"}, {"type": "Category", "name": "Template_engine"}], "featureMembers": []}, "Base": {"languageMembers": [], "discussion_links": [], "name": "Base", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Base", "headline_links": [{"type": "Page", "name": "ontology"}], "discussion": "", "technologyMembers": [], "headline": "the base category of the [[101companies:ontology]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101companies"}, {"type": "Category", "name": "Main"}, {"type": "Category", "name": "Misc"}], "featureMembers": []}, "Instance_method": {"languageMembers": [], "discussion_links": [], "name": "Instance method", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Instance method", "headline_links": [{"type": "Page", "name": "Method"}], "discussion": "", "technologyMembers": [], "headline": "[[:Category:Method]]s that are defined in the scope of specific objects (instances)", "conceptMembers": [{"type": "Concept", "name": "Getter"}, {"type": "Concept", "name": "Setter"}, {"type": "Concept", "name": "Virtual_method"}], "implementationMembers": [{"type": "Implementation", "name": "csharp"}], "type": "Category", "categories": [], "featureMembers": []}, "OO_paradigm": {"languageMembers": [], "discussion_links": [], "name": "OO paradigm", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO paradigm", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "API4": {"languageMembers": [], "discussion_links": [], "name": "API4", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:API4", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OASLASHX_mapping_technology": {"languageMembers": [], "discussion_links": [], "name": "O/X mapping technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:O/X mapping technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101ui": {"languageMembers": [], "discussion_links": [], "name": "101ui", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101ui", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_language": {"languageMembers": [], "discussion_links": [], "name": "Programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "AOP_language"}, {"type": "Category", "name": "Functional_programming_language"}, {"type": "Category", "name": "MultiADASHparadigm_programming_language"}, {"type": "Category", "name": "OO_programming_language"}, {"type": "Category", "name": "Procedural_programming_language"}, {"type": "Category", "name": "Scripting_language"}], "featureMembers": []}, "101contribution": {"languageMembers": [], "discussion_links": [], "name": "101contribution", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101contribution", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "android"}], "type": "Category", "categories": [{"type": "Category", "name": "101demonstration"}, {"type": "Category", "name": "101idea"}, {"type": "Category", "name": "101implementation"}, {"type": "Category", "name": "101language"}, {"type": "Category", "name": "101model"}, {"type": "Category", "name": "101module"}, {"type": "Category", "name": "101technology"}], "featureMembers": []}, "API3": {"languageMembers": [], "discussion_links": [], "name": "API3", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:API3", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101miscellaneous": {"languageMembers": [], "discussion_links": [], "name": "101miscellaneous", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101miscellaneous", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Image_processor": {"languageMembers": [], "discussion_links": [], "name": "Image processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Image processor", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Java_Image_IASLASHO"}], "headline": "technologies for processing images", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Inheritance": {"languageMembers": [], "discussion_links": [], "name": "Inheritance", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Inheritance", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Class_inheritance"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_technology_term": {"languageMembers": [], "discussion_links": [], "name": "Software technology term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software technology term", "headline_links": [{"type": "Concept", "name": "technology"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the (software) [[technology]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "API"}, {"type": "Concept", "name": "Fact_extraction"}, {"type": "Concept", "name": "Fragment_location"}, {"type": "Concept", "name": "Framework"}, {"type": "Concept", "name": "Library"}, {"type": "Concept", "name": "Program_generator"}, {"type": "Concept", "name": "Standard"}, {"type": "Concept", "name": "Template_engine"}, {"type": "Concept", "name": "Tool"}, {"type": "Concept", "name": "Web_browser"}, {"type": "Concept", "name": "Web_server"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Technology"}], "featureMembers": []}, "MDE_theme": {"languageMembers": [], "discussion_links": [], "name": "MDE theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:MDE theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "MDE theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "atl"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "emfReflexive"}, {"type": "Implementation", "name": "gra2mol"}, {"type": "Implementation", "name": "jgralab"}, {"type": "Implementation", "name": "xtext"}], "type": "Category", "categories": [], "featureMembers": []}, "Common_function": {"languageMembers": [], "discussion_links": [], "name": "Common function", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Common function", "headline_links": [{"type": "Concept", "name": "functional_programming"}], "discussion": "", "technologyMembers": [], "headline": "functions that are common in [[functional programming]]", "conceptMembers": [{"type": "Concept", "name": "Bind_function"}, {"type": "Concept", "name": "Factorial"}, {"type": "Concept", "name": "Filter_function"}, {"type": "Concept", "name": "Fmap_function"}, {"type": "Concept", "name": "Fold_function"}, {"type": "Concept", "name": "Head_function"}, {"type": "Concept", "name": "Map_function"}, {"type": "Concept", "name": "Product_function"}, {"type": "Concept", "name": "Reverse_function"}, {"type": "Concept", "name": "Sum_function"}, {"type": "Concept", "name": "Tail_function"}, {"type": "Concept", "name": "Unfold_function"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101idea": {"languageMembers": [], "discussion_links": [], "name": "101idea", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101ideaACOLONcbuild"}, {"type": "Page", "name": "101ideaACOLONguide"}, {"type": "Page", "name": "101ideaACOLONigraph"}, {"type": "Page", "name": "101ideaACOLONjtracer"}, {"type": "Page", "name": "101ideaACOLONmetrics"}, {"type": "Page", "name": "101ideaACOLONmoretechs"}, {"type": "Page", "name": "101ideaACOLONmorethemes"}, {"type": "Page", "name": "101ideaACOLONsgrep"}, {"type": "Page", "name": "101ideaACOLONsocial"}, {"type": "Page", "name": "101ideaACOLONwikinext"}], "url": "http://101companies.org/index.php/Category:101idea", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "contribution ideas for the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101view": {"languageMembers": [], "discussion_links": [], "name": "101view", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101viewACOLONImplementationASLASHfeature_matrix"}, {"type": "Page", "name": "101viewACOLONImplementationASLASHspace_matrix"}, {"type": "Page", "name": "101viewACOLONLanguages_anywhere"}, {"type": "Page", "name": "101viewACOLONLanguages_in_implementations"}, {"type": "Page", "name": "101viewACOLONNumbers"}, {"type": "Page", "name": "101viewACOLONTechnologies_anywhere"}, {"type": "Page", "name": "101viewACOLONTechnologies_in_implementations"}, {"type": "Page", "name": "101viewACOLONTechnologyASLASHspace_matrix"}], "url": "http://101companies.org/index.php/Category:101view", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "a collection of views (visualizations) for the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Haskell_theme": {"languageMembers": [], "discussion_links": [], "name": "Haskell theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Haskell theme", "headline_links": [{"type": "Language", "name": "Haskell"}], "discussion": "", "technologyMembers": [], "headline": "[[Language:Haskell]] theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "haskell"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "mvar"}, {"type": "Implementation", "name": "parsec"}, {"type": "Implementation", "name": "syb"}, {"type": "Implementation", "name": "wxHaskell"}], "type": "Category", "categories": [], "featureMembers": []}, "Tool": {"languageMembers": [], "discussion_links": [], "name": "Tool", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Tool", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Build_tool"}], "featureMembers": []}, "OO_programming_language": {"languageMembers": [{"type": "Language", "name": "Android"}, {"type": "Language", "name": "CPlusPlus"}, {"type": "Language", "name": "CSharp"}, {"type": "Language", "name": "FSharp"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "Perl"}, {"type": "Language", "name": "Python"}, {"type": "Language", "name": "Scala"}, {"type": "Language", "name": "Smalltalk"}, {"type": "Language", "name": "VBADOTNET"}], "discussion_links": [], "name": "OO programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO programming language", "headline_links": [{"type": "Concept", "name": "OO_programming"}], "discussion": "", "technologyMembers": [], "headline": "languages for [[OO programming]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Reflection_technology": {"languageMembers": [], "discussion_links": [], "name": "Reflection technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Reflection technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "OGNL"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Unspecific_version": {"languageMembers": [{"type": "Language", "name": "Android"}, {"type": "Language", "name": "AspectJ"}, {"type": "Language", "name": "CPlusPlus"}, {"type": "Language", "name": "CSharp"}, {"type": "Language", "name": "Cobol"}, {"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "Scala"}, {"type": "Language", "name": "VBADOTNET"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}], "discussion_links": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "Haskell_98"}, {"type": "Page", "name": "101implementation"}, {"type": "Page", "name": "Misc"}], "name": "Unspecific version", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Unspecific version", "headline_links": [], "discussion": "\n\nEntities such as languages or technologies can be referred to in a version-unspecific manner. For instance, there is the so-called [[Language:Haskell]] language without committing to a specific standard or specification. The present concept is supposed to contain all such \"unspecific\" entities. In contrast, there is also the [[Language:Haskell 98]] language which is precisely defined through a language specification. When the specific version or variant is not critical to a statement about an entity, then the unspecific term is preferable. In more technical documentation such as the documentation of a [[:Category:101implementation]], a precise version is preferable.\n\n[[Category:Misc]]\n", "technologyMembers": [], "headline": "collect entities of the taxonomy that are unspecific in terms of version", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Typeclass": {"languageMembers": [], "discussion_links": [], "name": "Typeclass", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Typeclass", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OO_programming_term": {"languageMembers": [], "discussion_links": [], "name": "OO programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO programming term", "headline_links": [{"type": "Concept", "name": "OO_programming"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[OO programming]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "OO_class"}, {"type": "Concept", "name": "OO_interface"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Static_method": {"languageMembers": [], "discussion_links": [{"type": "Concept", "name": "instance_method"}, {"type": "Page", "name": "Method"}], "name": "Static method", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Static method", "headline_links": [{"type": "Page", "name": "Method"}], "discussion": "\n\nSee [[instance method]]s instead.\n\n[[Category:Method]]\n", "technologyMembers": [], "headline": "[[:Category:Method]]s that are not defined in the scope of specific objects (instances)", "conceptMembers": [{"type": "Concept", "name": "Constructor_method"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Structural_modeling_language": {"languageMembers": [{"type": "Language", "name": "Ecore"}], "discussion_links": [], "name": "Structural modeling language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Structural modeling language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "any software languages for modeling structure", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Development_technique": {"languageMembers": [], "discussion_links": [], "name": "Development technique", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Development technique", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Test_automation"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Intergalactical_Java_programming": {"languageMembers": [], "discussion_links": [], "name": "Intergalactical Java programming", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Intergalactical Java programming", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming": {"languageMembers": [], "discussion_links": [], "name": "Programming", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Server": {"languageMembers": [], "discussion_links": [], "name": "Server", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Server", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Application_server"}, {"type": "Category", "name": "Web_server"}], "featureMembers": []}, "101meta": {"languageMembers": [], "discussion_links": [], "name": "101meta", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101meta", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_Programming_Technology": {"languageMembers": [], "discussion_links": [], "name": "Web Programming Technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web Programming Technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101base": {"languageMembers": [], "discussion_links": [], "name": "101base", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101base", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OASLASHX_mapping": {"languageMembers": [], "discussion_links": [], "name": "O/X mapping", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:O/X mapping", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Primary": {"languageMembers": [], "discussion_links": [], "name": "Primary", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Primary", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_language": {"languageMembers": [], "discussion_links": [], "name": "Software language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Query": {"languageMembers": [], "discussion_links": [], "name": "Query", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Query", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Haskell_technology": {"languageMembers": [], "discussion_links": [], "name": "Haskell technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Haskell technology", "headline_links": [{"type": "Language", "name": "Haskell"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Cabal"}, {"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "GHCi"}, {"type": "Technology", "name": "HPC"}, {"type": "Technology", "name": "HackageDB"}, {"type": "Technology", "name": "Parsec"}], "headline": "technologies for developing [[Language:Haskell]] software", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Java_package": {"languageMembers": [], "discussion_links": [], "name": "Java package", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "JavaACOLONcomADOTappleADOTeawt"}, {"type": "Page", "name": "JavaACOLONcomADOTsunADOTimageADOTcodecADOTjpeg"}, {"type": "Page", "name": "JavaACOLONgnuADOTregexp"}, {"type": "Page", "name": "JavaACOLONjava_cupADOTruntime"}, {"type": "Page", "name": "JavaACOLONjavaADOTapplet"}, {"type": "Page", "name": "JavaACOLONjavaADOTawt"}, {"type": "Page", "name": "JavaACOLONjavaADOTbeans"}, {"type": "Page", "name": "JavaACOLONjavaADOTio"}, {"type": "Page", "name": "JavaACOLONjavaADOTlang"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTannotation"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTmanagement"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTref"}, {"type": "Page", "name": "JavaACOLONjavaADOTlangADOTreflect"}, {"type": "Page", "name": "JavaACOLONjavaADOTmath"}, {"type": "Page", "name": "JavaACOLONjavaADOTnet"}, {"type": "Page", "name": "JavaACOLONjavaADOTnio"}, {"type": "Page", "name": "JavaACOLONjavaADOTrmi"}, {"type": "Page", "name": "JavaACOLONjavaADOTsecurity"}, {"type": "Page", "name": "JavaACOLONjavaADOTsql"}, {"type": "Page", "name": "JavaACOLONjavaADOTtext"}, {"type": "Page", "name": "JavaACOLONjavaADOTutil"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTconcurrent"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTjar"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTlogging"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTregex"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTzip"}, {"type": "Page", "name": "JavaACOLONjavaxADOTannotation"}, {"type": "Page", "name": "JavaACOLONjavaxADOTnet"}, {"type": "Page", "name": "JavaACOLONjavaxADOTswing"}, {"type": "Page", "name": "JavaACOLONorgADOTantlrADOTruntime"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTlog"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTtoolsADOTant"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTxml"}, {"type": "Page", "name": "JavaACOLONorgADOTcodehausADOTplexusADOTutilADOTxmlADOTpull"}, {"type": "Page", "name": "JavaACOLONsunADOTmisc"}], "url": "http://101companies.org/index.php/Category:Java package", "headline_links": [{"type": "Technology", "name": "Java_platform"}], "discussion": "", "technologyMembers": [], "headline": "Java packages as they contribute to the [[Technology:Java platform]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101companies": {"languageMembers": [], "discussion_links": [], "name": "101companies", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101companiesACOLONWeb_server"}], "url": "http://101companies.org/index.php/Category:101companies", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the base category of project-specific entities", "conceptMembers": [{"type": "Concept", "name": "101demonstration"}, {"type": "Concept", "name": "101implementation"}, {"type": "Concept", "name": "101model"}, {"type": "Concept", "name": "101technology"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101main"}, {"type": "Category", "name": "101misc"}, {"type": "Category", "name": "101term"}], "featureMembers": []}, "101misc": {"languageMembers": [], "discussion_links": [], "name": "101misc", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101companiesACOLONFAQ"}, {"type": "Page", "name": "101companiesACOLONGuideline"}, {"type": "Page", "name": "101companiesACOLONNotification"}, {"type": "Page", "name": "101companiesACOLONOntology"}, {"type": "Page", "name": "101companiesACOLONProject"}, {"type": "Page", "name": "101companiesACOLONSystem"}], "url": "http://101companies.org/index.php/Category:101misc", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the base category of subordinated, project-specific entities", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101founder"}, {"type": "Category", "name": "101priority"}, {"type": "Category", "name": "101profile"}, {"type": "Category", "name": "101status"}, {"type": "Category", "name": "101view"}], "featureMembers": []}, "101admin": {"languageMembers": [], "discussion_links": [], "name": "101admin", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101admin", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OO_Programming_language": {"languageMembers": [], "discussion_links": [], "name": "OO Programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO Programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Best_practices_theme": {"languageMembers": [], "discussion_links": [], "name": "Best practices theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Best practices theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "A collection of \"featured\" implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "mvar"}, {"type": "Implementation", "name": "xslt"}], "type": "Category", "categories": [], "featureMembers": []}, "Method": {"languageMembers": [], "discussion_links": [], "name": "Method", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Method", "headline_links": [{"type": "Page", "name": "OO_programming"}], "discussion": "", "technologyMembers": [], "headline": "the concept of declaring and invoking behavior in [[:Category:OO programming]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Instance_method"}, {"type": "Category", "name": "Static_method"}], "featureMembers": []}, "101companies_term": {"languageMembers": [], "discussion_links": [], "name": "101companies term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101companies term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Network_communication": {"languageMembers": [], "discussion_links": [], "name": "Network communication", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Network communication", "headline_links": [{"type": "Page", "name": "Client"}, {"type": "Page", "name": "Server"}], "discussion": "", "technologyMembers": [], "headline": "A method for exchanging data between [[:Category:Client|client]] and [[:Category:Server|server]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Web_service"}], "featureMembers": []}, "Style_sheet_language": {"languageMembers": [{"type": "Language", "name": "CSS"}], "discussion_links": [], "name": "Style sheet language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Style sheet language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Technology_profile": {"languageMembers": [], "discussion_links": [], "name": "Technology profile", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Technology profile", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Encryption_technology": {"languageMembers": [], "discussion_links": [], "name": "Encryption technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Encryption technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Bouncy_Castle"}], "headline": "technologies for encryption of digital content", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101internal": {"languageMembers": [], "discussion_links": [], "name": "101internal", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101internalACOLONmeeting04012011"}], "url": "http://101companies.org/index.php/Category:101internal", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Funcional_programming_term": {"languageMembers": [], "discussion_links": [], "name": "Funcional programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Funcional programming term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Intergalactical_Java_theme": {"languageMembers": [], "discussion_links": [], "name": "Intergalactical Java theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Intergalactical Java theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101user": {"languageMembers": [], "discussion_links": [], "name": "101user", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101user", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "anyone who uses the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101learner"}, {"type": "Category", "name": "101teacher"}], "featureMembers": []}, "Computing_term": {"languageMembers": [], "discussion_links": [], "name": "Computing term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Computing term", "headline_links": [{"type": "Concept", "name": "computing"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[computing]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Client"}, {"type": "Concept", "name": "Command"}, {"type": "Concept", "name": "Computing"}, {"type": "Concept", "name": "Concurrent_programming"}, {"type": "Concept", "name": "Condition"}, {"type": "Concept", "name": "Directory"}, {"type": "Concept", "name": "File"}, {"type": "Concept", "name": "File_system"}, {"type": "Concept", "name": "IASLASHO"}, {"type": "Concept", "name": "Input"}, {"type": "Concept", "name": "Minification"}, {"type": "Concept", "name": "Output"}, {"type": "Concept", "name": "Process"}, {"type": "Concept", "name": "Query"}, {"type": "Concept", "name": "Random_number"}, {"type": "Concept", "name": "Random_number_generator"}, {"type": "Concept", "name": "Regular_expression"}, {"type": "Concept", "name": "Server"}, {"type": "Concept", "name": "State"}, {"type": "Concept", "name": "TCP"}, {"type": "Concept", "name": "Text"}, {"type": "Concept", "name": "Thread"}, {"type": "Concept", "name": "Transformation"}, {"type": "Concept", "name": "UDP"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Transformation"}], "featureMembers": []}, "UI_101feature": {"languageMembers": [], "discussion_links": [], "name": "UI 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:UI 101feature", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "UI features of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Intelligent_UI"}, {"type": "Feature", "name": "Localization"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Feature", "name": "Touch_control"}, {"type": "Feature", "name": "UndoASLASHredo"}, {"type": "Feature", "name": "Voice_control"}, {"type": "Feature", "name": "Web_UI"}]}, "Program_generator": {"languageMembers": [], "discussion_links": [], "name": "Program generator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Program generator", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "DBDirect"}, {"type": "Technology", "name": "xjc"}, {"type": "Technology", "name": "xsdADOTexe"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Parser_generator"}], "featureMembers": []}, "Misc": {"languageMembers": [], "discussion_links": [], "name": "Misc", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Misc", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the base category of subordinated, general entities", "conceptMembers": [{"type": "Concept", "name": "Technology_profile"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "ADOTNET_namespace"}, {"type": "Category", "name": "Abstraction_mechanism"}, {"type": "Category", "name": "Architectural_component"}, {"type": "Category", "name": "Communication"}, {"type": "Category", "name": "Computation"}, {"type": "Category", "name": "Domain"}, {"type": "Category", "name": "Java_package"}, {"type": "Category", "name": "Language_concept"}, {"type": "Category", "name": "Pattern"}, {"type": "Category", "name": "Technical_segment"}, {"type": "Category", "name": "Technique"}, {"type": "Category", "name": "Term"}, {"type": "Category", "name": "Unspecific_version"}], "featureMembers": []}, "Abstract_language": {"languageMembers": [], "discussion_links": [], "name": "Abstract language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Abstract language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Methodology_term": {"languageMembers": [], "discussion_links": [], "name": "Methodology term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Methodology term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Java_bytecode_processor": {"languageMembers": [], "discussion_links": [], "name": "Java bytecode processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Java bytecode processor", "headline_links": [{"type": "Language", "name": "Java_bytecode"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ASM"}, {"type": "Technology", "name": "BCEL"}, {"type": "Technology", "name": "Javassist"}], "headline": "a processor for [[Language:Java bytecode]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_programming_technology": {"languageMembers": [], "discussion_links": [], "name": "Web programming technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web programming technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Metamodel": {"languageMembers": [], "discussion_links": [], "name": "Metamodel", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Metamodel", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101quality": {"languageMembers": [], "discussion_links": [], "name": "101quality", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101quality", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DomainADASHspecific_language": {"languageMembers": [{"type": "Language", "name": "HTML"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "XPath"}], "discussion_links": [], "name": "Domain-specific language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Domain-specific language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that addresses a specific domain", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Style_sheet_language"}], "featureMembers": []}, "Functional_programming_term": {"languageMembers": [], "discussion_links": [], "name": "Functional programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Functional programming term", "headline_links": [{"type": "Concept", "name": "functional_programming"}], "discussion": "", "technologyMembers": [], "headline": "terms making up the [[functional programming]] vocabulary", "conceptMembers": [{"type": "Concept", "name": "Algebraic_data_type"}, {"type": "Concept", "name": "Anamorphism"}, {"type": "Concept", "name": "Applicative_functor"}, {"type": "Concept", "name": "Arrow"}, {"type": "Concept", "name": "Catamorphism"}, {"type": "Concept", "name": "Combinator"}, {"type": "Concept", "name": "Data_constructor"}, {"type": "Concept", "name": "Function_application"}, {"type": "Concept", "name": "Function_composition"}, {"type": "Concept", "name": "Function_definition"}, {"type": "Concept", "name": "Functor"}, {"type": "Concept", "name": "Generic_function"}, {"type": "Concept", "name": "Guard"}, {"type": "Concept", "name": "HigherADASHorder_function"}, {"type": "Concept", "name": "Impure_function"}, {"type": "Concept", "name": "Induction"}, {"type": "Concept", "name": "Lambda_abstraction"}, {"type": "Concept", "name": "Monad"}, {"type": "Concept", "name": "Monadic_value"}, {"type": "Concept", "name": "Parser_combinator"}, {"type": "Concept", "name": "Partial_application"}, {"type": "Concept", "name": "Pattern_matching"}, {"type": "Concept", "name": "Polymorphic_function"}, {"type": "Concept", "name": "Pure_function"}, {"type": "Concept", "name": "Type_constructor"}, {"type": "Concept", "name": "Zipper"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Common_function"}, {"type": "Category", "name": "Monad"}, {"type": "Category", "name": "Type_class"}], "featureMembers": []}, "File_format": {"languageMembers": [], "discussion_links": [], "name": "File format", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:File format", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101section": {"languageMembers": [], "discussion_links": [], "name": "101section", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101section", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Architecture_term": {"languageMembers": [], "discussion_links": [], "name": "Architecture term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Architecture term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Webbrowser": {"languageMembers": [], "discussion_links": [], "name": "Webbrowser", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Webbrowser", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Transformation_term": {"languageMembers": [], "discussion_links": [], "name": "Transformation term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Transformation term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Client_server_architecture": {"languageMembers": [], "discussion_links": [], "name": "Client server architecture", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Client server architecture", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Capability": {"languageMembers": [], "discussion_links": [], "name": "Capability", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Capability", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a capability of programming technologies", "conceptMembers": [{"type": "Concept", "name": "Access_control"}, {"type": "Concept", "name": "Concurrency"}, {"type": "Concept", "name": "Distribution"}, {"type": "Concept", "name": "Fault_tolerance"}, {"type": "Concept", "name": "Indexing"}, {"type": "Concept", "name": "Interaction"}, {"type": "Concept", "name": "Logging"}, {"type": "Concept", "name": "Parallelism"}, {"type": "Concept", "name": "Parsing"}, {"type": "Concept", "name": "Persistence"}, {"type": "Concept", "name": "Serialization"}, {"type": "Concept", "name": "Streaming"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Mapping"}, {"type": "Category", "name": "Parallelism"}, {"type": "Category", "name": "Serialization"}], "featureMembers": []}, "XMLADASHprocessor": {"languageMembers": [], "discussion_links": [], "name": "XML-processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML-processor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_Method": {"languageMembers": [], "discussion_links": [], "name": "Programming Method", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming Method", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "ServerADASHside_scripting"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Architectural_component": {"languageMembers": [], "discussion_links": [], "name": "Architectural component", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Architectural component", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "Definable part of a software system", "conceptMembers": [{"type": "Concept", "name": "Business_layer"}, {"type": "Concept", "name": "Client"}, {"type": "Concept", "name": "DataADASHaccess_layer"}, {"type": "Concept", "name": "Presentation_layer"}, {"type": "Concept", "name": "Server"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101basics": {"languageMembers": [], "discussion_links": [], "name": "101basics", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101basics", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Intergalactical_Java_Programming": {"languageMembers": [], "discussion_links": [], "name": "Intergalactical Java Programming", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Intergalactical Java Programming", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Algebra": {"languageMembers": [], "discussion_links": [], "name": "Algebra", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Algebra", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Relational_algebra"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Utility": {"languageMembers": [], "discussion_links": [], "name": "Utility", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Utility", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Ambiguous_term": {"languageMembers": [], "discussion_links": [], "name": "Ambiguous term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Ambiguous term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "terms in need of disambiguation", "conceptMembers": [{"type": "Concept", "name": "Class"}, {"type": "Concept", "name": "Composition"}, {"type": "Concept", "name": "Constructor"}, {"type": "Concept", "name": "Design"}, {"type": "Concept", "name": "Fold"}, {"type": "Concept", "name": "Unfold"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Java_mapping_theme": {"languageMembers": [], "discussion_links": [], "name": "Java mapping theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Java mapping theme", "headline_links": [{"type": "Language", "name": "Java"}], "discussion": "", "technologyMembers": [], "headline": "[[Language:Java]] theme of implementations that travel technological spaces", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "antlrObjects"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "jaxbComposition"}], "type": "Category", "categories": [], "featureMembers": []}, "MultiADASHtier_architecture": {"languageMembers": [], "discussion_links": [], "name": "Multi-tier architecture", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Multi-tier architecture", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "ClientADASHserver_architecture"}, {"type": "Concept", "name": "Distributed_Multitier_architecture"}, {"type": "Concept", "name": "ServiceADASHoriented_architecture"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Evaluation_strategy": {"languageMembers": [], "discussion_links": [], "name": "Evaluation strategy", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Evaluation strategy", "headline_links": [{"type": "Concept", "name": "Evaluation_strategy"}], "discussion": "", "technologyMembers": [], "headline": "[[Evaluation strategy|evaluation strategies]] for programming languages", "conceptMembers": [{"type": "Concept", "name": "Eager_evaluation"}, {"type": "Concept", "name": "Lazy_evaluation"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101tester": {"languageMembers": [], "discussion_links": [], "name": "101tester", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101tester", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OO_Programming_term": {"languageMembers": [], "discussion_links": [], "name": "OO Programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO Programming term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Application_domain": {"languageMembers": [], "discussion_links": [], "name": "Application domain", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Application domain", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "ECommerce"}, {"type": "Concept", "name": "Financial_exchange"}, {"type": "Concept", "name": "Health_care"}, {"type": "Concept", "name": "Human_resources"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Persistence_technology": {"languageMembers": [], "discussion_links": [{"type": "Page", "name": "Mapping_technology"}], "name": "Persistence technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Persistence technology", "headline_links": [{"type": "Concept", "name": "persistence"}], "discussion": "\n\nThere is also the related notion of [[:Category:Mapping technology|mapping technology]].\n\nSpecific technologies may qualify both as persistence and mapping technology.\n\nThe label mapping technology is meant to imply that one can properly bridge form one technical space to another.\n\nIn contrast, a persistence technology may simply use a helper technical space to achieve persistence without providing flexible mapping.\n", "technologyMembers": [{"type": "Technology", "name": "Hibernate"}], "headline": "a technology that serves the capability of [[persistence]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Advice": {"languageMembers": [], "discussion_links": [], "name": "Advice", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Advice", "headline_links": [{"type": "Concept", "name": "aspectADASHoriented_programming"}], "discussion": "", "technologyMembers": [], "headline": "the concept of advising existing behaviors in [[aspect-oriented programming]]", "conceptMembers": [{"type": "Concept", "name": "After_advice"}, {"type": "Concept", "name": "Around_advice"}, {"type": "Concept", "name": "Before_advice"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Framework": {"languageMembers": [], "discussion_links": [], "name": "Framework", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "JavaACOLONjavaADOTapplet"}, {"type": "Page", "name": "JavaACOLONjavaADOTawt"}, {"type": "Page", "name": "JavaACOLONjavaADOTbeans"}, {"type": "Page", "name": "JavaACOLONjavaADOTio"}, {"type": "Page", "name": "JavaACOLONjavaADOTnet"}, {"type": "Page", "name": "JavaACOLONjavaADOTnio"}, {"type": "Page", "name": "JavaACOLONjavaADOTrmi"}, {"type": "Page", "name": "JavaACOLONjavaADOTsecurity"}, {"type": "Page", "name": "JavaACOLONjavaADOTutilADOTlogging"}, {"type": "Page", "name": "JavaACOLONjavaxADOTjnlp"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTlog"}, {"type": "Page", "name": "JavaACOLONorgADOTapacheADOTtoolsADOTant"}], "url": "http://101companies.org/index.php/Category:Framework", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ASM"}, {"type": "Technology", "name": "AWT"}, {"type": "Technology", "name": "Avalon"}, {"type": "Technology", "name": "BCEL"}, {"type": "Technology", "name": "Happstack"}, {"type": "Technology", "name": "Java_collections"}, {"type": "Technology", "name": "Java_events"}, {"type": "Technology", "name": "Java_misc"}, {"type": "Technology", "name": "Javassist"}, {"type": "Technology", "name": "MoDisco"}, {"type": "Technology", "name": "OSCache"}, {"type": "Technology", "name": "Spring"}, {"type": "Technology", "name": "WCF"}, {"type": "Technology", "name": "log4j"}], "headline": "", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "groovyDataFlowVariables"}], "type": "Category", "categories": [{"type": "Category", "name": "Language_framework"}, {"type": "Category", "name": "WebADASHapplication_framework"}], "featureMembers": []}, "Quality_101feature": {"languageMembers": [], "discussion_links": [], "name": "Quality 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Quality 101feature", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "Qualities of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101design"}, {"type": "Category", "name": "101execution"}], "featureMembers": []}, "Syntactic_category": {"languageMembers": [], "discussion_links": [], "name": "Syntactic category", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Syntactic category", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Expression"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Message_formats": {"languageMembers": [], "discussion_links": [], "name": "Message formats", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Message formats", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Functional_programming_language": {"languageMembers": [{"type": "Language", "name": "FSharp"}, {"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "Haskell_98"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "Perl"}, {"type": "Language", "name": "Python"}, {"type": "Language", "name": "Scala"}, {"type": "Language", "name": "XQuery"}, {"type": "Language", "name": "XSLT"}], "discussion_links": [], "name": "Functional programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Functional programming language", "headline_links": [{"type": "Concept", "name": "functional_programming"}], "discussion": "", "technologyMembers": [], "headline": "languages for [[functional programming]]", "conceptMembers": [{"type": "Concept", "name": "Concurrent_Haskell"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "MetaADASHlevel_101feature": {"languageMembers": [], "discussion_links": [], "name": "Meta-level 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Meta-level 101feature", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "Meta-level features", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Code_generation_demo"}, {"type": "Feature", "name": "Program_comprehension_demo"}, {"type": "Feature", "name": "Software_analysis_demo"}, {"type": "Feature", "name": "Software_metrics_demo"}, {"type": "Feature", "name": "Software_transformation_demo"}, {"type": "Feature", "name": "Wiki_analysis_demo"}]}, "Fact_extractor": {"languageMembers": [], "discussion_links": [], "name": "Fact extractor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Fact extractor", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "JFactExtractor"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Import_matcher": {"languageMembers": [], "discussion_links": [], "name": "Import matcher", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Import matcher", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "HsImportMatcher"}], "headline": "a tool for language-based matching of imports for technologies", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Internet_term": {"languageMembers": [], "discussion_links": [], "name": "Internet term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Internet term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "Terms making up the Internet vocabulary", "conceptMembers": [{"type": "Concept", "name": "Cookie"}, {"type": "Concept", "name": "Web_application"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "WebADASHapplication": {"languageMembers": [], "discussion_links": [], "name": "Web-application", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web-application", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Android_location": {"languageMembers": [], "discussion_links": [], "name": "Android location", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Android location", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101reviewer": {"languageMembers": [], "discussion_links": [], "name": "101reviewer", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONAndrei_Varanovich"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}, {"type": "Page", "name": "101contributorACOLONTobias_Zimmer"}], "url": "http://101companies.org/index.php/Category:101reviewer", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "XML_theme": {"languageMembers": [], "discussion_links": [], "name": "XML theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:XML theme", "headline_links": [{"type": "Language", "name": "XML"}], "discussion": "", "technologyMembers": [], "headline": "[[Language:XML]] theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "csharpLinqToXml"}, {"type": "Implementation", "name": "dom"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "xmlReader"}, {"type": "Implementation", "name": "xquery"}, {"type": "Implementation", "name": "xslt"}], "type": "Category", "categories": [], "featureMembers": []}, "Compiler": {"languageMembers": [], "discussion_links": [], "name": "Compiler", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Compiler", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "ajc"}, {"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "fcsADOTexe"}, {"type": "Technology", "name": "javac"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101gatekeeper": {"languageMembers": [], "discussion_links": [], "name": "101gatekeeper", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONAndrei_Varanovich"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}, {"type": "Page", "name": "101contributorACOLONThomas_Schmorleiz"}], "url": "http://101companies.org/index.php/Category:101gatekeeper", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "Anyone administering wiki and repository of the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Meta_101feature": {"languageMembers": [], "discussion_links": [], "name": "Meta 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Meta 101feature", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Pattern": {"languageMembers": [], "discussion_links": [], "name": "Pattern", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Pattern", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "Resolve commonly occuring problems in software programming", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Design_pattern"}], "featureMembers": []}, "101administrator": {"languageMembers": [], "discussion_links": [], "name": "101administrator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101administrator", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101initiator": {"languageMembers": [], "discussion_links": [], "name": "101initiator", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101initiator", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101author": {"languageMembers": [], "discussion_links": [], "name": "101author", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONAndrei_Varanovich"}, {"type": "Page", "name": "101contributorACOLONJeanADASHMarie_Favre"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}, {"type": "Page", "name": "101contributorACOLONSebastian_Jackel"}, {"type": "Page", "name": "101contributorACOLONThomas_Schmorleiz"}, {"type": "Page", "name": "101contributorACOLONTobias_Zimmer"}], "url": "http://101companies.org/index.php/Category:101author", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "anyone who authors content for the wiki of the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Application": {"languageMembers": [], "discussion_links": [], "name": "Application", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Application", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the concept of applying (invoking, etc.) a named abstraction", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "ViewADASHdeclaration_language": {"languageMembers": [], "discussion_links": [], "name": "View-declaration language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:View-declaration language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Abstract_data_type": {"languageMembers": [], "discussion_links": [], "name": "Abstract data type", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Abstract data type", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Queue"}, {"type": "Concept", "name": "Set"}, {"type": "Concept", "name": "Stack"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101priority": {"languageMembers": [], "discussion_links": [], "name": "101priority", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101priorityACOLONHIGH"}, {"type": "Page", "name": "101priorityACOLONLOW"}, {"type": "Page", "name": "101priorityACOLONMEDIUM"}], "url": "http://101companies.org/index.php/Category:101priority", "headline_links": [{"type": "Page", "name": "101contributor"}], "discussion": "", "technologyMembers": [], "headline": "priorities used by [[:Category:101contributor|101contributors]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Business_layer": {"languageMembers": [], "discussion_links": [], "name": "Business layer", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Business layer", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DBMS": {"languageMembers": [], "discussion_links": [], "name": "DBMS", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:DBMS", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "HSQLDB"}, {"type": "Technology", "name": "IndexedDB"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "SQL_Server"}, {"type": "Technology", "name": "Sqlite"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101assistant": {"languageMembers": [], "discussion_links": [], "name": "101assistant", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONEelco_Visser"}, {"type": "Page", "name": "101contributorACOLONJ\u00fcrgen_Starek"}], "url": "http://101companies.org/index.php/Category:101assistant", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "OO_programming": {"languageMembers": [], "discussion_links": [], "name": "OO programming", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:OO programming", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "OO programming (specifically, techniques for it)", "conceptMembers": [{"type": "Concept", "name": "Object_composition"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Inheritance"}, {"type": "Category", "name": "POO"}], "featureMembers": []}, "Network_technology": {"languageMembers": [], "discussion_links": [], "name": "Network technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Network technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "RMIADASHIIOP"}], "headline": "technologies for operating on the network", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_technique": {"languageMembers": [], "discussion_links": [], "name": "Programming technique", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming technique", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101engineer": {"languageMembers": [], "discussion_links": [], "name": "101engineer", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101contributorACOLONAndrei_Varanovich"}, {"type": "Page", "name": "101contributorACOLONJeanADASHMarie_Favre"}, {"type": "Page", "name": "101contributorACOLONRalf_L\u00e4mmel"}, {"type": "Page", "name": "101contributorACOLONSebastian_Jackel"}, {"type": "Page", "name": "101contributorACOLONThomas_Schmorleiz"}], "url": "http://101companies.org/index.php/Category:101engineer", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "anyone who contributes to the infrastructure of the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Term": {"languageMembers": [], "discussion_links": [], "name": "Term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Language"}, {"type": "Concept", "name": "Technology"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101term"}, {"type": "Category", "name": "Ambiguous_term"}, {"type": "Category", "name": "Android_term"}, {"type": "Category", "name": "Computing_term"}, {"type": "Category", "name": "Data_term"}, {"type": "Category", "name": "Functional_programming_term"}, {"type": "Category", "name": "Hardware_term"}, {"type": "Category", "name": "Haskell_term"}, {"type": "Category", "name": "Internet_term"}, {"type": "Category", "name": "OO_programming_term"}, {"type": "Category", "name": "Programming_term"}, {"type": "Category", "name": "Programming_theory_term"}, {"type": "Category", "name": "Software_architecture_term"}, {"type": "Category", "name": "Software_engineering_term"}, {"type": "Category", "name": "Software_language_term"}, {"type": "Category", "name": "Software_technology_term"}, {"type": "Category", "name": "Type_system_term"}], "featureMembers": []}, "Database_management_system": {"languageMembers": [], "discussion_links": [], "name": "Database management system", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Database management system", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101status": {"languageMembers": [], "discussion_links": [], "name": "101status", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101statusACOLONACTIVE"}, {"type": "Page", "name": "101statusACOLONBroken"}, {"type": "Page", "name": "101statusACOLONDONE"}, {"type": "Page", "name": "101statusACOLONFeatured"}, {"type": "Page", "name": "101statusACOLONSuboptimal"}, {"type": "Page", "name": "101statusACOLONTODO"}], "url": "http://101companies.org/index.php/Category:101status", "headline_links": [{"type": "Page", "name": "101contribution"}], "discussion": "", "technologyMembers": [], "headline": "statuses used for [[:Category:101contribution|101contributions]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101ACOLONmeta": {"languageMembers": [], "discussion_links": [], "name": "101:meta", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101:meta", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Domain": {"languageMembers": [], "discussion_links": [], "name": "Domain", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Domain", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Programming_domain"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Application_domain"}, {"type": "Category", "name": "Programming_domain"}], "featureMembers": []}, "Functional_programming_idiom": {"languageMembers": [], "discussion_links": [], "name": "Functional programming idiom", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Functional programming idiom", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Pretty_printer": {"languageMembers": [], "discussion_links": [], "name": "Pretty printer", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Pretty printer", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Syntax_highlighter"}], "featureMembers": []}, "ToolADASHdefined_language": {"languageMembers": [{"type": "Language", "name": "xjc_POJOs"}], "discussion_links": [], "name": "Tool-defined language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Tool-defined language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that is effectively defined by a tool", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Scripting_language": {"languageMembers": [{"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "OGNL"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "Perl"}, {"type": "Language", "name": "Shell_Script"}], "discussion_links": [], "name": "Scripting language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Scripting language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a software language that is used to control applications", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Templating_engine": {"languageMembers": [], "discussion_links": [], "name": "Templating engine", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Templating engine", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Source_code_repository": {"languageMembers": [], "discussion_links": [], "name": "Source code repository", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Source code repository", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "HackageDB"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Tookit": {"languageMembers": [], "discussion_links": [], "name": "Tookit", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Tookit", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "IDE": {"languageMembers": [], "discussion_links": [], "name": "IDE", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:IDE", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Technology", "name": "QTCreator"}, {"type": "Technology", "name": "Visual_Studio"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "User_Interface": {"languageMembers": [], "discussion_links": [], "name": "User Interface", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:User Interface", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Search_technology": {"languageMembers": [], "discussion_links": [], "name": "Search technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Search technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Lucene"}], "headline": "a technology that serves the capability of indexing and searching", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Markup_technology": {"languageMembers": [], "discussion_links": [], "name": "Markup technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Markup technology", "headline_links": [{"type": "Page", "name": "Markup_language"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "ECS"}, {"type": "Technology", "name": "Tidy"}], "headline": "technology for manipulating content of [[:Category:Markup language]]s", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Implementation": {"languageMembers": [], "discussion_links": [], "name": "Implementation", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Implementation", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Tagging_language": {"languageMembers": [], "discussion_links": [], "name": "Tagging language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Tagging language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Web_technology": {"languageMembers": [], "discussion_links": [], "name": "Web technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web technology", "headline_links": [{"type": "Concept", "name": "web_programming"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Jetty"}], "headline": "a technology for [[web programming]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Web_browser"}, {"type": "Category", "name": "Web_server"}, {"type": "Category", "name": "WebADASHapplication_framework"}], "featureMembers": []}, "101theme": {"languageMembers": [], "discussion_links": [], "name": "101theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101theme", "headline_links": [{"type": "Page", "name": "101contribution"}, {"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "themes of [[:Category:101contribution|contributions]] to the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "ANTLR_theme"}, {"type": "Category", "name": "Best_practices_theme"}, {"type": "Category", "name": "DataADASHparallelism_theme"}, {"type": "Category", "name": "GUI_theme"}, {"type": "Category", "name": "Haskell_theme"}, {"type": "Category", "name": "Java_mapping_theme"}, {"type": "Category", "name": "MDE_theme"}, {"type": "Category", "name": "NotJustSQL_theme"}, {"type": "Category", "name": "Web_theme"}, {"type": "Category", "name": "XML_theme"}], "featureMembers": []}, "101prospect": {"languageMembers": [], "discussion_links": [], "name": "101prospect", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101prospect", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Logic_programming_language": {"languageMembers": [{"type": "Language", "name": "Prolog"}], "discussion_links": [], "name": "Logic programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Logic programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Mapping_technology": {"languageMembers": [], "discussion_links": [], "name": "Mapping technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Mapping technology", "headline_links": [{"type": "Page", "name": "Space"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Entity_Framework"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Technology", "name": "JAXB"}], "headline": "a technology for mapping between [[:Category:Space|technological spaces]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "GUI_theme": {"languageMembers": [], "discussion_links": [], "name": "GUI theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:GUI theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "GUI theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "rubyonrails"}], "type": "Category", "categories": [], "featureMembers": []}, "Imperative_programming_language": {"languageMembers": [], "discussion_links": [], "name": "Imperative programming language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Imperative programming language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Directed_mapping": {"languageMembers": [], "discussion_links": [], "name": "Directed mapping", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Directed mapping", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Primary_concept": {"languageMembers": [], "discussion_links": [], "name": "Primary concept", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Primary concept", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Space": {"languageMembers": [], "discussion_links": [], "name": "Space", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Space", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a community and technology context", "conceptMembers": [{"type": "Concept", "name": "Fileware"}, {"type": "Concept", "name": "Grammarware"}, {"type": "Concept", "name": "Lambdaware"}, {"type": "Concept", "name": "Modelware"}, {"type": "Concept", "name": "Nonrelationalware"}, {"type": "Concept", "name": "Objectware"}, {"type": "Concept", "name": "Ontoware"}, {"type": "Concept", "name": "Relationalware"}, {"type": "Concept", "name": "XMLware"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Language_Technology": {"languageMembers": [], "discussion_links": [], "name": "Language Technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language Technology", "headline_links": [], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "Jython"}], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101contributor": {"languageMembers": [], "discussion_links": [], "name": "101contributor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101contributor", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "technologyMembers": [], "headline": "Anyone who contributes to the [[101companies:Project]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101advisor"}, {"type": "Category", "name": "101author"}, {"type": "Category", "name": "101developer"}, {"type": "Category", "name": "101engineer"}, {"type": "Category", "name": "101gatekeeper"}, {"type": "Category", "name": "101influencer"}, {"type": "Category", "name": "101proposer"}, {"type": "Category", "name": "101research20er"}, {"type": "Category", "name": "101reviewer"}], "featureMembers": []}, "Behavioral_101feature": {"languageMembers": [], "discussion_links": [], "name": "Behavioral 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Behavioral 101feature", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "Behaviors of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Logging"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Visualization"}]}, "Web_application": {"languageMembers": [], "discussion_links": [], "name": "Web application", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Web application", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5indexedDatabase"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "seaside"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "strutsXml"}, {"type": "Implementation", "name": "webDSL"}, {"type": "Implementation", "name": "zend"}], "type": "Category", "categories": [], "featureMembers": []}, "Structural_101feature": {"languageMembers": [], "discussion_links": [], "name": "Structural 101feature", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Structural 101feature", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "technologyMembers": [], "headline": "Structure of the [[101companies:System]]", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": [{"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "ManyADASHtoADASHmany"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Type_hierarchy"}]}, "NotJustSQL_theme": {"languageMembers": [], "discussion_links": [], "name": "NotJustSQL theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:NotJustSQL theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "modern database theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "hadoop"}, {"type": "Implementation", "name": "mySql"}], "type": "Category", "categories": [], "featureMembers": []}, "LanguageADASHspecific_technology": {"languageMembers": [], "discussion_links": [], "name": "Language-specific technology", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Language-specific technology", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "technologies grouped by language", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Bytecode_processor"}, {"type": "Category", "name": "Haskell_technology"}, {"type": "Category", "name": "Media_processor"}, {"type": "Category", "name": "XML_processor"}], "featureMembers": []}, "Syntax_highlighter": {"languageMembers": [], "discussion_links": [], "name": "Syntax highlighter", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Syntax highlighter", "headline_links": [{"type": "Page", "name": "pretty_printer"}], "discussion": "", "technologyMembers": [{"type": "Technology", "name": "GeSHi"}, {"type": "Technology", "name": "jEdit"}], "headline": "a [[:Category:pretty printer]] that specifically highlights syntax", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Programming_paradigm": {"languageMembers": [], "discussion_links": [], "name": "Programming paradigm", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Programming paradigm", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "AspectADASHoriented_programming"}, {"type": "Concept", "name": "Functional_programming"}, {"type": "Concept", "name": "OO_programming"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Toolware": {"languageMembers": [], "discussion_links": [], "name": "Toolware", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Toolware", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Android_Location": {"languageMembers": [], "discussion_links": [], "name": "Android Location", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Android Location", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "LocationListener"}, {"type": "Concept", "name": "LocationManager"}, {"type": "Concept", "name": "MapView"}, {"type": "Concept", "name": "Overlay"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Functional_language": {"languageMembers": [], "discussion_links": [], "name": "Functional language", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Functional language", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101demonstration": {"languageMembers": [], "discussion_links": [], "name": "101demonstration", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101demonstrationACOLONyapg"}], "url": "http://101companies.org/index.php/Category:101demonstration", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Software_languages": {"languageMembers": [], "discussion_links": [], "name": "Software languages", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Software languages", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Bytecode_processor": {"languageMembers": [], "discussion_links": [], "name": "Bytecode processor", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Bytecode processor", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "a processor for bytecode", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "Java_bytecode_processor"}], "featureMembers": []}, "101main": {"languageMembers": [], "discussion_links": [], "name": "101main", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:101main", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "the base category of primary, project-specific entities", "conceptMembers": [{"type": "Concept", "name": "101contribution"}, {"type": "Concept", "name": "101feature"}], "implementationMembers": [], "type": "Category", "categories": [{"type": "Category", "name": "101contribution"}, {"type": "Category", "name": "101feature"}, {"type": "Category", "name": "101stakeholder"}, {"type": "Category", "name": "101theme"}], "featureMembers": []}, "ObjectADASHoriented_programming_term": {"languageMembers": [], "discussion_links": [], "name": "Object-oriented programming term", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Object-oriented programming term", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "Relationship": {"languageMembers": [], "discussion_links": [], "name": "Relationship", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Relationship", "headline_links": [{"type": "Page", "name": "type"}], "discussion": "", "technologyMembers": [], "headline": "the concept of relating [[:Category:type]]s", "conceptMembers": [{"type": "Concept", "name": "Containment_relationship"}, {"type": "Concept", "name": "Reference_relationship"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "DataADASHparallelism_theme": {"languageMembers": [], "discussion_links": [], "name": "Data-parallelism theme", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data-parallelism theme", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "data-parallelism theme of implementations", "conceptMembers": [], "implementationMembers": [{"type": "Implementation", "name": "csharpDryadLinq"}, {"type": "Implementation", "name": "dph"}, {"type": "Implementation", "name": "hadoop"}], "type": "Category", "categories": [], "featureMembers": []}, "Data_structure": {"languageMembers": [], "discussion_links": [], "name": "Data structure", "categoryMembers": [], "pageMembers": [], "url": "http://101companies.org/index.php/Category:Data structure", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [{"type": "Concept", "name": "Array"}, {"type": "Concept", "name": "List"}, {"type": "Concept", "name": "Parallel_array"}, {"type": "Concept", "name": "Table"}, {"type": "Concept", "name": "Tree"}, {"type": "Concept", "name": "Tuple"}, {"type": "Concept", "name": "Zipper"}], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}, "101model": {"languageMembers": [], "discussion_links": [], "name": "101model", "categoryMembers": [], "pageMembers": [{"type": "Page", "name": "101modelACOLONargoUML"}], "url": "http://101companies.org/index.php/Category:101model", "headline_links": [], "discussion": "", "technologyMembers": [], "headline": "", "conceptMembers": [], "implementationMembers": [], "type": "Category", "categories": [], "featureMembers": []}}, "Concept": {"Toast": {"discussion_links": [], "name": "Toast", "url": "http://101companies.org/index.php/Toast", "headline_links": [{"type": "Concept", "name": "View_"}], "discussion": "", "headline": "a [[View | view]] containing a quick little message for the user", "type": "Concept"}, "Relational_database": {"discussion_links": [], "name": "Relational database", "url": "http://101companies.org/index.php/Relational database", "headline_links": [], "discussion": "", "headline": "a database that conforms to the relational model", "type": "Concept"}, "Monoid": {"discussion_links": [], "name": "Monoid", "url": "http://101companies.org/index.php/Monoid", "headline_links": [], "discussion": "", "headline": "A type with an associative binary operation and a neutral element", "type": "Concept"}, "ThreeADASHtier_architecture": {"discussion_links": [], "name": "Three-tier architecture", "url": "http://101companies.org/index.php/Three-tier architecture", "headline_links": [{"type": "Concept", "name": "architectural_pattern"}], "discussion": "", "headline": "An [[architectural pattern]] to seperate concerns", "type": "Concept"}, "ClientADASHserver_architecture": {"discussion_links": [], "name": "Client-server architecture", "url": "http://101companies.org/index.php/Client-server architecture", "headline_links": [{"type": "Concept", "name": "architectural_pattern"}, {"type": "Concept", "name": "client"}, {"type": "Concept", "name": "server"}], "discussion": "", "headline": "An [[architectural pattern]] divided into [[client]] and [[server]]", "type": "Concept"}, "Parallel_array": {"discussion_links": [], "name": "Parallel array", "url": "http://101companies.org/index.php/Parallel array", "headline_links": [{"type": "Concept", "name": "array"}], "discussion": "", "headline": "An [[array]]-like data structure amenable to vector processing", "type": "Concept"}, "Data_generator": {"discussion_links": [], "name": "Data generator", "url": "http://101companies.org/index.php/Data generator", "headline_links": [{"type": "Concept", "name": "function"}, {"type": "Concept", "name": "tool"}, {"type": "Concept", "name": "test_data_generation"}], "discussion": "", "headline": "a [[function]] or a [[tool]] for [[test data generation]]", "type": "Concept"}, "InterADASHtype_declaration": {"discussion_links": [], "name": "Inter-type declaration", "url": "http://101companies.org/index.php/Inter-type declaration", "headline_links": [], "discussion": "", "headline": "retroactive declaration of contributions to a type declaration", "type": "Concept"}, "ServerADASHside_scripting": {"discussion_links": [], "name": "Server-side scripting", "url": "http://101companies.org/index.php/Server-side scripting", "headline_links": [{"type": "Page", "name": "programming_method"}, {"type": "Page", "name": "server"}], "discussion": "", "headline": "A [[:Category:programming method]] for generating web content on the [[:Category:server]] dynamically", "type": "Concept"}, "Haskell_script": {"discussion_links": [], "name": "Haskell script", "url": "http://101companies.org/index.php/Haskell script", "headline_links": [{"type": "Concept", "name": "file"}, {"type": "Concept", "name": "code"}], "discussion": "", "headline": "A [[file]] with Haskell [[code]]", "type": "Concept"}, "Standard": {"discussion_links": [], "name": "Standard", "url": "http://101companies.org/index.php/Standard", "headline_links": [], "discussion": "", "headline": "An established norm or requirement about software technologies and languages", "type": "Concept"}, "TypeADASHclass_instance": {"discussion_links": [], "name": "Type-class instance", "url": "http://101companies.org/index.php/Type-class instance", "headline_links": [{"type": "Concept", "name": "type_class"}], "discussion": "", "headline": "Type-specific definitions of [[type class]] members", "type": "Concept"}, "Intent": {"discussion_links": [], "name": "Intent", "url": "http://101companies.org/index.php/Intent", "headline_links": [], "discussion": "", "headline": "An abstract description of an operation to be performed", "type": "Concept"}, "Unfold": {"discussion_links": [], "name": "Unfold", "url": "http://101companies.org/index.php/Unfold", "headline_links": [{"type": "Concept", "name": "unfold_function"}, {"type": "Concept", "name": "unfold_transformation"}, {"type": "Concept", "name": "anamorphism"}], "discussion": "", "headline": "The [[unfold function]] or the [[unfold transformation]] or an [[anamorphism]]", "type": "Concept"}, "Fragment_locator": {"discussion_links": [], "name": "Fragment locator", "url": "http://101companies.org/index.php/Fragment locator", "headline_links": [], "discussion": "", "headline": "A program that locates fragments in files", "type": "Concept"}, "101feature": {"discussion_links": [], "name": "101feature", "url": "http://101companies.org/index.php/101feature", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "headline": "A feature of the [[101companies:System]]", "type": "Concept"}, "CodeADASHfirst_mapping": {"discussion_links": [{"type": "Concept", "name": "SchemaADASHfirst_mapping"}, {"type": "Page", "name": "Mapping"}], "name": "Code-first mapping", "url": "http://101companies.org/index.php/Code-first mapping", "headline_links": [{"type": "Concept", "name": "OASLASHX_mapping"}, {"type": "Concept", "name": "OASLASHR_mapping"}], "discussion": "\n\nSee [[Schema-first mapping]] for the counter-part.\n\n[[Category:Mapping]]\n", "headline": "start from an object model rather than  a schema in [[O/X mapping|O/X]] or [[O/R mapping]]", "type": "Concept"}, "Random_number": {"discussion_links": [], "name": "Random number", "url": "http://101companies.org/index.php/Random number", "headline_links": [{"type": "Concept", "name": "random_number_generator"}], "discussion": "", "headline": "a number in a sequence obtained by a [[random number generator]]", "type": "Concept"}, "Proxy_pattern": {"discussion_links": [], "name": "Proxy pattern", "url": "http://101companies.org/index.php/Proxy pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "GUI_programming": {"discussion_links": [], "name": "GUI programming", "url": "http://101companies.org/index.php/GUI programming", "headline_links": [{"type": "Concept", "name": "programming_domain"}, {"type": "Concept", "name": "GUI"}], "discussion": "", "headline": "The [[programming domain]] of [[GUI]] development", "type": "Concept"}, "Program_generation": {"discussion_links": [], "name": "Program generation", "url": "http://101companies.org/index.php/Program generation", "headline_links": [{"type": "Concept", "name": "program_generator"}], "discussion": "", "headline": "The automated generation of programs by [[program generator]]s", "type": "Concept"}, "Presentation_layer": {"discussion_links": [], "name": "Presentation layer", "url": "http://101companies.org/index.php/Presentation layer", "headline_links": [{"type": "Concept", "name": "user_interface"}, {"type": "Concept", "name": "threeADASHtier_architecture"}], "discussion": "", "headline": "the implementation of the [[user interface]] in a [[three-tier architecture]]", "type": "Concept"}, "Algebraic_data_type": {"discussion_links": [], "name": "Algebraic data type", "url": "http://101companies.org/index.php/Algebraic data type", "headline_links": [], "discussion": "", "headline": "A type for alternatives of groups of data components", "type": "Concept"}, "Testing": {"discussion_links": [], "name": "Testing", "url": "http://101companies.org/index.php/Testing", "headline_links": [], "discussion": "\n\nDepending on the scale of software testing, we may also speak of program testing, and consider it an integral part of programming, as opposed to a separation of programming (coding, implementation) versus testing.\n", "headline": "software testing or simply program testing", "type": "Concept"}, "Monad_transformer": {"discussion_links": [], "name": "Monad transformer", "url": "http://101companies.org/index.php/Monad transformer", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "a programming idiom for transforming [[monad]]s", "type": "Concept"}, "Query_language": {"discussion_links": [], "name": "Query language", "url": "http://101companies.org/index.php/Query language", "headline_links": [], "discussion": "", "headline": "A software language for executable queries", "type": "Concept"}, "Test_case": {"discussion_links": [], "name": "Test case", "url": "http://101companies.org/index.php/Test case", "headline_links": [{"type": "Concept", "name": "testing"}], "discussion": "", "headline": "executable test data and expected result in [[testing]]", "type": "Concept"}, "Composite_pattern": {"discussion_links": [], "name": "Composite pattern", "url": "http://101companies.org/index.php/Composite pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "DTO": {"discussion_links": [{"type": "Technology", "name": "Java_EE"}, {"type": "Language", "name": "CSharp"}, {"type": "Page", "name": "Design_pattern"}], "name": "DTO", "url": "http://101companies.org/index.php/DTO", "headline_links": [{"type": "Page", "name": "Design_pattern"}], "discussion": "\n\nThe data transfer object (DTO) pattern helps to encapsulate data within simple and serializable objects. It is often used in combination with [[Technology:Java EE]], but also with [[Language:CSharp]] technologies<cite>JEE2012DTO, MSDN2012DTO</cite>.\n\n[[Category:Design pattern]]\n\n", "headline": "A [[:Category:Design pattern]] for encapsulating data in distributed applications", "type": "Concept"}, "Recursion": {"discussion_links": [], "name": "Recursion", "url": "http://101companies.org/index.php/Recursion", "headline_links": [], "discussion": "", "headline": "The use of self-reference in defining abstractions", "type": "Concept"}, "GUI": {"discussion_links": [], "name": "GUI", "url": "http://101companies.org/index.php/GUI", "headline_links": [], "discussion": "", "headline": "A graphical user interface", "type": "Concept"}, "XML_serialization": {"discussion_links": [], "name": "XML serialization", "url": "http://101companies.org/index.php/XML serialization", "headline_links": [], "discussion": "", "headline": "serialization with XML as the serialization format", "type": "Concept"}, "Programming_idiom": {"discussion_links": [], "name": "Programming idiom", "url": "http://101companies.org/index.php/Programming idiom", "headline_links": [], "discussion": "", "headline": "a means of expressing a recurring construct in one or more programming languages", "type": "Concept"}, "State": {"discussion_links": [], "name": "State", "url": "http://101companies.org/index.php/State", "headline_links": [], "discussion": "", "headline": "The state of a program or system", "type": "Concept"}, "Database_schema": {"discussion_links": [], "name": "Database schema", "url": "http://101companies.org/index.php/Database schema", "headline_links": [{"type": "Concept", "name": "database"}], "discussion": "", "headline": "A description of a [[database]]'s structure", "type": "Concept"}, "Lazy_evaluation": {"discussion_links": [], "name": "Lazy evaluation", "url": "http://101companies.org/index.php/Lazy evaluation", "headline_links": [], "discussion": "", "headline": "delay evaluation of an expression until its value is needed", "type": "Concept"}, "Transformation": {"discussion_links": [], "name": "Transformation", "url": "http://101companies.org/index.php/Transformation", "headline_links": [], "discussion": "", "headline": "a (software) transformation in the broadest sense", "type": "Concept"}, "ModelASLASHObject_mapping": {"discussion_links": [], "name": "Model/Object mapping", "url": "http://101companies.org/index.php/Model/Object mapping", "headline_links": [{"type": "Page", "name": "capability"}, {"type": "Page", "name": "technical_space"}, {"type": "Concept", "name": "modelware"}, {"type": "Concept", "name": "objectware"}], "discussion": "", "headline": "the [[:Category:capability]] of bridging the [[:Category:technical space]]s [[modelware]] and [[objectware]]", "type": "Concept"}, "Head": {"discussion_links": [], "name": "Head", "url": "http://101companies.org/index.php/Head", "headline_links": [{"type": "Concept", "name": "list"}], "discussion": "", "headline": "The first element of a [[list]]", "type": "Concept"}, "Applicative_functor": {"discussion_links": [], "name": "Applicative functor", "url": "http://101companies.org/index.php/Applicative functor", "headline_links": [{"type": "Concept", "name": "functor"}, {"type": "Concept", "name": "monad"}], "discussion": "", "headline": "A kind of [[functor]] that models some [[monad]]-like computations", "type": "Concept"}, "Android_Resource": {"discussion_links": [], "name": "Android Resource", "url": "http://101companies.org/index.php/Android Resource", "headline_links": [{"type": "Concept", "name": "file"}, {"type": "Language", "name": "Android"}], "discussion": "", "headline": "The Resource [[file]]s of an [[Language:Android]] application", "type": "Concept"}, "Vertical_transformation": {"discussion_links": [{"type": "Page", "name": "Transformation"}], "name": "Vertical transformation", "url": "http://101companies.org/index.php/Vertical transformation", "headline_links": [], "discussion": "\n\nIn model-driven engineering, a model-to-code transformation lowers the level of abstraction.\n\nIn reverse engineering or de-compilation, a transformation raises the level of abstraction.\n\n[[Category:Transformation]]\n", "headline": "a transformation that lowers or raises the level of abstraction", "type": "Concept"}, "Object_model": {"discussion_links": [], "name": "Object model", "url": "http://101companies.org/index.php/Object model", "headline_links": [], "discussion": "", "headline": "a collection of classes in [OO programming] for modeling structure and possibly behavior in a given domain", "type": "Concept"}, "Anamorphism": {"discussion_links": [], "name": "Anamorphism", "url": "http://101companies.org/index.php/Anamorphism", "headline_links": [{"type": "Concept", "name": "function"}, {"type": "Concept", "name": "corecursion"}], "discussion": "", "headline": "A [[function]] defined by a basic scheme of [[corecursion]]", "type": "Concept"}, "Logging": {"discussion_links": [{"type": "Concept", "name": "AspectADASHoriented_programming"}], "name": "Logging", "url": "http://101companies.org/index.php/Logging", "headline_links": [{"type": "Page", "name": "Capability"}], "discussion": "\n\nLogging may be meant to help with debugging, forensics, or data governance.\n\nLogging may be achieved by designated, possibly scattered code units.\n\nA popular approach to logging is provided by [[Aspect-oriented programming]].\n ", "headline": "the [[:Category:Capability|capability]] of logging certain events along program execution", "type": "Concept"}, "Distributed_Multitier_architecture": {"discussion_links": [], "name": "Distributed Multitier architecture", "url": "http://101companies.org/index.php/Distributed Multitier architecture", "headline_links": [{"type": "Technology", "name": "Java_EE"}], "discussion": "", "headline": "The main [[Technology:Java EE]]-architecture", "type": "Concept"}, "Subtype_polymorphism": {"discussion_links": [], "name": "Subtype polymorphism", "url": "http://101companies.org/index.php/Subtype polymorphism", "headline_links": [{"type": "Concept", "name": "polymorphism"}], "discussion": "", "headline": "a form of [[polymorphism]] applying to all subtypes of a given type ", "type": "Concept"}, "Parallelism": {"discussion_links": [], "name": "Parallelism", "url": "http://101companies.org/index.php/Parallelism", "headline_links": [], "discussion": "", "headline": "the capability of executing programs in parallel", "type": "Concept"}, "Distribution": {"discussion_links": [], "name": "Distribution", "url": "http://101companies.org/index.php/Distribution", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of distributing programs over computers in a network", "type": "Concept"}, "Modelware": {"discussion_links": [], "name": "Modelware", "url": "http://101companies.org/index.php/Modelware", "headline_links": [], "discussion": "", "headline": "a technological space focused on modeling and model-driven engineering", "type": "Concept"}, "Horizontal_transformation": {"discussion_links": [{"type": "Concept", "name": "Vertical_transformation"}, {"type": "Page", "name": "Transformation"}], "name": "Horizontal transformation", "url": "http://101companies.org/index.php/Horizontal transformation", "headline_links": [], "discussion": "\n\nFor instance, an optimization in a compiler preserves the level of abstraction.\n\nAlso, a refactoring in an IDE preserves the level of abstraction.\n\n[[Vertical transformation]]s change the level of abstraction.\n\n[[Category:Transformation]]\n", "headline": "a transformation that preserves the level of abstraction", "type": "Concept"}, "XML_data_binding": {"discussion_links": [], "name": "XML data binding", "url": "http://101companies.org/index.php/XML data binding", "headline_links": [], "discussion": "", "headline": "Mapping between XML types and types of a programming language", "type": "Concept"}, "Technology": {"discussion_links": [], "name": "Technology", "url": "http://101companies.org/index.php/Technology", "headline_links": [], "discussion": "", "headline": "A software technology", "type": "Concept"}, "Type_constructor": {"discussion_links": [], "name": "Type constructor", "url": "http://101companies.org/index.php/Type constructor", "headline_links": [], "discussion": "", "headline": "a type construct for constructing new types from existing ones", "type": "Concept"}, "Writer_monad": {"discussion_links": [], "name": "Writer monad", "url": "http://101companies.org/index.php/Writer monad", "headline_links": [{"type": "Concept", "name": "monad"}, {"type": "Concept", "name": "output"}], "discussion": "", "headline": "A [[monad]] for synthesizing results or [[output]]", "type": "Concept"}, "Pattern_matching": {"discussion_links": [{"type": "Concept", "name": "text"}, {"type": "Concept", "name": "tree"}, {"type": "Concept", "name": "regular_expression"}, {"type": "Concept", "name": "functional_programming"}, {"type": "Concept", "name": "algebraic_data_type"}], "name": "Pattern matching", "url": "http://101companies.org/index.php/Pattern matching", "headline_links": [{"type": "Concept", "name": "pattern"}], "discussion": "\n\nPattern matching may be concerned with different kinds of types, e.g., [[text]] or [[tree]]s. In the case of text, [[regular expression]]s provide the foundation for patterns. In the case of tree and specifically in the context of [[functional programming]], [[algebraic data type]]s provide the foundation for patterns.\n", "headline": "The process of matching values against [[pattern]]s and bind variables", "type": "Concept"}, "Class_inheritance": {"discussion_links": [], "name": "Class inheritance", "url": "http://101companies.org/index.php/Class inheritance", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "PullADASHbased_XML_parsing": {"discussion_links": [], "name": "Pull-based XML parsing", "url": "http://101companies.org/index.php/Pull-based XML parsing", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Input": {"discussion_links": [], "name": "Input", "url": "http://101companies.org/index.php/Input", "headline_links": [], "discussion": "", "headline": "input data consumed by program execution", "type": "Concept"}, "RelationalASLASHXML_mapping": {"discussion_links": [], "name": "Relational/XML mapping", "url": "http://101companies.org/index.php/Relational/XML mapping", "headline_links": [{"type": "Concept", "name": "tableware"}, {"type": "Concept", "name": "XMLware"}], "discussion": "\n", "headline": "the capability of bridging the technical spaces [[tableware]] and [[XMLware]]", "type": "Concept"}, "Core": {"discussion_links": [], "name": "Core", "url": "http://101companies.org/index.php/Core", "headline_links": [], "discussion": "", "headline": "a core of a multi-core processor", "type": "Concept"}, "Auxiliary_XMLware": {"discussion_links": [], "name": "Auxiliary XMLware", "url": "http://101companies.org/index.php/Auxiliary XMLware", "headline_links": [{"type": "Concept", "name": "XMLware"}], "discussion": "", "headline": "a segment of [[XMLware]] serving an auxiliary role", "type": "Concept"}, "Monadic_value": {"discussion_links": [], "name": "Monadic value", "url": "http://101companies.org/index.php/Monadic value", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "a computation in the sense of [[monad]]s", "type": "Concept"}, "Declaration": {"discussion_links": [], "name": "Declaration", "url": "http://101companies.org/index.php/Declaration", "headline_links": [{"type": "Page", "name": "language_construct"}], "discussion": "", "headline": "a [[:Category:language construct]] for declaring (named) abstractions in a program", "type": "Concept"}, "Zipper": {"discussion_links": [], "name": "Zipper", "url": "http://101companies.org/index.php/Zipper", "headline_links": [{"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "A [[data structure]] for location-based manipulation of a data structure", "type": "Concept"}, "Builder_pattern": {"discussion_links": [], "name": "Builder pattern", "url": "http://101companies.org/index.php/Builder pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Fault_tolerance": {"discussion_links": [], "name": "Fault tolerance", "url": "http://101companies.org/index.php/Fault tolerance", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of a system to be fault-tolerant ", "type": "Concept"}, "Catamorphism": {"discussion_links": [], "name": "Catamorphism", "url": "http://101companies.org/index.php/Catamorphism", "headline_links": [{"type": "Concept", "name": "function"}, {"type": "Concept", "name": "recursion"}], "discussion": "", "headline": "A [[function]] defined by a basic scheme of [[recursion]]", "type": "Concept"}, "IO_Monad": {"discussion_links": [], "name": "IO Monad", "url": "http://101companies.org/index.php/IO Monad", "headline_links": [{"type": "Page", "name": "Monad"}], "discussion": "", "headline": "a [[:Category:Monad|monad]] for I/O operations", "type": "Concept"}, "Relationalware": {"discussion_links": [], "name": "Relationalware", "url": "http://101companies.org/index.php/Relationalware", "headline_links": [], "discussion": "", "headline": "a technological space focused on relational databases", "type": "Concept"}, "Local_scope": {"discussion_links": [], "name": "Local scope", "url": "http://101companies.org/index.php/Local scope", "headline_links": [], "discussion": "", "headline": "limitation of program-identifier validity to declaring scope", "type": "Concept"}, "Generic_programming": {"discussion_links": [], "name": "Generic programming", "url": "http://101companies.org/index.php/Generic programming", "headline_links": [], "discussion": "", "headline": "Programming for and with type-parametric abstractions ", "type": "Concept"}, "Open_serialization": {"discussion_links": [], "name": "Open serialization", "url": "http://101companies.org/index.php/Open serialization", "headline_links": [{"type": "Concept", "name": "serialization"}], "discussion": "", "headline": "Arguably platform-independent [[serialization]]", "type": "Concept"}, "Inductive_step": {"discussion_links": [], "name": "Inductive step", "url": "http://101companies.org/index.php/Inductive step", "headline_links": [{"type": "Concept", "name": "induction"}], "discussion": "", "headline": "a step in an [[induction]] proof", "type": "Concept"}, "Expression": {"discussion_links": [], "name": "Expression", "url": "http://101companies.org/index.php/Expression", "headline_links": [{"type": "Concept", "name": "syntactic_category"}], "discussion": "", "headline": "the [[syntactic category]] of expressions", "type": "Concept"}, "Visitor_pattern": {"discussion_links": [], "name": "Visitor pattern", "url": "http://101companies.org/index.php/Visitor pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Text": {"discussion_links": [{"type": "Concept", "name": "grammarware"}], "name": "Text", "url": "http://101companies.org/index.php/Text", "headline_links": [], "discussion": "\n\nText plays a role in various areas of computing. For instance, text is an important file format. Also, text is the typical format processed by [[grammarware]].\n", "headline": "the text type of data", "type": "Concept"}, "101wiki": {"discussion_links": [], "name": "101wiki", "url": "http://101companies.org/index.php/101wiki", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Toolkit": {"discussion_links": [], "name": "Toolkit", "url": "http://101companies.org/index.php/Toolkit", "headline_links": [], "discussion": "", "headline": "A collection of libraries, tools, plugins, or other reuseware", "type": "Concept"}, "Library": {"discussion_links": [], "name": "Library", "url": "http://101companies.org/index.php/Library", "headline_links": [], "discussion": "", "headline": "A collection of reusable abstractions for programming", "type": "Concept"}, "Impure_function": {"discussion_links": [], "name": "Impure function", "url": "http://101companies.org/index.php/Impure function", "headline_links": [], "discussion": "", "headline": "an implemented function that computes the result with side effects on data", "type": "Concept"}, "View": {"discussion_links": [], "name": "View", "url": "http://101companies.org/index.php/View", "headline_links": [], "discussion": "", "headline": "Something on the screen that the user can interact with", "type": "Concept"}, "Foreign_function_interface": {"discussion_links": [], "name": "Foreign function interface", "url": "http://101companies.org/index.php/Foreign function interface", "headline_links": [{"type": "Concept", "name": "programming_language"}], "discussion": "", "headline": "a mechanism for inter-[[programming language]] calls", "type": "Concept"}, "Containment_relationship": {"discussion_links": [], "name": "Containment relationship", "url": "http://101companies.org/index.php/Containment relationship", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "XML_programming": {"discussion_links": [], "name": "XML programming", "url": "http://101companies.org/index.php/XML programming", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Architectural_pattern": {"discussion_links": [], "name": "Architectural pattern", "url": "http://101companies.org/index.php/Architectural pattern", "headline_links": [], "discussion": "", "headline": "A standard design in the field of software architecture", "type": "Concept"}, "Induction": {"discussion_links": [], "name": "Induction", "url": "http://101companies.org/index.php/Induction", "headline_links": [{"type": "Concept", "name": "proof"}], "discussion": "\n\nIn functional programming, induction is also referred to as a reasoning principle.\n", "headline": "a method of (mathematical) [[proof]]", "type": "Concept"}, "Composition": {"discussion_links": [], "name": "Composition", "url": "http://101companies.org/index.php/Composition", "headline_links": [{"type": "Concept", "name": "software_composition"}, {"type": "Concept", "name": "function_composition"}], "discussion": "", "headline": "[[software composition]] or [[function composition]]", "type": "Concept"}, "Persistence": {"discussion_links": [], "name": "Persistence", "url": "http://101companies.org/index.php/Persistence", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of maintaining program data beyond the runtime of the program", "type": "Concept"}, "XML_processing": {"discussion_links": [], "name": "XML processing", "url": "http://101companies.org/index.php/XML processing", "headline_links": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XML"}], "discussion": "", "headline": "Programming in the [[Language:XML]] domain, i.e., on [[Language:XML]] data", "type": "Concept"}, "Infinite_data_structure": {"discussion_links": [], "name": "Infinite data structure", "url": "http://101companies.org/index.php/Infinite data structure", "headline_links": [{"type": "Concept", "name": "lazy_evaluation"}], "discussion": "", "headline": "a data structure controlled by [[lazy evaluation]]", "type": "Concept"}, "101data": {"discussion_links": [], "name": "101data", "url": "http://101companies.org/index.php/101data", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "headline": "Derived data resources for the [[101companies:Project]]", "type": "Concept"}, "Stack": {"discussion_links": [], "name": "Stack", "url": "http://101companies.org/index.php/Stack", "headline_links": [{"type": "Concept", "name": "abstract_data_type"}], "discussion": "", "headline": "A last in, first out (LIFO) [[abstract data type]]", "type": "Concept"}, "PushADASHbased_XML_parsing": {"discussion_links": [{"type": "Concept", "name": "streaming"}, {"type": "Page", "name": "XML_processing"}], "name": "Push-based XML parsing", "url": "http://101companies.org/index.php/Push-based XML parsing", "headline_links": [], "discussion": "\n\nSuch parsing provides one option of achieving [[streaming]] for XML processing. The idea is that programmer define handlers for events such as \"open element\", \"close element\", \"text node\", and a library sequentially processes actual XML and pushes events to the hander.\n\n[[Category:XML processing]]\n", "headline": "Sequential XML processing such that the input is present as an event stream to a programmer-defined handler", "type": "Concept"}, "STM": {"discussion_links": [], "name": "STM", "url": "http://101companies.org/index.php/STM", "headline_links": [{"type": "Concept", "name": "concurrent_programming"}], "discussion": "", "headline": "A control mechanism in [[concurrent programming]]", "type": "Concept"}, "Adapter": {"discussion_links": [], "name": "Adapter", "url": "http://101companies.org/index.php/Adapter", "headline_links": [{"type": "Concept", "name": "View"}], "discussion": "", "headline": "A bridge between an AdapterView and the underlying data for that [[View]].", "type": "Concept"}, "List": {"discussion_links": [], "name": "List", "url": "http://101companies.org/index.php/List", "headline_links": [], "discussion": "", "headline": "an ordered list of elements of the same type", "type": "Concept"}, "Template_engine": {"discussion_links": [], "name": "Template engine", "url": "http://101companies.org/index.php/Template engine", "headline_links": [], "discussion": "", "headline": "A program for template-based document generation", "type": "Concept"}, "Relational_algebra": {"discussion_links": [], "name": "Relational algebra", "url": "http://101companies.org/index.php/Relational algebra", "headline_links": [], "discussion": "", "headline": "An algebra dealing with sets of finitary relations ", "type": "Concept"}, "Model": {"discussion_links": [], "name": "Model", "url": "http://101companies.org/index.php/Model", "headline_links": [{"type": "Concept", "name": "modelware"}], "discussion": "", "headline": "the core entity type of interest for [[modelware]]", "type": "Concept"}, "Ontoware": {"discussion_links": [], "name": "Ontoware", "url": "http://101companies.org/index.php/Ontoware", "headline_links": [], "discussion": "", "headline": "a technological space focused on ontologies and knowledge engineering", "type": "Concept"}, "UDP": {"discussion_links": [], "name": "UDP", "url": "http://101companies.org/index.php/UDP", "headline_links": [], "discussion": "", "headline": "a protocol for network/internet-based data connections", "type": "Concept"}, "Monad": {"discussion_links": [], "name": "Monad", "url": "http://101companies.org/index.php/Monad", "headline_links": [{"type": "Concept", "name": "Functional_programming"}, {"type": "Concept", "name": "programming_idiom"}], "discussion": "", "headline": "A [[Functional programming|functional]] [[programming idiom]] for composing computations", "type": "Concept"}, "Reader_monad": {"discussion_links": [], "name": "Reader monad", "url": "http://101companies.org/index.php/Reader monad", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "a [[monad]] for environment passing", "type": "Concept"}, "Guard": {"discussion_links": [], "name": "Guard", "url": "http://101companies.org/index.php/Guard", "headline_links": [], "discussion": "", "headline": "constrain continuation of computation based on Boolean expression", "type": "Concept"}, "File": {"discussion_links": [], "name": "File", "url": "http://101companies.org/index.php/File", "headline_links": [{"type": "Concept", "name": "data"}, {"type": "Concept", "name": "file_system"}], "discussion": "", "headline": "a resource for storing [[data]] in a [[file system]]", "type": "Concept"}, "Eager_evaluation": {"discussion_links": [], "name": "Eager evaluation", "url": "http://101companies.org/index.php/Eager evaluation", "headline_links": [], "discussion": "", "headline": "evaluate an expression as soon as it gets bound to a variable", "type": "Concept"}, "Unfold_transformation": {"discussion_links": [], "name": "Unfold transformation", "url": "http://101companies.org/index.php/Unfold transformation", "headline_links": [], "discussion": "", "headline": "The replacement of a reference to an abstraction by its definition", "type": "Concept"}, "Tail_function": {"discussion_links": [], "name": "Tail function", "url": "http://101companies.org/index.php/Tail function", "headline_links": [{"type": "Concept", "name": "operation"}, {"type": "Concept", "name": "list"}, {"type": "Concept", "name": "tail"}], "discussion": "", "headline": "A basic [[operation]] on a [[list]] to return its [[tail]]", "type": "Concept"}, "Haskell_package": {"discussion_links": [], "name": "Haskell package", "url": "http://101companies.org/index.php/Haskell package", "headline_links": [{"type": "Technology", "name": "HackageDB"}, {"type": "Language", "name": "Haskell"}], "discussion": "", "headline": "A [[Technology:HackageDB]]-based distribution unit for [[Language:Haskell]] ", "type": "Concept"}, "101technology": {"discussion_links": [], "name": "101technology", "url": "http://101companies.org/index.php/101technology", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "headline": "A technology that is part of the [[101companies:Project]]", "type": "Concept"}, "Nonrelationalware": {"discussion_links": [], "name": "Nonrelationalware", "url": "http://101companies.org/index.php/Nonrelationalware", "headline_links": [], "discussion": "", "headline": "A technological space focused on non-relational databases", "type": "Concept"}, "Predicate": {"discussion_links": [], "name": "Predicate", "url": "http://101companies.org/index.php/Predicate", "headline_links": [{"type": "Concept", "name": "Boolean"}], "discussion": "", "headline": "a function returning a [[Boolean]]", "type": "Concept"}, "Program_design": {"discussion_links": [], "name": "Program design", "url": "http://101companies.org/index.php/Program design", "headline_links": [], "discussion": "", "headline": "A process of designing a program", "type": "Concept"}, "Exogenous_transformation": {"discussion_links": [{"type": "Page", "name": "Transformation"}], "name": "Exogenous transformation", "url": "http://101companies.org/index.php/Exogenous transformation", "headline_links": [], "discussion": "\n\nExamples of exogenous transformations are these:\n* a program transformation that translates one software language into another\n* a traversal over an object graph (by a visitor or otherwise) that returns objects of different classes\n* an XML transformation that replaces elements of one namespace by elements of another namespaces\n\n[[Category:Transformation]]\n", "headline": "a transformation with the type of the input and output being ''not'' the same", "type": "Concept"}, "Lambda_abstraction": {"discussion_links": [], "name": "Lambda abstraction", "url": "http://101companies.org/index.php/Lambda abstraction", "headline_links": [], "discussion": "", "headline": "an anonymous function of the lambda calculus", "type": "Concept"}, "Old_Main_Page": {"discussion_links": [], "name": "Old Main Page", "url": "http://101companies.org/index.php/Old Main Page", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "IASLASHO_system": {"discussion_links": [], "name": "I/O system", "url": "http://101companies.org/index.php/I/O system", "headline_links": [{"type": "Concept", "name": "monad"}, {"type": "Concept", "name": "IASLASHO"}, {"type": "Language", "name": "Haskell"}], "discussion": "", "headline": "The [[monad]]-based approach to [[I/O]] in [[Language:Haskell]]", "type": "Concept"}, "Polymorphism": {"discussion_links": [], "name": "Polymorphism", "url": "http://101companies.org/index.php/Polymorphism", "headline_links": [{"type": "Concept", "name": "abstraction"}], "discussion": "", "headline": "the ability of defining [[abstraction]]s to be available to several types ", "type": "Concept"}, "SYB": {"discussion_links": [], "name": "SYB", "url": "http://101companies.org/index.php/SYB", "headline_links": [{"type": "Language", "name": "Haskell"}], "discussion": "", "headline": "A generic programming style popularized by [[Language:Haskell]]", "type": "Concept"}, "Abstraction_mechanism": {"discussion_links": [], "name": "Abstraction mechanism", "url": "http://101companies.org/index.php/Abstraction mechanism", "headline_links": [], "discussion": "", "headline": "language support for abstraction in programming", "type": "Concept"}, "Complexity": {"discussion_links": [], "name": "Complexity", "url": "http://101companies.org/index.php/Complexity", "headline_links": [], "discussion": "", "headline": "time and space complexity of algorithms and data structures", "type": "Concept"}, "Arrow": {"discussion_links": [], "name": "Arrow", "url": "http://101companies.org/index.php/Arrow", "headline_links": [{"type": "Concept", "name": "Functional_programming"}, {"type": "Concept", "name": "programming_idiom"}], "discussion": "", "headline": "A [[Functional programming|functional]] [[programming idiom]] for composing computations", "type": "Concept"}, "OO_interface": {"discussion_links": [], "name": "OO interface", "url": "http://101companies.org/index.php/OO interface", "headline_links": [{"type": "Concept", "name": "abstraction_mechanism"}, {"type": "Concept", "name": "object"}], "discussion": "", "headline": "an [[abstraction mechanism]] for [[object]] interfaces", "type": "Concept"}, "Before_advice": {"discussion_links": [], "name": "Before advice", "url": "http://101companies.org/index.php/Before advice", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Calculation": {"discussion_links": [], "name": "Calculation", "url": "http://101companies.org/index.php/Calculation", "headline_links": [], "discussion": "", "headline": "A process for transforming one or more inputs into one or more results", "type": "Concept"}, "Functional_programming": {"discussion_links": [], "name": "Functional programming", "url": "http://101companies.org/index.php/Functional programming", "headline_links": [{"type": "Concept", "name": "programming_paradigm"}], "discussion": "", "headline": "A function-centric [[programming paradigm]]", "type": "Concept"}, "API": {"discussion_links": [], "name": "API", "url": "http://101companies.org/index.php/API", "headline_links": [], "discussion": "", "headline": "An interface for functionality or behaviors that are reusable by programs", "type": "Concept"}, "Test_automation": {"discussion_links": [{"type": "Technology", "name": "JUnit"}, {"type": "Page", "name": "Development_technique"}], "name": "Test automation", "url": "http://101companies.org/index.php/Test automation", "headline_links": [], "discussion": "\n\nFor instance, a [[Technology:JUnit]]-based test suite serves test automation.\n\nOne can also use command-line tools such as ''make'' and ''diff''.\n\n[[Category:Development technique]]\n", "headline": "automate the execution of tests including reporrting", "type": "Concept"}, "AspectADASHoriented_programming": {"discussion_links": [], "name": "Aspect-oriented programming", "url": "http://101companies.org/index.php/Aspect-oriented programming", "headline_links": [], "discussion": "", "headline": "an crosscutting concern-centric programming paradigm", "type": "Concept"}, "Bind_function": {"discussion_links": [], "name": "Bind function", "url": "http://101companies.org/index.php/Bind function", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "the composition operation of a [[monad]]", "type": "Concept"}, "Abstract_class": {"discussion_links": [], "name": "Abstract class", "url": "http://101companies.org/index.php/Abstract class", "headline_links": [{"type": "Page", "name": "class"}], "discussion": "", "headline": "a [[:Category:class]] that cannot be directly instantiated but subclasses may be amenable to instantiation", "type": "Concept"}, "Class": {"discussion_links": [], "name": "Class", "url": "http://101companies.org/index.php/Class", "headline_links": [{"type": "Concept", "name": "OO_class"}, {"type": "Concept", "name": "type_class"}], "discussion": "", "headline": "an [[OO class]] or a [[type class]]", "type": "Concept"}, "Primitive_data_type": {"discussion_links": [], "name": "Primitive data type", "url": "http://101companies.org/index.php/Primitive data type", "headline_links": [{"type": "Concept", "name": "data_type"}], "discussion": "", "headline": "a [[data type]] that serves as base case in data type definition ", "type": "Concept"}, "Equation": {"discussion_links": [], "name": "Equation", "url": "http://101companies.org/index.php/Equation", "headline_links": [{"type": "Concept", "name": "function"}, {"type": "Concept", "name": "functional_programming"}], "discussion": "", "headline": "a unit of defining a [[function]] in [[functional programming]]", "type": "Concept"}, "101implementation": {"discussion_links": [], "name": "101implementation", "url": "http://101companies.org/index.php/101implementation", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "headline": "An implementation of the [[101companies:System]]", "type": "Concept"}, "Validator": {"discussion_links": [], "name": "Validator", "url": "http://101companies.org/index.php/Validator", "headline_links": [], "discussion": "", "headline": "A program that checks the validity of software artifacts", "type": "Concept"}, "Constructor": {"discussion_links": [], "name": "Constructor", "url": "http://101companies.org/index.php/Constructor", "headline_links": [{"type": "Concept", "name": "instance_constructor"}, {"type": "Concept", "name": "data_constructor"}, {"type": "Concept", "name": "type_constructor"}], "discussion": "", "headline": "an [[instance constructor]] or a [[data constructor]] or a [[type constructor]]", "type": "Concept"}, "Test_data_generation": {"discussion_links": [], "name": "Test data generation", "url": "http://101companies.org/index.php/Test data generation", "headline_links": [], "discussion": "", "headline": "the automated generation of test data for a given software component ", "type": "Concept"}, "Data_type": {"discussion_links": [], "name": "Data type", "url": "http://101companies.org/index.php/Data type", "headline_links": [{"type": "Concept", "name": "operation"}], "discussion": "", "headline": "a (representation) type of data and [[operation]]s upon them", "type": "Concept"}, "Parsing": {"discussion_links": [], "name": "Parsing", "url": "http://101companies.org/index.php/Parsing", "headline_links": [], "discussion": "", "headline": "The process of analyzing text to determine its grammatical structure", "type": "Concept"}, "Fold": {"discussion_links": [], "name": "Fold", "url": "http://101companies.org/index.php/Fold", "headline_links": [{"type": "Concept", "name": "Fold_function"}, {"type": "Concept", "name": "fold_transformation"}, {"type": "Concept", "name": "catamorphism"}], "discussion": "", "headline": "[[Fold function]] or [[fold transformation]] or [[catamorphism]]", "type": "Concept"}, "Association_list": {"discussion_links": [], "name": "Association list", "url": "http://101companies.org/index.php/Association list", "headline_links": [], "discussion": "", "headline": "a list of key-value pairs", "type": "Concept"}, "Partial_application": {"discussion_links": [{"type": "Language", "name": "Haskell"}], "name": "Partial application", "url": "http://101companies.org/index.php/Partial application", "headline_links": [], "discussion": "\n\nIn languages with type-level functions such as parametrized type synonyms or data types, e.g., [[Language:Haskell]], partial application makes sense at the type level as well.\n", "headline": "apply a function to some but not all arguments", "type": "Concept"}, "Activity": {"discussion_links": [], "name": "Activity", "url": "http://101companies.org/index.php/Activity", "headline_links": [{"type": "Language", "name": "Android"}], "discussion": "", "headline": "The visible part of the [[Language:Android]] application", "type": "Concept"}, "Programming_domain": {"discussion_links": [], "name": "Programming domain", "url": "http://101companies.org/index.php/Programming domain", "headline_links": [], "discussion": "", "headline": "A domain central to programming", "type": "Concept"}, "After_advice": {"discussion_links": [], "name": "After advice", "url": "http://101companies.org/index.php/After advice", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Factorial": {"discussion_links": [], "name": "Factorial", "url": "http://101companies.org/index.php/Factorial", "headline_links": [{"type": "Concept", "name": "integer"}], "discussion": "", "headline": "the function that maps a non-negative [[integer]] ''n'' to 1*...*''n''", "type": "Concept"}, "List_comprehension": {"discussion_links": [], "name": "List comprehension", "url": "http://101companies.org/index.php/List comprehension", "headline_links": [], "discussion": "", "headline": "a language construct for list processing", "type": "Concept"}, "Reference_relationship": {"discussion_links": [], "name": "Reference relationship", "url": "http://101companies.org/index.php/Reference relationship", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Exception": {"discussion_links": [], "name": "Exception", "url": "http://101companies.org/index.php/Exception", "headline_links": [], "discussion": "", "headline": "an exceptional situation occurring during computation", "type": "Concept"}, "CLI": {"discussion_links": [], "name": "CLI", "url": "http://101companies.org/index.php/CLI", "headline_links": [], "discussion": "", "headline": "a command line interface", "type": "Concept"}, "Language": {"discussion_links": [], "name": "Language", "url": "http://101companies.org/index.php/Language", "headline_links": [], "discussion": "", "headline": "A software language", "type": "Concept"}, "Database": {"discussion_links": [], "name": "Database", "url": "http://101companies.org/index.php/Database", "headline_links": [], "discussion": "", "headline": "An organized collection of data in digital form", "type": "Concept"}, "Minification": {"discussion_links": [], "name": "Minification", "url": "http://101companies.org/index.php/Minification", "headline_links": [], "discussion": "", "headline": "The process of minimizing source code in a semantics-preserving manner ", "type": "Concept"}, "Client": {"discussion_links": [], "name": "Client", "url": "http://101companies.org/index.php/Client", "headline_links": [{"type": "Concept", "name": "server"}], "discussion": "", "headline": "a component to gain access to a service provided by a [[server]]", "type": "Concept"}, "Human_resources": {"discussion_links": [], "name": "Human resources", "url": "http://101companies.org/index.php/Human resources", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "ECommerce": {"discussion_links": [], "name": "ECommerce", "url": "http://101companies.org/index.php/ECommerce", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Fold_transformation": {"discussion_links": [], "name": "Fold transformation", "url": "http://101companies.org/index.php/Fold transformation", "headline_links": [], "discussion": "", "headline": "The replacement of the occurrence of an abstraction's definition by a reference", "type": "Concept"}, "Set": {"discussion_links": [], "name": "Set", "url": "http://101companies.org/index.php/Set", "headline_links": [], "discussion": "", "headline": "A container type without order and duplicates", "type": "Concept"}, "Task_parallelism": {"discussion_links": [], "name": "Task parallelism", "url": "http://101companies.org/index.php/Task parallelism", "headline_links": [], "discussion": "", "headline": "The capability of task parallelism", "type": "Concept"}, "Health_care": {"discussion_links": [], "name": "Health care", "url": "http://101companies.org/index.php/Health care", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Fragment_location": {"discussion_links": [], "name": "Fragment location", "url": "http://101companies.org/index.php/Fragment location", "headline_links": [], "discussion": "", "headline": "The programmatic location of fragments in files", "type": "Concept"}, "LocationListener": {"discussion_links": [], "name": "LocationListener", "url": "http://101companies.org/index.php/LocationListener", "headline_links": [{"type": "Concept", "name": "LocationManager"}], "discussion": "", "headline": "Used for receiving notifications from the [[LocationManager]] when the location has changed", "type": "Concept"}, "Setter": {"discussion_links": [{"type": "Page", "name": "Instance_method"}], "name": "Setter", "url": "http://101companies.org/index.php/Setter", "headline_links": [], "discussion": "\n\nSee the discussion of ]]getter]]s.\n\n[[Category:Instance method]]\n", "headline": "write the state (a specific attribute) of an object", "type": "Concept"}, "Web_server": {"discussion_links": [], "name": "Web server", "url": "http://101companies.org/index.php/Web server", "headline_links": [], "discussion": "", "headline": "a server that hosts web pages and delivers them to clients", "type": "Concept"}, "Overlay": {"discussion_links": [], "name": "Overlay", "url": "http://101companies.org/index.php/Overlay", "headline_links": [], "discussion": "", "headline": "An overlay which may be displayed on top of a map", "type": "Concept"}, "Combinator": {"discussion_links": [], "name": "Combinator", "url": "http://101companies.org/index.php/Combinator", "headline_links": [{"type": "Concept", "name": "function"}], "discussion": "", "headline": "a [[function]] serving some style of composition", "type": "Concept"}, "Fmap_function": {"discussion_links": [], "name": "Fmap function", "url": "http://101companies.org/index.php/Fmap function", "headline_links": [{"type": "Concept", "name": "functor"}], "discussion": "", "headline": "the principle operation of a [[functor]]", "type": "Concept"}, "Generic_objectware": {"discussion_links": [], "name": "Generic objectware", "url": "http://101companies.org/index.php/Generic objectware", "headline_links": [{"type": "Concept", "name": "objectware"}], "discussion": "", "headline": "a segment of [[objectware]] serving needs of generic representation", "type": "Concept"}, "Performance": {"discussion_links": [], "name": "Performance", "url": "http://101companies.org/index.php/Performance", "headline_links": [], "discussion": "", "headline": "the efficiency of a program", "type": "Concept"}, "Front_Controller": {"discussion_links": [], "name": "Front Controller", "url": "http://101companies.org/index.php/Front Controller", "headline_links": [{"type": "Concept", "name": "Model_View_Controller"}], "discussion": "", "headline": "Bundle all [[Model View Controller|controller]] functions in one controller", "type": "Concept"}, "Component": {"discussion_links": [], "name": "Component", "url": "http://101companies.org/index.php/Component", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Evaluation_strategy": {"discussion_links": [], "name": "Evaluation strategy", "url": "http://101companies.org/index.php/Evaluation strategy", "headline_links": [], "discussion": "", "headline": "the rules for evaluating expressions in a programming language", "type": "Concept"}, "Type_class": {"discussion_links": [], "name": "Type class", "url": "http://101companies.org/index.php/Type class", "headline_links": [{"type": "Concept", "name": "abstraction_mechanism"}, {"type": "Concept", "name": "polymorphic_function"}], "discussion": "", "headline": "An [[abstraction mechanism]] for families of [[polymorphic function]]s", "type": "Concept"}, "Filter_function": {"discussion_links": [], "name": "Filter function", "url": "http://101companies.org/index.php/Filter function", "headline_links": [{"type": "Concept", "name": "higherADASHorder_function"}, {"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "a [[higher-order function]] for processing a [[data structure]]", "type": "Concept"}, "Package": {"discussion_links": [], "name": "Package", "url": "http://101companies.org/index.php/Package", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Base_case": {"discussion_links": [], "name": "Base case", "url": "http://101companies.org/index.php/Base case", "headline_links": [{"type": "Concept", "name": "induction"}], "discussion": "", "headline": "a step in an [[induction]] proof", "type": "Concept"}, "DataADASHaccess_layer": {"discussion_links": [], "name": "Data-access layer", "url": "http://101companies.org/index.php/Data-access layer", "headline_links": [{"type": "Concept", "name": "threeADASHtier_architecture"}], "discussion": "", "headline": "the implementation of data access in a [[three-tier architecture]]", "type": "Concept"}, "Lexical_analysis": {"discussion_links": [], "name": "Lexical analysis", "url": "http://101companies.org/index.php/Lexical analysis", "headline_links": [], "discussion": "", "headline": "The process of converting a sequence of characters into a sequence of tokens", "type": "Concept"}, "Float": {"discussion_links": [{"type": "Page", "name": "Primitive_data_type"}], "name": "Float", "url": "http://101companies.org/index.php/Float", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "\n\nThe concept of floating-point numbers may correspond to different language-specific data types.\n\n[[Category:Primitive data type]]\n", "headline": "the [[primitive data type]] of floating-point numbers", "type": "Concept"}, "Module": {"discussion_links": [], "name": "Module", "url": "http://101companies.org/index.php/Module", "headline_links": [], "discussion": "", "headline": "a unit of composition and separation of concerns", "type": "Concept"}, "Boolean": {"discussion_links": [], "name": "Boolean", "url": "http://101companies.org/index.php/Boolean", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "", "headline": "the [[primitive data type]] of Booleans", "type": "Concept"}, "Export": {"discussion_links": [], "name": "Export", "url": "http://101companies.org/index.php/Export", "headline_links": [], "discussion": "", "headline": "the description of local entities to be made available externally", "type": "Concept"}, "Array": {"discussion_links": [], "name": "Array", "url": "http://101companies.org/index.php/Array", "headline_links": [], "discussion": "", "headline": "a sequence of values of the same type", "type": "Concept"}, "TextADASHtoADASHobject_mapping": {"discussion_links": [], "name": "Text-to-object mapping", "url": "http://101companies.org/index.php/Text-to-object mapping", "headline_links": [{"type": "Page", "name": "capability"}, {"type": "Concept", "name": "grammarware"}, {"type": "Concept", "name": "objectware"}], "discussion": "", "headline": "the [[:Category:capability]] of mapping [[grammarware]] to [[objectware]]", "type": "Concept"}, "Operator_precedence": {"discussion_links": [], "name": "Operator precedence", "url": "http://101companies.org/index.php/Operator precedence", "headline_links": [{"type": "Concept", "name": "operator"}], "discussion": "", "headline": "priority of [[operator]]s without explicit parentheses", "type": "Concept"}, "Character": {"discussion_links": [], "name": "Character", "url": "http://101companies.org/index.php/Character", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "", "headline": "the [[primitive data type]] of characters", "type": "Concept"}, "User_interface": {"discussion_links": [], "name": "User interface", "url": "http://101companies.org/index.php/User interface", "headline_links": [], "discussion": "", "headline": "the part of a software system that serves for human-computer interaction", "type": "Concept"}, "Android_project": {"discussion_links": [], "name": "Android project", "url": "http://101companies.org/index.php/Android project", "headline_links": [{"type": "Technology", "name": "ADT"}, {"type": "Language", "name": "Android"}], "discussion": "", "headline": "A generated project with [[Technology:ADT]] for [[Language:Android]] applications", "type": "Concept"}, "Generic_mapping": {"discussion_links": [], "name": "Generic mapping", "url": "http://101companies.org/index.php/Generic mapping", "headline_links": [], "discussion": "", "headline": "A mapping that is generically defined for the given technological spaces", "type": "Concept"}, "Nested_data_parallelism": {"discussion_links": [], "name": "Nested data parallelism", "url": "http://101companies.org/index.php/Nested data parallelism", "headline_links": [{"type": "Concept", "name": "data_parallelism"}], "discussion": "", "headline": "A form of [[data parallelism]] dealing with highly irregular structures", "type": "Concept"}, "Bit": {"discussion_links": [], "name": "Bit", "url": "http://101companies.org/index.php/Bit", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "", "headline": "the [[primitive data type]] of bits {0,1}", "type": "Concept"}, "Web_browser": {"discussion_links": [], "name": "Web browser", "url": "http://101companies.org/index.php/Web browser", "headline_links": [], "discussion": "", "headline": "A software application for retrieving and presenting Web resources", "type": "Concept"}, "Regular_expression": {"discussion_links": [], "name": "Regular expression", "url": "http://101companies.org/index.php/Regular expression", "headline_links": [], "discussion": "", "headline": "a means to match strings of text", "type": "Concept"}, "101companiesADOTBOTS": {"discussion_links": [], "name": "101companies.BOTS", "url": "http://101companies.org/index.php/101companies.BOTS", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Generic_function": {"discussion_links": [], "name": "Generic function", "url": "http://101companies.org/index.php/Generic function", "headline_links": [{"type": "Concept", "name": "polymorphic_function"}], "discussion": "", "headline": "A [[polymorphic function]] that observes structure", "type": "Concept"}, "Accumulator": {"discussion_links": [], "name": "Accumulator", "url": "http://101companies.org/index.php/Accumulator", "headline_links": [{"type": "Concept", "name": "programming_idiom"}, {"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "a [[programming idiom]] for computing a result along traversal of a [[data structure]] ", "type": "Concept"}, "Code": {"discussion_links": [], "name": "Code", "url": "http://101companies.org/index.php/Code", "headline_links": [{"type": "Concept", "name": "programming"}], "discussion": "", "headline": "the (source) code developed along [[programming]]", "type": "Concept"}, "Serialization": {"discussion_links": [], "name": "Serialization", "url": "http://101companies.org/index.php/Serialization", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "all [[:Category:capability|capabilities]] of storing or transmitting program data", "type": "Concept"}, "Programming_language": {"discussion_links": [], "name": "Programming language", "url": "http://101companies.org/index.php/Programming language", "headline_links": [{"type": "Page", "name": "language"}, {"type": "Concept", "name": "programming"}], "discussion": "", "headline": "a software [[:Category:language]] for [[programming]]", "type": "Concept"}, "101contribution": {"discussion_links": [], "name": "101contribution", "url": "http://101companies.org/index.php/101contribution", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "headline": "A contribution to the [[101companies:Project]]", "type": "Concept"}, "Type_checking": {"discussion_links": [], "name": "Type checking", "url": "http://101companies.org/index.php/Type checking", "headline_links": [{"type": "Concept", "name": "type_system"}], "discussion": "", "headline": "verification of values or code in terms of a [[type system]]", "type": "Concept"}, "HigherADASHorder_function": {"discussion_links": [], "name": "Higher-order function", "url": "http://101companies.org/index.php/Higher-order function", "headline_links": [{"type": "Concept", "name": "function"}], "discussion": "", "headline": "a [[function]] that takes as an argument or returns a function", "type": "Concept"}, "Taxonomy": {"discussion_links": [], "name": "Taxonomy", "url": "http://101companies.org/index.php/Taxonomy", "headline_links": [], "discussion": "", "headline": "arrangement of individuals in a classification structure", "type": "Concept"}, "Conditional": {"discussion_links": [], "name": "Conditional", "url": "http://101companies.org/index.php/Conditional", "headline_links": [], "discussion": "", "headline": "select computations based on a Boolean condition", "type": "Concept"}, "Tail": {"discussion_links": [], "name": "Tail", "url": "http://101companies.org/index.php/Tail", "headline_links": [], "discussion": "", "headline": "All elements of a list except the first", "type": "Concept"}, "Equality": {"discussion_links": [], "name": "Equality", "url": "http://101companies.org/index.php/Equality", "headline_links": [], "discussion": "", "headline": "a relational operator on data", "type": "Concept"}, "101repo": {"discussion_links": [], "name": "101repo", "url": "http://101companies.org/index.php/101repo", "headline_links": [], "discussion": "", "headline": "The primary repository of the 101companies project", "type": "Concept"}, "MVar": {"discussion_links": [], "name": "MVar", "url": "http://101companies.org/index.php/MVar", "headline_links": [{"type": "Concept", "name": "thread"}, {"type": "Language", "name": "Haskell"}], "discussion": "", "headline": "A [[thread]] synchronization variable in [[Language:Haskell]]", "type": "Concept"}, "Tool": {"discussion_links": [], "name": "Tool", "url": "http://101companies.org/index.php/Tool", "headline_links": [], "discussion": "", "headline": "a tool for software development", "type": "Concept"}, "Indexing": {"discussion_links": [], "name": "Indexing", "url": "http://101companies.org/index.php/Indexing", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of accessing keyed and ordered records", "type": "Concept"}, "TCP": {"discussion_links": [], "name": "TCP", "url": "http://101companies.org/index.php/TCP", "headline_links": [], "discussion": "", "headline": "a protocol for network/internet-based data connections", "type": "Concept"}, "Type_definition": {"discussion_links": [], "name": "Type definition", "url": "http://101companies.org/index.php/Type definition", "headline_links": [{"type": "Concept", "name": "concrete_data_type"}], "discussion": "", "headline": "the definition of a [[concrete data type]]", "type": "Concept"}, "Listener": {"discussion_links": [], "name": "Listener", "url": "http://101companies.org/index.php/Listener", "headline_links": [], "discussion": "", "headline": "An interface in the View class that contains a single callback method", "type": "Concept"}, "Marker_interface_pattern": {"discussion_links": [], "name": "Marker interface pattern", "url": "http://101companies.org/index.php/Marker interface pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Software_design": {"discussion_links": [], "name": "Software design", "url": "http://101companies.org/index.php/Software design", "headline_links": [], "discussion": "", "headline": "A process of problem solving and planning for a software solution", "type": "Concept"}, "Concrete_data_type": {"discussion_links": [], "name": "Concrete data type", "url": "http://101companies.org/index.php/Concrete data type", "headline_links": [{"type": "Concept", "name": "data_type"}, {"type": "Concept", "name": "property"}], "discussion": "", "headline": "a [[data type]] defined through implementation instead of [[property|properties]]", "type": "Concept"}, "Tree": {"discussion_links": [], "name": "Tree", "url": "http://101companies.org/index.php/Tree", "headline_links": [], "discussion": "", "headline": "a hierarchical tree structure", "type": "Concept"}, "Programming": {"discussion_links": [], "name": "Programming", "url": "http://101companies.org/index.php/Programming", "headline_links": [], "discussion": "", "headline": "the activity of writing programs and surrounding activities", "type": "Concept"}, "Server": {"discussion_links": [], "name": "Server", "url": "http://101companies.org/index.php/Server", "headline_links": [{"type": "Concept", "name": "client"}], "discussion": "", "headline": "A program that serves requests of [[client]]s", "type": "Concept"}, "Queue": {"discussion_links": [], "name": "Queue", "url": "http://101companies.org/index.php/Queue", "headline_links": [{"type": "Concept", "name": "abstract_data_type"}], "discussion": "", "headline": "A first in, first out (FIFO) [[abstract data type]]", "type": "Concept"}, "Directory": {"discussion_links": [], "name": "Directory", "url": "http://101companies.org/index.php/Directory", "headline_links": [{"type": "Concept", "name": "file"}, {"type": "Concept", "name": "file_system"}], "discussion": "", "headline": "a container for [[file]]s and directories in a [[file system]]", "type": "Concept"}, "Infinite_list": {"discussion_links": [], "name": "Infinite list", "url": "http://101companies.org/index.php/Infinite list", "headline_links": [{"type": "Concept", "name": "lazy_evaluation"}], "discussion": "", "headline": "a list of unbounded length in need of [[lazy evaluation]]", "type": "Concept"}, "Data_constructor": {"discussion_links": [], "name": "Data constructor", "url": "http://101companies.org/index.php/Data constructor", "headline_links": [{"type": "Concept", "name": "algebraic_data_type"}], "discussion": "", "headline": "an alternative of an [[algebraic data type]] ", "type": "Concept"}, "Access_control": {"discussion_links": [], "name": "Access control", "url": "http://101companies.org/index.php/Access control", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of controlling access to data and resources within programs", "type": "Concept"}, "Design": {"discussion_links": [], "name": "Design", "url": "http://101companies.org/index.php/Design", "headline_links": [{"type": "Concept", "name": "Program_design"}, {"type": "Concept", "name": "software_design"}, {"type": "Concept", "name": "data_structure_design"}, {"type": "Concept", "name": "algorithm_design"}], "discussion": "", "headline": "[[Program design]] or [[software design]] or [[data structure design]] or [[algorithm design]]", "type": "Concept"}, "Query": {"discussion_links": [], "name": "Query", "url": "http://101companies.org/index.php/Query", "headline_links": [{"type": "Concept", "name": "query_language"}], "discussion": "", "headline": "a data processing function described in a [[query language]]", "type": "Concept"}, "Layout": {"discussion_links": [], "name": "Layout", "url": "http://101companies.org/index.php/Layout", "headline_links": [], "discussion": "", "headline": "The architecture for the user interface in an Activity", "type": "Concept"}, "Map_function": {"discussion_links": [], "name": "Map function", "url": "http://101companies.org/index.php/Map function", "headline_links": [{"type": "Concept", "name": "higherADASHorder_function"}, {"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "a [[higher-order function]] for processing a [[data structure]]", "type": "Concept"}, "Database_programming": {"discussion_links": [], "name": "Database programming", "url": "http://101companies.org/index.php/Database programming", "headline_links": [{"type": "Concept", "name": "database"}], "discussion": "", "headline": "The programming domain of accessing [[database]]s", "type": "Concept"}, "Algorithm_design": {"discussion_links": [], "name": "Algorithm design", "url": "http://101companies.org/index.php/Algorithm design", "headline_links": [{"type": "Concept", "name": "algorithm"}], "discussion": "", "headline": "A process of designing an [[algorithm]]", "type": "Concept"}, "Maybe_type": {"discussion_links": [], "name": "Maybe type", "url": "http://101companies.org/index.php/Maybe type", "headline_links": [{"type": "Concept", "name": "polymorphic_type"}], "discussion": "", "headline": "A [[polymorphic type]] for partiality or error handling", "type": "Concept"}, "Maybe_monad": {"discussion_links": [], "name": "Maybe monad", "url": "http://101companies.org/index.php/Maybe monad", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "a [[monad]] for dealing with partiality or error handling", "type": "Concept"}, "SchemaADASHbased_validation": {"discussion_links": [], "name": "Schema-based validation", "url": "http://101companies.org/index.php/Schema-based validation", "headline_links": [], "discussion": "", "headline": "The process of validating data according to a schema", "type": "Concept"}, "Method": {"discussion_links": [], "name": "Method", "url": "http://101companies.org/index.php/Method", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Style_sheet_language": {"discussion_links": [], "name": "Style sheet language", "url": "http://101companies.org/index.php/Style sheet language", "headline_links": [], "discussion": "", "headline": "A software language for presenting structured documents", "type": "Concept"}, "Observer_pattern": {"discussion_links": [], "name": "Observer pattern", "url": "http://101companies.org/index.php/Observer pattern", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Technology_profile": {"discussion_links": [], "name": "Technology profile", "url": "http://101companies.org/index.php/Technology profile", "headline_links": [], "discussion": "", "headline": "a way of using technologies", "type": "Concept"}, "Grammarware": {"discussion_links": [], "name": "Grammarware", "url": "http://101companies.org/index.php/Grammarware", "headline_links": [], "discussion": "", "headline": "a technological space focused on (textual) language processing", "type": "Concept"}, "Concurrent_Haskell": {"discussion_links": [], "name": "Concurrent Haskell", "url": "http://101companies.org/index.php/Concurrent Haskell", "headline_links": [{"type": "Language", "name": "Haskell_98"}], "discussion": "", "headline": "An extension of [[Language:Haskell 98]] with explicit concurrency", "type": "Concept"}, "Ajax": {"discussion_links": [], "name": "Ajax", "url": "http://101companies.org/index.php/Ajax", "headline_links": [{"type": "Concept", "name": "asynchronous_communication"}], "discussion": "", "headline": "Concept for [[asynchronous communication|asynchronous]] requests in web applications", "type": "Concept"}, "Zipper_monad": {"discussion_links": [{"type": "Page", "name": "Monad"}], "name": "Zipper monad", "url": "http://101companies.org/index.php/Zipper monad", "headline_links": [{"type": "Page", "name": "Monad"}, {"type": "Concept", "name": "Zipper"}, {"type": "Language", "name": "Haskell"}], "discussion": "\n\nIn Haskell zippers for binary trees are implemented by means of a monad <cite>haskellWikiZipper</cite>.\n\n[[Category:Monad]]\n\n", "headline": "a [[:Category:Monad|monadic]] implementation of the [[Zipper|zipper]] concept [[Language:Haskell|Haskell]]", "type": "Concept"}, "Data_structure_design": {"discussion_links": [], "name": "Data structure design", "url": "http://101companies.org/index.php/Data structure design", "headline_links": [{"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "A process of designing a [[data structure]]", "type": "Concept"}, "Object_composition": {"discussion_links": [], "name": "Object composition", "url": "http://101companies.org/index.php/Object composition", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "ADO_ADOTNET": {"discussion_links": [], "name": "ADO .NET", "url": "http://101companies.org/index.php/ADO .NET", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Dialog": {"discussion_links": [], "name": "Dialog", "url": "http://101companies.org/index.php/Dialog", "headline_links": [{"type": "Concept", "name": "Activity"}], "discussion": "", "headline": "A small window that appears in front of the current [[Activity]]", "type": "Concept"}, "Action": {"discussion_links": [], "name": "Action", "url": "http://101companies.org/index.php/Action", "headline_links": [{"type": "Concept", "name": "monad"}], "discussion": "", "headline": "A [[monad]]-based computation", "type": "Concept"}, "Process": {"discussion_links": [], "name": "Process", "url": "http://101companies.org/index.php/Process", "headline_links": [], "discussion": "", "headline": "an executing instance of a program ", "type": "Concept"}, "Program_generator": {"discussion_links": [], "name": "Program generator", "url": "http://101companies.org/index.php/Program generator", "headline_links": [], "discussion": "", "headline": "A program that generates programs", "type": "Concept"}, "ServiceADASHoriented_architecture": {"discussion_links": [], "name": "Service-oriented architecture", "url": "http://101companies.org/index.php/Service-oriented architecture", "headline_links": [{"type": "Concept", "name": "Component"}], "discussion": "", "headline": "A set of principles for creating interoperable software with reusable [[Component|components]]", "type": "Concept"}, "Fileware": {"discussion_links": [], "name": "Fileware", "url": "http://101companies.org/index.php/Fileware", "headline_links": [], "discussion": "", "headline": "a technological space focused on sequential and indexed files", "type": "Concept"}, "Pure_function": {"discussion_links": [], "name": "Pure function", "url": "http://101companies.org/index.php/Pure function", "headline_links": [], "discussion": "", "headline": "A function whose result only depends on the arguments", "type": "Concept"}, "LocationManager": {"discussion_links": [], "name": "LocationManager", "url": "http://101companies.org/index.php/LocationManager", "headline_links": [], "discussion": "", "headline": "Provides access to the system location services", "type": "Concept"}, "Reverse_function": {"discussion_links": [], "name": "Reverse function", "url": "http://101companies.org/index.php/Reverse function", "headline_links": [{"type": "Concept", "name": "function"}, {"type": "Concept", "name": "list"}], "discussion": "", "headline": "a [[function]] for reversing a [[list]]", "type": "Concept"}, "Type_signature": {"discussion_links": [], "name": "Type signature", "url": "http://101companies.org/index.php/Type signature", "headline_links": [], "discussion": "", "headline": "the definition of argument and result types for a function, a method, or a procedure", "type": "Concept"}, "Menu": {"discussion_links": [], "name": "Menu", "url": "http://101companies.org/index.php/Menu", "headline_links": [], "discussion": "", "headline": "An options menu of actions or options", "type": "Concept"}, "PONO": {"discussion_links": [], "name": "PONO", "url": "http://101companies.org/index.php/PONO", "headline_links": [], "discussion": "", "headline": "Plain Old .NET Objects", "type": "Concept"}, "Abstraction": {"discussion_links": [], "name": "Abstraction", "url": "http://101companies.org/index.php/Abstraction", "headline_links": [{"type": "Concept", "name": "abstraction_mechanism"}], "discussion": "", "headline": "the use of [[abstraction mechanism]]s to define new concepts", "type": "Concept"}, "IASLASHO": {"discussion_links": [], "name": "I/O", "url": "http://101companies.org/index.php/I/O", "headline_links": [], "discussion": "", "headline": "the communication between computer and the outside world", "type": "Concept"}, "TypeADASHbased_mapping": {"discussion_links": [], "name": "Type-based mapping", "url": "http://101companies.org/index.php/Type-based mapping", "headline_links": [], "discussion": "", "headline": "A mapping that refers to types (schemas, grammars)", "type": "Concept"}, "Lambdaware": {"discussion_links": [], "name": "Lambdaware", "url": "http://101companies.org/index.php/Lambdaware", "headline_links": [{"type": "Concept", "name": "functional_programming"}], "discussion": "", "headline": "a technological space focused on functions and [[functional programming]]", "type": "Concept"}, "Parametric_polymorphism": {"discussion_links": [], "name": "Parametric polymorphism", "url": "http://101companies.org/index.php/Parametric polymorphism", "headline_links": [{"type": "Concept", "name": "polymorphism"}], "discussion": "", "headline": "a form of [[polymorphism]] applying to all types of a certain kind", "type": "Concept"}, "ObjectASLASHRelational_mapping": {"discussion_links": [], "name": "Object/Relational mapping", "url": "http://101companies.org/index.php/Object/Relational mapping", "headline_links": [{"type": "Page", "name": "capability"}, {"type": "Page", "name": "technical_space"}, {"type": "Concept", "name": "objectware"}, {"type": "Concept", "name": "tableware"}], "discussion": "", "headline": "the [[:Category:capability]] of bridging the [[:Category:technical space]]s [[objectware]] and [[tableware]]", "type": "Concept"}, "Table": {"discussion_links": [], "name": "Table", "url": "http://101companies.org/index.php/Table", "headline_links": [], "discussion": "", "headline": "data elements organized in vertical columns and horizontal rows", "type": "Concept"}, "File_system": {"discussion_links": [], "name": "File system", "url": "http://101companies.org/index.php/File system", "headline_links": [], "discussion": "", "headline": "a means to store, retrieve, update, and organize data", "type": "Concept"}, "Function_application": {"discussion_links": [], "name": "Function application", "url": "http://101companies.org/index.php/Function application", "headline_links": [], "discussion": "", "headline": "apply a function to an argument", "type": "Concept"}, "MultiADASHtier_architecture": {"discussion_links": [{"type": "Concept", "name": "Model_View_Controller"}, {"type": "Concept", "name": "multiADASHtier_architecture"}], "name": "Multi-tier architecture", "url": "http://101companies.org/index.php/Multi-tier architecture", "headline_links": [], "discussion": "\n\nWhen compared to [[Model View Controller]], [[multi-tier architecture]]s use a connection between only the adjacent layers.\n", "headline": "An architecture organized in layers", "type": "Concept"}, "Concurrent_programming": {"discussion_links": [], "name": "Concurrent programming", "url": "http://101companies.org/index.php/Concurrent programming", "headline_links": [{"type": "Concept", "name": "process"}], "discussion": "", "headline": "Programming with collections of interacting [[process]]es", "type": "Concept"}, "Concrete_class": {"discussion_links": [], "name": "Concrete class", "url": "http://101companies.org/index.php/Concrete class", "headline_links": [{"type": "Page", "name": "class"}, {"type": "Concept", "name": "abstract_class"}], "discussion": "", "headline": "a [[:Category:class]] that can be directly instantiated as opposed to an [[abstract class]]", "type": "Concept"}, "MapView": {"discussion_links": [], "name": "MapView", "url": "http://101companies.org/index.php/MapView", "headline_links": [{"type": "Concept", "name": "View"}], "discussion": "", "headline": "A [[View]] which displays a map", "type": "Concept"}, "Type_system": {"discussion_links": [], "name": "Type system", "url": "http://101companies.org/index.php/Type system", "headline_links": [], "discussion": "", "headline": "a system of rules trying to avoid that \"bad things happen\" in programs ", "type": "Concept"}, "Android_Service": {"discussion_links": [], "name": "Android Service", "url": "http://101companies.org/index.php/Android Service", "headline_links": [], "discussion": "", "headline": "A component that runs in the background without Android-UI", "type": "Concept"}, "Framework": {"discussion_links": [], "name": "Framework", "url": "http://101companies.org/index.php/Framework", "headline_links": [], "discussion": "", "headline": "A structured collection of reusable abstractions for programming", "type": "Concept"}, "OO_class": {"discussion_links": [], "name": "OO class", "url": "http://101companies.org/index.php/OO class", "headline_links": [{"type": "Concept", "name": "abstraction_mechanism"}, {"type": "Concept", "name": "object"}], "discussion": "", "headline": "an [[abstraction mechanism]] for [[object]] creation", "type": "Concept"}, "Syntactic_category": {"discussion_links": [], "name": "Syntactic category", "url": "http://101companies.org/index.php/Syntactic category", "headline_links": [], "discussion": "", "headline": "categories of language constructs", "type": "Concept"}, "Thread": {"discussion_links": [], "name": "Thread", "url": "http://101companies.org/index.php/Thread", "headline_links": [], "discussion": "", "headline": "a thread of execution", "type": "Concept"}, "Head_function": {"discussion_links": [], "name": "Head function", "url": "http://101companies.org/index.php/Head function", "headline_links": [{"type": "Concept", "name": "operation"}, {"type": "Concept", "name": "list"}, {"type": "Concept", "name": "head"}], "discussion": "", "headline": "A basic [[operation]] on a [[list]] to return its [[head]]", "type": "Concept"}, "Fact_extractor": {"discussion_links": [], "name": "Fact extractor", "url": "http://101companies.org/index.php/Fact extractor", "headline_links": [], "discussion": "", "headline": "A program that extracts facts from software artifacts", "type": "Concept"}, "Proof": {"discussion_links": [], "name": "Proof", "url": "http://101companies.org/index.php/Proof", "headline_links": [], "discussion": "", "headline": "a demonstration of the truth of a formal statement", "type": "Concept"}, "Financial_exchange": {"discussion_links": [], "name": "Financial exchange", "url": "http://101companies.org/index.php/Financial exchange", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Computing": {"discussion_links": [], "name": "Computing", "url": "http://101companies.org/index.php/Computing", "headline_links": [], "discussion": "", "headline": "the activity of using computer hardware and software", "type": "Concept"}, "Product_function": {"discussion_links": [], "name": "Product function", "url": "http://101companies.org/index.php/Product function", "headline_links": [], "discussion": "", "headline": "compute the product of a list of numbers", "type": "Concept"}, "Functor": {"discussion_links": [], "name": "Functor", "url": "http://101companies.org/index.php/Functor", "headline_links": [{"type": "Concept", "name": "Functional_programming"}, {"type": "Concept", "name": "programming_idiom"}], "discussion": "", "headline": "a [[Functional programming|functional]] [[programming idiom]] for mapping over containers", "type": "Concept"}, "Streaming": {"discussion_links": [], "name": "Streaming", "url": "http://101companies.org/index.php/Streaming", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of processing data in a stream as opposed to in-memory", "type": "Concept"}, "Operator": {"discussion_links": [], "name": "Operator", "url": "http://101companies.org/index.php/Operator", "headline_links": [{"type": "Concept", "name": "operation"}], "discussion": "", "headline": "an [[operation]] with special syntax", "type": "Concept"}, "Operation": {"discussion_links": [], "name": "Operation", "url": "http://101companies.org/index.php/Operation", "headline_links": [{"type": "Concept", "name": "data_type"}], "discussion": "", "headline": "an operation of a [[data type]]", "type": "Concept"}, "Compiler": {"discussion_links": [], "name": "Compiler", "url": "http://101companies.org/index.php/Compiler", "headline_links": [], "discussion": "", "headline": "A program that transforms source code into object code ", "type": "Concept"}, "TMVar": {"discussion_links": [], "name": "TMVar", "url": "http://101companies.org/index.php/TMVar", "headline_links": [{"type": "Concept", "name": "MVar"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "STM"}, {"type": "Concept", "name": "monad"}], "discussion": "", "headline": "A transactional [[MVar]] for use with [[Language:Haskell]]'s [[STM]] [[monad]]", "type": "Concept"}, "Pattern": {"discussion_links": [], "name": "Pattern", "url": "http://101companies.org/index.php/Pattern", "headline_links": [{"type": "Concept", "name": "pattern_matching"}], "discussion": "", "headline": "A pattern of data used for [[pattern matching]] on data", "type": "Concept"}, "XMLware": {"discussion_links": [], "name": "XMLware", "url": "http://101companies.org/index.php/XMLware", "headline_links": [], "discussion": "", "headline": "a technological space focused on XML representation and XML processing", "type": "Concept"}, "Objectware": {"discussion_links": [], "name": "Objectware", "url": "http://101companies.org/index.php/Objectware", "headline_links": [{"type": "Page", "name": "OO_programming"}], "discussion": "", "headline": "a technological space focused on objects and [[:Category:OO programming]]", "type": "Concept"}, "Abstract_data_type": {"discussion_links": [], "name": "Abstract data type", "url": "http://101companies.org/index.php/Abstract data type", "headline_links": [{"type": "Concept", "name": "data_type"}, {"type": "Concept", "name": "property"}], "discussion": "", "headline": "a [[data type]] defined through [[property|properties]] instead of implementation", "type": "Concept"}, "Import": {"discussion_links": [], "name": "Import", "url": "http://101companies.org/index.php/Import", "headline_links": [], "discussion": "", "headline": "the description of external entities to be used in a given scope", "type": "Concept"}, "Data_parallelism": {"discussion_links": [], "name": "Data parallelism", "url": "http://101companies.org/index.php/Data parallelism", "headline_links": [{"type": "Concept", "name": "Parallelism"}], "discussion": "", "headline": "[[Parallelism]] focused on distributing data across parallel computing nodes", "type": "Concept"}, "Business_layer": {"discussion_links": [], "name": "Business layer", "url": "http://101companies.org/index.php/Business layer", "headline_links": [{"type": "Concept", "name": "threeADASHtier_architecture"}], "discussion": "", "headline": "the implementation of the business logic in a [[three-tier architecture]]", "type": "Concept"}, "InADASHmemory_XML_processing": {"discussion_links": [], "name": "In-memory XML processing", "url": "http://101companies.org/index.php/In-memory XML processing", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "DBMS": {"discussion_links": [], "name": "DBMS", "url": "http://101companies.org/index.php/DBMS", "headline_links": [{"type": "Concept", "name": "database"}], "discussion": "", "headline": "A [[database]] management system", "type": "Concept"}, "Profiling": {"discussion_links": [], "name": "Profiling", "url": "http://101companies.org/index.php/Profiling", "headline_links": [{"type": "Concept", "name": "performance"}], "discussion": "", "headline": "dynamic program analysis aiding [[performance]] improvements", "type": "Concept"}, "String": {"discussion_links": [], "name": "String", "url": "http://101companies.org/index.php/String", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "", "headline": "the [[primitive data type]] of strings", "type": "Concept"}, "OO_programming": {"discussion_links": [], "name": "OO programming", "url": "http://101companies.org/index.php/OO programming", "headline_links": [], "discussion": "", "headline": "an object-centric programming paradigm", "type": "Concept"}, "Closed_serialization": {"discussion_links": [], "name": "Closed serialization", "url": "http://101companies.org/index.php/Closed serialization", "headline_links": [{"type": "Concept", "name": "serialization"}], "discussion": "", "headline": "Potentially platform-dependent [[serialization]]", "type": "Concept"}, "POJO": {"discussion_links": [], "name": "POJO", "url": "http://101companies.org/index.php/POJO", "headline_links": [], "discussion": "", "headline": "Plain Old Java Objects", "type": "Concept"}, "ObjectASLASHText_mapping": {"discussion_links": [], "name": "Object/Text mapping", "url": "http://101companies.org/index.php/Object/Text mapping", "headline_links": [], "discussion": "", "headline": "Map text to objects and vice versa", "type": "Concept"}, "Interaction": {"discussion_links": [], "name": "Interaction", "url": "http://101companies.org/index.php/Interaction", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of interaction between the user and the system", "type": "Concept"}, "Algorithm": {"discussion_links": [], "name": "Algorithm", "url": "http://101companies.org/index.php/Algorithm", "headline_links": [{"type": "Concept", "name": "calculation"}], "discussion": "", "headline": "A step-by-step procedure for [[calculation]]s", "type": "Concept"}, "Lexer": {"discussion_links": [], "name": "Lexer", "url": "http://101companies.org/index.php/Lexer", "headline_links": [{"type": "Concept", "name": "lexical_analysis"}], "discussion": "", "headline": "A program performing [[lexical analysis]]", "type": "Concept"}, "CRUD": {"discussion_links": [], "name": "CRUD", "url": "http://101companies.org/index.php/CRUD", "headline_links": [], "discussion": "", "headline": "The basic functions of persistent storage", "type": "Concept"}, "Command": {"discussion_links": [], "name": "Command", "url": "http://101companies.org/index.php/Command", "headline_links": [], "discussion": "", "headline": "a directive to a computer program", "type": "Concept"}, "Property": {"discussion_links": [], "name": "Property", "url": "http://101companies.org/index.php/Property", "headline_links": [], "discussion": "", "headline": "a desirable or undesirable program property", "type": "Concept"}, "Equational_reasoning": {"discussion_links": [], "name": "Equational reasoning", "url": "http://101companies.org/index.php/Equational reasoning", "headline_links": [], "discussion": "", "headline": "replace equals by equals", "type": "Concept"}, "Loop": {"discussion_links": [], "name": "Loop", "url": "http://101companies.org/index.php/Loop", "headline_links": [], "discussion": "", "headline": "the description of repeated execution in a program", "type": "Concept"}, "Endogenous_transformation": {"discussion_links": [{"type": "Page", "name": "Transformation"}], "name": "Endogenous transformation", "url": "http://101companies.org/index.php/Endogenous transformation", "headline_links": [], "discussion": "\n\nExamples of endogenous transformations are these:\n* a program transformation for optimization\n* an XML transformation that only affects primitive values of selected elements\n* a traversal over an object graph (by a visitor or otherwise) that mutates objects\n\n[[Category:Transformation]]\n", "headline": "a transformation with the type of the input and output being the same", "type": "Concept"}, "Parser": {"discussion_links": [], "name": "Parser", "url": "http://101companies.org/index.php/Parser", "headline_links": [{"type": "Concept", "name": "parsing"}], "discussion": "", "headline": "A program performing [[parsing]]", "type": "Concept"}, "Constructor_method": {"discussion_links": [], "name": "Constructor method", "url": "http://101companies.org/index.php/Constructor method", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Pointer": {"discussion_links": [], "name": "Pointer", "url": "http://101companies.org/index.php/Pointer", "headline_links": [], "discussion": "", "headline": "data representing a reference to other data", "type": "Concept"}, "Source_code_repository": {"discussion_links": [], "name": "Source code repository", "url": "http://101companies.org/index.php/Source code repository", "headline_links": [], "discussion": "", "headline": "a file archive and web hosting facility for source code", "type": "Concept"}, "Function_definition": {"discussion_links": [], "name": "Function definition", "url": "http://101companies.org/index.php/Function definition", "headline_links": [{"type": "Concept", "name": "equation"}, {"type": "Concept", "name": "function"}], "discussion": "", "headline": "the [[equation]]s defining a [[function]] in a program", "type": "Concept"}, "Web_programming": {"discussion_links": [], "name": "Web programming", "url": "http://101companies.org/index.php/Web programming", "headline_links": [{"type": "Concept", "name": "programming_domain"}, {"type": "Concept", "name": "web_application"}], "discussion": "", "headline": "The [[programming domain]] of developing [[web application]]s", "type": "Concept"}, "Virtual_method": {"discussion_links": [], "name": "Virtual method", "url": "http://101companies.org/index.php/Virtual method", "headline_links": [{"type": "Page", "name": "Instance_method"}], "discussion": "", "headline": "[[:Category:Instance method]]s that may be overridden and dispatch is based on runtime receiver types", "type": "Concept"}, "State_monad": {"discussion_links": [], "name": "State monad", "url": "http://101companies.org/index.php/State monad", "headline_links": [{"type": "Concept", "name": "monad"}, {"type": "Concept", "name": "state"}], "discussion": "", "headline": "a [[monad]] for [[state]]", "type": "Concept"}, "AdADASHhoc_polymorphism": {"discussion_links": [], "name": "Ad-hoc polymorphism", "url": "http://101companies.org/index.php/Ad-hoc polymorphism", "headline_links": [{"type": "Concept", "name": "polymorphism"}], "discussion": "", "headline": "a form of [[polymorphism]] applying to a specific set of types ", "type": "Concept"}, "Data_programming": {"discussion_links": [], "name": "Data programming", "url": "http://101companies.org/index.php/Data programming", "headline_links": [], "discussion": "", "headline": "any sort of data programming: XML or database programming", "type": "Concept"}, "Program_optimization": {"discussion_links": [], "name": "Program optimization", "url": "http://101companies.org/index.php/Program optimization", "headline_links": [{"type": "Concept", "name": "performance"}], "discussion": "", "headline": "the improvement of a program's [[performance]]", "type": "Concept"}, "Prepared_statement": {"discussion_links": [], "name": "Prepared statement", "url": "http://101companies.org/index.php/Prepared statement", "headline_links": [{"type": "Concept", "name": "DBMS"}], "discussion": "", "headline": "A parametrized statement for repeated execution on a [[DBMS]]", "type": "Concept"}, "Tuple": {"discussion_links": [], "name": "Tuple", "url": "http://101companies.org/index.php/Tuple", "headline_links": [], "discussion": "", "headline": "an ordered list of elements of potentially different types", "type": "Concept"}, "SchemaADASHfirst_mapping": {"discussion_links": [{"type": "Concept", "name": "CodeADASHfirst_mapping"}, {"type": "Page", "name": "Mapping"}], "name": "Schema-first mapping", "url": "http://101companies.org/index.php/Schema-first mapping", "headline_links": [{"type": "Concept", "name": "OASLASHX_mapping"}, {"type": "Concept", "name": "OASLASHR_mapping"}], "discussion": "\n\nSee [[Code-first mapping]] for the counter-part.\n\n[[Category:Mapping]]\n", "headline": "start from a schema rather than an object model in [[O/X mapping|O/X]] or [[O/R mapping]]", "type": "Concept"}, "Cookie": {"discussion_links": [], "name": "Cookie", "url": "http://101companies.org/index.php/Cookie", "headline_links": [{"type": "Concept", "name": "client"}, {"type": "Concept", "name": "file"}, {"type": "Concept", "name": "server"}, {"type": "Concept", "name": "web_application"}], "discussion": "", "headline": "A [[client]]-side [[file]] storing data for the [[server]] of a [[web application]]", "type": "Concept"}, "Function_composition": {"discussion_links": [], "name": "Function composition", "url": "http://101companies.org/index.php/Function composition", "headline_links": [], "discussion": "", "headline": "combine two functions in a certain way", "type": "Concept"}, "Integer": {"discussion_links": [{"type": "Page", "name": "Primitive_data_type"}], "name": "Integer", "url": "http://101companies.org/index.php/Integer", "headline_links": [{"type": "Concept", "name": "primitive_data_type"}], "discussion": "\n\nThe concept of integers may correspond to different language-specific data types.\n\n[[Category:Primitive data type]]\n", "headline": "the [[primitive data type]] of Integers", "type": "Concept"}, "Condition": {"discussion_links": [], "name": "Condition", "url": "http://101companies.org/index.php/Condition", "headline_links": [], "discussion": "", "headline": "the description of a predicate on data", "type": "Concept"}, "Random_number_generator": {"discussion_links": [], "name": "Random number generator", "url": "http://101companies.org/index.php/Random number generator", "headline_links": [{"type": "Concept", "name": "random_number"}], "discussion": "", "headline": "an algorithm that generates a sequence of [[random number]]s", "type": "Concept"}, "AndroidManifest": {"discussion_links": [], "name": "AndroidManifest", "url": "http://101companies.org/index.php/AndroidManifest", "headline_links": [{"type": "Language", "name": "Android"}], "discussion": "", "headline": "The default settings of an [[Language:Android]] application", "type": "Concept"}, "ObjectASLASHXML_mapping": {"discussion_links": [], "name": "Object/XML mapping", "url": "http://101companies.org/index.php/Object/XML mapping", "headline_links": [{"type": "Page", "name": "capability"}, {"type": "Page", "name": "Space"}, {"type": "Concept", "name": "objectware"}, {"type": "Concept", "name": "XMLware"}], "discussion": "", "headline": "the [[:Category:capability]] of bridging the [[:Category:Space|technological spaces]] [[objectware]] and [[XMLware]]", "type": "Concept"}, "Identity_element": {"discussion_links": [], "name": "Identity element", "url": "http://101companies.org/index.php/Identity element", "headline_links": [], "discussion": "", "headline": "an identity element as in group theory", "type": "Concept"}, "Unfold_function": {"discussion_links": [], "name": "Unfold function", "url": "http://101companies.org/index.php/Unfold function", "headline_links": [{"type": "Concept", "name": "higherADASHorder_function"}, {"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "a [[higher-order function]] for building a [[data structure]]", "type": "Concept"}, "Fold_function": {"discussion_links": [], "name": "Fold function", "url": "http://101companies.org/index.php/Fold function", "headline_links": [{"type": "Concept", "name": "higherADASHorder_function"}, {"type": "Concept", "name": "data_structure"}], "discussion": "", "headline": "a [[higher-order function]] for processing a [[data structure]]", "type": "Concept"}, "Parser_combinator": {"discussion_links": [], "name": "Parser combinator", "url": "http://101companies.org/index.php/Parser combinator", "headline_links": [{"type": "Concept", "name": "combinator"}, {"type": "Concept", "name": "composition"}, {"type": "Concept", "name": "parser"}, {"type": "Concept", "name": "function"}], "discussion": "", "headline": "A [[combinator]] for the [[composition]] of [[parser]] [[function]]s", "type": "Concept"}, "Function": {"discussion_links": [], "name": "Function", "url": "http://101companies.org/index.php/Function", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Web_application": {"discussion_links": [], "name": "Web application", "url": "http://101companies.org/index.php/Web application", "headline_links": [], "discussion": "", "headline": "An application that leverages web resources or web technologies", "type": "Concept"}, "Corecursion": {"discussion_links": [], "name": "Corecursion", "url": "http://101companies.org/index.php/Corecursion", "headline_links": [{"type": "Concept", "name": "recursion"}], "discussion": "", "headline": "The dual concept of [[recursion]]", "type": "Concept"}, "DAO": {"discussion_links": [], "name": "DAO", "url": "http://101companies.org/index.php/DAO", "headline_links": [{"type": "Page", "name": "Design_pattern"}, {"type": "Page", "name": "DataADASHaccess_layer"}], "discussion": "", "headline": "a [[:Category:Design pattern]] dedicated to create a replaceable [[:Category:Data-access_layer|data-access layer]]", "type": "Concept"}, "Getter": {"discussion_links": [{"type": "Page", "name": "Instance_method"}], "name": "Getter", "url": "http://101companies.org/index.php/Getter", "headline_links": [], "discussion": "\n\nOftentimes, a getter is simply an accessor for a non-public field. However, getters may also bridge between internal and external state of an object. In some languages. getters are implemented as instance methods using a name convention. In other languages, there is a designated concept.\n\n[[Category:Instance method]]\n", "headline": "read the state (a specific attribute) of an object", "type": "Concept"}, "Programming_paradigm": {"discussion_links": [], "name": "Programming paradigm", "url": "http://101companies.org/index.php/Programming paradigm", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Prelude": {"discussion_links": [], "name": "Prelude", "url": "http://101companies.org/index.php/Prelude", "headline_links": [{"type": "Concept", "name": "module"}, {"type": "Language", "name": "Haskell"}], "discussion": "", "headline": "A standard [[module]] imported by default into all [[Language:Haskell]] modules", "type": "Concept"}, "Fact_extraction": {"discussion_links": [], "name": "Fact extraction", "url": "http://101companies.org/index.php/Fact extraction", "headline_links": [], "discussion": "", "headline": "The programmatic extraction of facts from software artifacts", "type": "Concept"}, "Sum_function": {"discussion_links": [], "name": "Sum function", "url": "http://101companies.org/index.php/Sum function", "headline_links": [], "discussion": "", "headline": "compute the sum of a list of numbers", "type": "Concept"}, "Employee_Profile": {"discussion_links": [], "name": "Employee Profile", "url": "http://101companies.org/index.php/Employee Profile", "headline_links": [], "discussion": "", "headline": "Information about the employee data, work data and geodata", "type": "Concept"}, "101demonstration": {"discussion_links": [], "name": "101demonstration", "url": "http://101companies.org/index.php/101demonstration", "headline_links": [], "discussion": "", "headline": "A demonstration of some method", "type": "Concept"}, "Distributed_programming": {"discussion_links": [], "name": "Distributed programming", "url": "http://101companies.org/index.php/Distributed programming", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Around_advice": {"discussion_links": [], "name": "Around advice", "url": "http://101companies.org/index.php/Around advice", "headline_links": [], "discussion": "", "headline": "", "type": "Concept"}, "Output": {"discussion_links": [], "name": "Output", "url": "http://101companies.org/index.php/Output", "headline_links": [], "discussion": "", "headline": "output data produced by program execution", "type": "Concept"}, "Polymorphic_function": {"discussion_links": [], "name": "Polymorphic function", "url": "http://101companies.org/index.php/Polymorphic function", "headline_links": [{"type": "Concept", "name": "function"}], "discussion": "", "headline": "a [[function]] that may be applied to several types.", "type": "Concept"}, "MVC": {"discussion_links": [{"type": "Page", "name": "Pattern"}, {"type": "Concept", "name": "user_interface"}, {"type": "Page", "name": "Architectural_pattern"}], "name": "MVC", "url": "http://101companies.org/index.php/MVC", "headline_links": [{"type": "Page", "name": "Architectural_pattern"}], "discussion": "\n\nThe MVC (Model View Controller) [[:Category:Pattern|pattern]] divides a program into three major parts:\n\n* View\n* Controller\n* Model\n\nThe view contains the [[user interface]]. The model contains the data. The controller handles the user input and notifies both the model and the view, if there are any changes in one of them. If there are changes in the model, the view will collect them directly from the model, when it gets notified. If there are changes in the view, the controller will delegate this to the model <cite>Burbeck1992MVC</cite>.\n\n[[Category:Architectural pattern]]\n\n", "headline": "an [[:Category:Architectural pattern]] dedicated to seperate concerns", "type": "Concept"}, "Concurrency": {"discussion_links": [], "name": "Concurrency", "url": "http://101companies.org/index.php/Concurrency", "headline_links": [{"type": "Page", "name": "capability"}], "discussion": "", "headline": "the [[:Category:capability]] of simultaneous computations with interaction", "type": "Concept"}, "Data_structure": {"discussion_links": [], "name": "Data structure", "url": "http://101companies.org/index.php/Data structure", "headline_links": [], "discussion": "", "headline": "a particular way of storing and organizing data in a computer", "type": "Concept"}, "101model": {"discussion_links": [], "name": "101model", "url": "http://101companies.org/index.php/101model", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "headline": "A model of the [[101companies:System]]", "type": "Concept"}}, "Language": {"XPath": {"name": "XPath", "url": "http://101companies.org/index.php/Language:XPath", "headline_links": [], "implementations": [{"type": "Implementation", "name": "xpathAPI"}], "headline": "a query language for XML documents", "type": "Language"}, "FSharp": {"name": "FSharp", "url": "http://101companies.org/index.php/Language:FSharp", "headline_links": [{"type": "Page", "name": "Functional_programming_language"}, {"type": "Page", "name": "OO_programming_language"}], "implementations": [{"type": "Implementation", "name": "fsharp"}], "headline": "a [[:Category:Functional programming language|functional]] [[:Category:OO programming language|OO]] programming language", "type": "Language"}, "EXE": {"name": "EXE", "url": "http://101companies.org/index.php/Language:EXE", "headline_links": [], "implementations": [], "headline": "a file format for executables and associated resources", "type": "Language"}, "Java": {"name": "Java", "description_links": [{"type": "Technology", "name": "Java_platform"}, {"type": "Technology", "name": "Java_SE"}], "url": "http://101companies.org/index.php/Language:Java", "headline_links": [{"type": "Page", "name": "OO_programming_language"}], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Implementation", "name": "antlrLexer"}, {"type": "Implementation", "name": "antlrObjects"}, {"type": "Implementation", "name": "antlrParser"}, {"type": "Implementation", "name": "antlrTrees"}, {"type": "Implementation", "name": "atl"}, {"type": "Implementation", "name": "dom"}, {"type": "Implementation", "name": "egl"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "emfReflexive"}, {"type": "Implementation", "name": "gra2mol"}, {"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "hadoop"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Implementation", "name": "javaExorcism"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Implementation", "name": "javaLexer"}, {"type": "Implementation", "name": "javaMultithreading"}, {"type": "Implementation", "name": "javaParseLib"}, {"type": "Implementation", "name": "javaParser"}, {"type": "Implementation", "name": "javaRmi"}, {"type": "Implementation", "name": "javaScanner"}, {"type": "Implementation", "name": "javaStatic"}, {"type": "Implementation", "name": "javaSyb"}, {"type": "Implementation", "name": "javaTemplate"}, {"type": "Implementation", "name": "javaTree"}, {"type": "Implementation", "name": "javaVisitor"}, {"type": "Implementation", "name": "javawsClient"}, {"type": "Implementation", "name": "javawsServer"}, {"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}, {"type": "Implementation", "name": "jdbc"}, {"type": "Implementation", "name": "jdbc2"}, {"type": "Implementation", "name": "jdom"}, {"type": "Implementation", "name": "jgralab"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "simpleAndroid"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "strutsXml"}, {"type": "Implementation", "name": "swing"}, {"type": "Implementation", "name": "xom"}, {"type": "Implementation", "name": "xpathAPI"}, {"type": "Implementation", "name": "xtext"}], "headline": "an [[:Category:OO programming language]]", "type": "Language", "description": "See elsewhere for the [[Technology:Java platform]] and the [[Technology:Java SE]]."}, "XSD": {"name": "XSD", "url": "http://101companies.org/index.php/Language:XSD", "headline_links": [], "implementations": [{"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "xslt"}], "headline": "TBD", "type": "Language"}, "Zip": {"name": "Zip", "url": "http://101companies.org/index.php/Language:Zip", "headline_links": [], "implementations": [], "headline": "An archive file format", "type": "Language"}, "Scala": {"name": "Scala", "url": "http://101companies.org/index.php/Language:Scala", "headline_links": [{"type": "Page", "name": "Functional_programming_language"}, {"type": "Page", "name": "OO_programming_language"}], "implementations": [{"type": "Implementation", "name": "kiama"}, {"type": "Implementation", "name": "scala2"}, {"type": "Implementation", "name": "scalaXML"}], "headline": "a [[:Category:Functional programming language|functional]] [[:Category:OO programming language|OO]] programming language", "type": "Language"}, "PlainText": {"name": "PlainText", "description_links": [], "url": "http://101companies.org/index.php/Language:PlainText", "headline_links": [], "implementations": [], "headline": "an text file without any formatting commands", "type": "Language", "description": "A plain text file contains readable characters. There are no formatting commands defined. Plain text files in the context of the 101companies projects are widely used as Readme files, which are mostly called Readme.txt or Readme.md."}, "ATL": {"name": "ATL", "description_links": [], "url": "http://101companies.org/index.php/Language:ATL", "headline_links": [], "implementations": [{"type": "Implementation", "name": "atl"}], "headline": "The ATLAS Transformation Language for model transformation", "type": "Language", "description": "ATL stands for ATLAS Transformation Language.\nIn the narrow sense, ATL is indeed a language.\nIn the wider sense, ATL is occasionally used to refer to the toolkit supporting ATL."}, "JavaScript": {"name": "JavaScript", "url": "http://101companies.org/index.php/Language:JavaScript", "headline_links": [], "implementations": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5indexedDatabase"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "mongodb"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "rubyonrails"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "webDSL"}], "headline": "A dynamic, prototype-based scripting language with first-class functions", "type": "Language"}, "Rascal": {"name": "Rascal", "url": "http://101companies.org/index.php/Language:Rascal", "headline_links": [], "implementations": [], "headline": "A DSL for source code analysis and manipulation", "type": "Language"}, "Java_bytecode": {"name": "Java bytecode", "url": "http://101companies.org/index.php/Language:Java bytecode", "headline_links": [{"type": "Technology", "name": "JVM"}], "implementations": [], "headline": "The instructions executed by the [[Technology:JVM]]", "type": "Language"}, "HQL": {"name": "HQL", "url": "http://101companies.org/index.php/Language:HQL", "headline_links": [{"type": "Technology", "name": "Hibernate"}], "implementations": [{"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "seam"}], "headline": "The [[Technology:Hibernate]] Query Language", "type": "Language"}, "XML": {"name": "XML", "url": "http://101companies.org/index.php/Language:XML", "headline_links": [], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "dom"}, {"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "hxtPickler"}, {"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}, {"type": "Implementation", "name": "jdom"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "simpleAndroid"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "strutsXml"}, {"type": "Implementation", "name": "template"}, {"type": "Implementation", "name": "wcf"}, {"type": "Implementation", "name": "xom"}, {"type": "Implementation", "name": "xpathAPI"}, {"type": "Implementation", "name": "xquery"}, {"type": "Implementation", "name": "xslt"}], "headline": "An extensible markup language", "type": "Language"}, "OGNL": {"name": "OGNL", "description_links": [{"type": "Technology", "name": "OGNL"}], "url": "http://101companies.org/index.php/Language:OGNL", "headline_links": [], "implementations": [], "headline": "a language for object graph navigation", "type": "Language", "description": "OGNL stands for \"Object Graph Navigation Language\", but see the technology [[Technology:OGNL]]"}, "UML": {"name": "UML", "url": "http://101companies.org/index.php/Language:UML", "headline_links": [], "implementations": [], "headline": "The Unified Modeling Language", "type": "Language"}, "Android": {"name": "Android", "description_links": [{"type": "Technology", "name": "Android_platform"}, {"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}], "url": "http://101companies.org/index.php/Language:Android", "headline_links": [{"type": "Page", "name": "OO_programming_language"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "simpleAndroid"}], "headline": "an [[:Category:OO programming language]] based on [[Language:Java]]", "type": "Language", "description": "See elsewhere for the [[Technology:Android platform]], the [[Technology:Android SDK]] and the [[Technology:ADT]]."}, "Erlang": {"name": "Erlang", "url": "http://101companies.org/index.php/Language:Erlang", "headline_links": [], "implementations": [{"type": "Implementation", "name": "erlang"}], "headline": "a programming language used to build massively scalable soft real-time systems with requirements on high availability", "type": "Language"}, "Config": {"name": "Config", "description_links": [], "url": "http://101companies.org/index.php/Language:Config", "headline_links": [], "implementations": [], "headline": "a ASP.NET configuration language ", "type": "Language", "description": "Config files are XML files that contain settings for a all web applications on a server, single ones, single folders or single sites of the web applciation. Settings can be compiler options, options for debugging, but also user authentification and error messages. They are usually called Web.config, but several .config files for the different compilation targets are also common."}, "AspectJ": {"name": "AspectJ", "url": "http://101companies.org/index.php/Language:AspectJ", "headline_links": [{"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "aspectJ"}], "headline": "an aspect-oriented programming language based on [[Language:Java]]", "type": "Language"}, "XMI": {"name": "XMI", "url": "http://101companies.org/index.php/Language:XMI", "headline_links": [{"type": "Language", "name": "XML"}, {"type": "Technology", "name": "MOF"}, {"type": "Concept", "name": "metadata"}, {"type": "Concept", "name": "model"}], "implementations": [], "headline": "an [[Language:XML]]-based interchange format for [[Technology:MOF]]-based [[metadata]] or [[model]]s", "type": "Language"}, "JNLP": {"name": "JNLP", "url": "http://101companies.org/index.php/Language:JNLP", "headline_links": [], "implementations": [], "headline": "a language serving the Java Network Launching Protocol", "type": "Language"}, "EBNF": {"name": "EBNF", "url": "http://101companies.org/index.php/Language:EBNF", "headline_links": [{"type": "Language", "name": "BNF"}], "implementations": [{"type": "Implementation", "name": "xtext"}], "headline": "the Extended [[Language:BNF]] as a notation for context-free grammars", "type": "Language"}, "tar": {"name": "tar", "url": "http://101companies.org/index.php/Language:tar", "headline_links": [], "implementations": [], "headline": "An archive file format", "type": "Language"}, "Python": {"name": "Python", "url": "http://101companies.org/index.php/Language:Python", "headline_links": [{"type": "Page", "name": "OO_programming_language"}, {"type": "Page", "name": "Interpreted_programming_language"}, {"type": "Page", "name": "Functional_programming_language"}], "implementations": [{"type": "Implementation", "name": "pyjamas"}], "headline": "An [[:Category:OO programming language|OO]]-, [[:Category:Interpreted programming language|interpreted]]- and [[:Category:Functional programming language|functional]]-programming language", "type": "Language"}, "Cobol_85": {"name": "Cobol 85", "url": "http://101companies.org/index.php/Language:Cobol 85", "headline_links": [{"type": "Language", "name": "Cobol"}], "implementations": [], "headline": "a standardized version of [[Language:Cobol]]", "type": "Language"}, "XSLT": {"name": "XSLT", "url": "http://101companies.org/index.php/Language:XSLT", "headline_links": [], "implementations": [{"type": "Implementation", "name": "xslt"}], "headline": "an XML language for XML processing, specifically for transformation", "type": "Language"}, "Shell_Script": {"name": "Shell Script", "description_links": [], "url": "http://101companies.org/index.php/Language:Shell Script", "headline_links": [{"type": "Page", "name": "scripting_language"}], "implementations": [], "headline": "A  [[:Category:scripting language]] written for shells or command line interpreters", "type": "Language", "description": "A shell script is a type of script that is mainly used for file manipulation, program execution and printing text."}, "XQuery": {"name": "XQuery", "url": "http://101companies.org/index.php/Language:XQuery", "headline_links": [], "implementations": [{"type": "Implementation", "name": "xquery"}], "headline": "a language for XML processing, specifically for querying", "type": "Language"}, "Perl": {"name": "Perl", "url": "http://101companies.org/index.php/Language:Perl", "headline_links": [{"type": "Page", "name": "MultiADASHparadigm_programming_language"}, {"type": "Page", "name": "Functional__programming_language"}, {"type": "Page", "name": "OO_programming_language"}, {"type": "Page", "name": "Scripting_language"}, {"type": "Page", "name": "Procedural_programming_language"}, {"type": "Page", "name": "Language"}], "implementations": [], "headline": "a [[:Category:Multi-paradigm programming language|multi-paradigm]], [[:Category:Functional  programming language|functional]], [[:Category:OO programming language|object-oriented]], [[:Category:Scripting language|interpreted]] and [[:Category:Procedural programming language|procedural]] [[:Category:Language|language]]", "type": "Language"}, "Launch_file": {"name": "Launch file", "description_links": [], "url": "http://101companies.org/index.php/Language:Launch file", "headline_links": [], "implementations": [], "headline": "a language for launch configurations", "type": "Language", "description": "Launch files contain launch configurations. They are mainly used by Eclipse."}, "XHTML": {"name": "XHTML", "description_links": [{"type": "Language", "name": "HTML"}], "url": "http://101companies.org/index.php/Language:XHTML", "headline_links": [], "implementations": [{"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "seam"}], "headline": "A markup language for documents on the Web", "type": "Language", "description": "XHTML is a derivative or dialect of [[Language:HTML]].\n\nIt is more strictly XML-based."}, "HSQLDialect": {"name": "HSQLDialect", "url": "http://101companies.org/index.php/Language:HSQLDialect", "headline_links": [{"type": "Technology", "name": "Hibernate"}, {"type": "Language", "name": "SQL"}], "implementations": [{"type": "Implementation", "name": "hibernate"}], "headline": "the [[Technology:Hibernate]]-specific dialect of [[Language:SQL]]", "type": "Language"}, "JSON": {"name": "JSON", "url": "http://101companies.org/index.php/Language:JSON", "headline_links": [{"type": "Page", "name": "Format_language"}], "implementations": [{"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}], "headline": "a [[:Category:Format language|format language]] for data exchange", "type": "Language"}, "HTML": {"name": "HTML", "description_links": [], "url": "http://101companies.org/index.php/Language:HTML", "headline_links": [], "implementations": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "rubyonrails"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "zend"}], "headline": "a markup language for documents on the WWW", "type": "Language", "description": "HTML supports the domain of web document authoring and publishing."}, "RAR": {"name": "RAR", "url": "http://101companies.org/index.php/Language:RAR", "headline_links": [], "implementations": [], "headline": "An archive file format", "type": "Language"}, "Ecore": {"name": "Ecore", "description_links": [{"type": "Technology", "name": "EMF"}], "url": "http://101companies.org/index.php/Language:Ecore", "headline_links": [], "implementations": [{"type": "Implementation", "name": "egl"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "emfReflexive"}], "headline": "the metamodel based on the EMOF standard", "type": "Language", "description": "Ecore is an essential component of [[Technology:EMF]]."}, "Ruby": {"name": "Ruby", "url": "http://101companies.org/index.php/Language:Ruby", "headline_links": [{"type": "Page", "name": "multiADASHparadigm_programming_language"}], "implementations": [{"type": "Implementation", "name": "rubyonrails"}], "headline": "a [[:Category:multi-paradigm programming language]]", "type": "Language"}, "XLS": {"name": "XLS", "url": "http://101companies.org/index.php/Language:XLS", "headline_links": [{"type": "Technology", "name": "Microsoft_Excel"}], "implementations": [], "headline": "The file format for the spreadsheet application [[Technology:Microsoft Excel]]", "type": "Language"}, "Groovy": {"name": "Groovy", "url": "http://101companies.org/index.php/Language:Groovy", "headline_links": [{"type": "Page", "name": "OO_programming_language"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "gremlinADASHneo4j"}, {"type": "Implementation", "name": "groovyDataFlowVariables"}], "headline": "a dynamically typed [[:Category:OO programming language]] on the [[Language:Java]] Virtual Machine", "type": "Language"}, "GReTL": {"name": "GReTL", "url": "http://101companies.org/index.php/Language:GReTL", "headline_links": [], "implementations": [{"type": "Implementation", "name": "jgralab"}], "headline": "a language for graph transformation ", "type": "Language"}, "Settings": {"name": "Settings", "description_links": [], "url": "http://101companies.org/index.php/Language:Settings", "headline_links": [], "implementations": [], "headline": "A language that stores preferences", "type": "Language", "description": "File formats that store different settings come in different flavours. They have all in common that they are key value based. The key and the value are seperated by the letter =. Every key value pair is stored in a new line. Line comments are introduced with the letter #.\nUnder Windows, a .ini file is a widely used example. Other examples include .prefs or .properties files."}, "CPlusPlus": {"name": "CPlusPlus", "url": "http://101companies.org/index.php/Language:CPlusPlus", "headline_links": [], "implementations": [{"type": "Implementation", "name": "qt"}], "headline": "a statically typed, free-form, multi-paradigm, compiled, general-purpose programming language", "type": "Language"}, "SQL": {"name": "SQL", "url": "http://101companies.org/index.php/Language:SQL", "headline_links": [{"type": "Concept", "name": "query_language"}], "implementations": [{"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "jdbc"}, {"type": "Implementation", "name": "jdbc2"}, {"type": "Implementation", "name": "mySql"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "sqlServer"}], "headline": "A [[query language]] for databases", "type": "Language"}, "JAR": {"name": "JAR", "url": "http://101companies.org/index.php/Language:JAR", "headline_links": [], "implementations": [], "headline": "An archive file format used on the Java platform", "type": "Language"}, "DLL": {"name": "DLL", "url": "http://101companies.org/index.php/Language:DLL", "headline_links": [{"type": "Technology", "name": "DLL"}], "implementations": [], "headline": "Microsoft's file format for [[Technology:DLL]] shared libraries", "type": "Language"}, "GIF": {"name": "GIF", "description_links": [], "url": "http://101companies.org/index.php/Language:GIF", "headline_links": [], "implementations": [], "headline": "A image language", "type": "Language", "description": "The Graphics Interchange Format is a bitmap image format that is widely used in the web."}, "VBADOTNET": {"name": "VB.NET", "url": "http://101companies.org/index.php/Language:VB.NET", "headline_links": [], "implementations": [], "headline": "a programming language by Microsoft", "type": "Language"}, "HTML5": {"name": "HTML5", "description_links": [{"type": "Page", "name": "Markup_language"}, {"type": "Language", "name": "HTML"}, {"type": "Concept", "name": "offline_storage"}, {"type": "Concept", "name": "canvas"}], "url": "http://101companies.org/index.php/Language:HTML5", "headline_links": [{"type": "Page", "name": "Markup_language"}, {"type": "Page", "name": "Web_programming"}], "implementations": [{"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5indexedDatabase"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}], "headline": "a [[:Category:Markup_language|Markup Language]] for [[:Category:Web programming]]", "type": "Language", "description": "HTML5 is a [[:Category:Markup_language|markup language]], which extends the current [[Language:HTML]]-Standard with several features like [[offline storage]], [[canvas]] and some more."}, "CSharp": {"name": "CSharp", "description_links": [], "url": "http://101companies.org/index.php/Language:CSharp", "headline_links": [], "implementations": [{"type": "Implementation", "name": "csharp"}, {"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "csharpLinqToXml"}, {"type": "Implementation", "name": "ef"}, {"type": "Implementation", "name": "linq2DataSet"}, {"type": "Implementation", "name": "linq2Sql"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "wcf"}, {"type": "Implementation", "name": "wcfRest"}, {"type": "Implementation", "name": "wp7"}, {"type": "Implementation", "name": "wpf"}, {"type": "Implementation", "name": "xmlReader"}, {"type": "Implementation", "name": "xsdClasses"}, {"type": "Implementation", "name": "xsdDataSet"}], "headline": "a programming language by Microsoft", "type": "Language", "description": "The correct title of this technology is C#. \n\nThe substitution or omission of a # sign is because of Wiki-related technical restrictions."}, "101meta": {"name": "101meta", "url": "http://101companies.org/index.php/Language:101meta", "headline_links": [], "implementations": [], "headline": "A language for associating metadata with files in a file system", "type": "Language"}, "PDF": {"name": "PDF", "url": "http://101companies.org/index.php/Language:PDF", "headline_links": [], "implementations": [], "headline": "A file format used to represent documents", "type": "Language"}, "BSON": {"name": "BSON", "description_links": [{"type": "Language", "name": "JSON"}, {"type": "Technology", "name": "MongoDB"}], "url": "http://101companies.org/index.php/Language:BSON", "headline_links": [{"type": "Page", "name": "Format_language"}, {"type": "Language", "name": "JSON"}], "implementations": [], "headline": "A binary [[:Category:Format language|format language]] for data exchange, based on [[Language:JSON]]", "type": "Language", "description": "BSON is a binary format based on the [[Language:JSON]] specification, also extending it by several other admissible datatypes such as ISO dates. It is primarily used as the storage format of [[Technology:MongoDB]]."}, "MegaL": {"name": "MegaL", "url": "http://101companies.org/index.php/Language:MegaL", "headline_links": [], "implementations": [], "headline": "A language for megamodeling", "type": "Language"}, "BNF": {"name": "BNF", "url": "http://101companies.org/index.php/Language:BNF", "headline_links": [], "implementations": [], "headline": "the Backus-Naur Form as a notation for context-free grammars", "type": "Language"}, "CSS": {"name": "CSS", "url": "http://101companies.org/index.php/Language:CSS", "headline_links": [{"type": "Concept", "name": "style_sheet_language"}, {"type": "Concept", "name": "Web_programming"}], "implementations": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "rubyonrails"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "zend"}], "headline": "A [[style sheet language]] for [[Web programming]]", "type": "Language"}, "Prolog": {"name": "Prolog", "url": "http://101companies.org/index.php/Language:Prolog", "headline_links": [{"type": "Concept", "name": "programming_language"}, {"type": "Concept", "name": "logic_programming"}], "implementations": [{"type": "Implementation", "name": "prolog"}], "headline": "a [[programming language]] for [[logic programming]]", "type": "Language"}, "Haskell_98": {"name": "Haskell 98", "url": "http://101companies.org/index.php/Language:Haskell 98", "headline_links": [{"type": "Language", "name": "Haskell"}], "implementations": [], "headline": "A standardized version of [[Language:Haskell]]", "type": "Language"}, "WSDL": {"name": "WSDL", "url": "http://101companies.org/index.php/Language:WSDL", "headline_links": [{"type": "Language", "name": "XML"}, {"type": "Page", "name": "Language"}], "implementations": [{"type": "Implementation", "name": "wcf"}], "headline": "An [[Language:XML]]-based [[:Category:Language|language]] for functionality description of webservices", "type": "Language"}, "JAXB_annotations": {"name": "JAXB annotations", "url": "http://101companies.org/index.php/Language:JAXB annotations", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}], "implementations": [], "headline": "JAXB's set of annotations for [[Object/XML mapping]]", "type": "Language"}, "Haskell": {"name": "Haskell", "url": "http://101companies.org/index.php/Language:Haskell", "headline_links": [{"type": "Concept", "name": "functional_programming"}], "implementations": [{"type": "Implementation", "name": "dph"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskell"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "hxtPickler"}, {"type": "Implementation", "name": "mvar"}, {"type": "Implementation", "name": "parsec"}, {"type": "Implementation", "name": "syb"}, {"type": "Implementation", "name": "tmvar"}, {"type": "Implementation", "name": "writerMonad"}, {"type": "Implementation", "name": "wxHaskell"}], "headline": "An advanced purely-[[functional programming]] language", "type": "Language"}, "Cobol": {"name": "Cobol", "url": "http://101companies.org/index.php/Language:Cobol", "headline_links": [], "implementations": [{"type": "Implementation", "name": "template"}], "headline": "the programming language of choice for information systems in commerce (until recently)", "type": "Language"}, "Smalltalk": {"name": "Smalltalk", "url": "http://101companies.org/index.php/Language:Smalltalk", "headline_links": [], "implementations": [{"type": "Implementation", "name": "moose"}, {"type": "Implementation", "name": "seaside"}], "headline": "an  object-oriented, dynamically typed programming language", "type": "Language"}, "Unicode": {"name": "Unicode", "url": "http://101companies.org/index.php/Language:Unicode", "headline_links": [], "implementations": [], "headline": "", "type": "Language"}, "Java_manifest_file": {"name": "Java manifest file", "description_links": [], "url": "http://101companies.org/index.php/Language:Java manifest file", "headline_links": [], "implementations": [], "headline": "a metadata language Java", "type": "Language", "description": "Manifest files usually contain metadata about Java archives. It often describes the Java archive, the contents of it is used for or how it is used."}, "gzip": {"name": "gzip", "url": "http://101companies.org/index.php/Language:gzip", "headline_links": [], "implementations": [], "headline": "An archive file format", "type": "Language"}, "xjc_POJOs": {"name": "xjc POJOs", "url": "http://101companies.org/index.php/Language:xjc POJOs", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Technology", "name": "xjc"}], "implementations": [], "headline": "a sub-language of [[Language:Java]] that is generated by [[Technology:xjc]]", "type": "Language"}, "PHP": {"name": "PHP", "description_links": [{"type": "Concept", "name": "serverADASHside_scripting"}, {"type": "Page", "name": "scripting_language"}, {"type": "Language", "name": "C"}, {"type": "Language", "name": "CAPLUSAPLUS"}, {"type": "Language", "name": "Perl"}, {"type": "Language", "name": "Java"}, {"type": "Page", "name": "Scripting_language"}], "url": "http://101companies.org/index.php/Language:PHP", "headline_links": [{"type": "Page", "name": "scripting_language"}, {"type": "Concept", "name": "serverADASHside_scripting"}], "implementations": [{"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "zend"}], "headline": "A [[:Category:scripting language]] for [[server-side scripting]]", "type": "Language", "description": "PHP is a [[server-side scripting|server-side]] [[:Category:scripting language]] with conformities to [[Language:C]], [[Language:C++|C++]], [[Language:Perl]] and [[Language:Java]]\n\n[[Category:Scripting language]]"}, "ASCII": {"name": "ASCII", "url": "http://101companies.org/index.php/Language:ASCII", "headline_links": [], "implementations": [], "headline": "", "type": "Language"}, "PNG": {"name": "PNG", "description_links": [], "url": "http://101companies.org/index.php/Language:PNG", "headline_links": [], "implementations": [], "headline": "A image language", "type": "Language", "description": "The Portable Networks Graphic is a bitmap based image file format. It supports alpha transparency and compression. Today, it is a widely used format in the internet."}}, "Implementation": {"jgralab": {"usage_links": [], "motivation": "TGraphs are typed, attributed, ordered, and directed graphs. TGraphs can be maintained in a repository and programmatically processed. One can clearly use TGraphs to represent companies. In fact, a TGraphs schema defines the structure of companies. One can then use supplementary languages and technologies to query and transform such graphs so that typical operations on companies are implemented. In particular, [[Technology:JGraLab]] supports Java-class generation from a TGraphs schema, and query evaluation with [[Language:GReQL]] on TGraphs. Transformations can be performed with [[Language:GReTL]] or ''plain'' Java based on the schema-derived API.", "name": "jgralab", "url": "http://101companies.org/index.php/101implementation:jgralab", "headline_links": [{"type": "Language", "name": "TGraphs"}, {"type": "Technology", "name": "JGraLab"}, {"type": "Language", "name": "Java"}], "architecture_links": [], "languages": [{"type": "Language", "name": "TGraphs"}, {"type": "Language", "name": "GReQL"}, {"type": "Language", "name": "GReTL"}, {"type": "Language", "name": "Java"}], "headline": "use [[Language:TGraphs]] with [[Technology:JGraLab]] in [[Language:Java]]", "architecture": "The file ''101companies-schema.xmi'' is the schema TGraph that represents the data\nstructure for companies. This file was exported from the IBM Rational Software Architect (RSA) tool and is based on a simple UML class diagram. The file ''101companies-schema.pdf'' illustrates the UML class diagram that was modeled to represent the schema. The file ''101companies-schema.emx'' is the original IBM RSA model file. Once generated, the file ''101companies-schema.tg''\n\nThe jgralab.jar contains the core technology for creating and operating on TGraphs. It also contains the facilities for using GReQL. The gretl.jar contains GReTL for modifying TGraphs.\n\nPackage ''src.de.uni_koblenz.oneoonecompanies'' contains a programmer-defined class ''CompanyServices'' that provides an API for several operations on TGraphs. Packages ''src.de.uni_koblenz.oneoonecompanies.schema'' and ''...schema.impl.std'' contain schema-derived interfaces and classes for companies.", "usage": "* The implementation is provided as an Eclipse project.\n* Run ''build.xml'' with ant to generate schema-derived classes and interfaces. \n* There are tests in package ''...tests''.\n** Run JUnit test ''Serialization'' to exercise serialization.\n** Run JUnit test ''Operations'' to exercise the basic operations.\n** Run main method of ''Visualization'' to visualize the company graph.\n\nPlease note: Upon initial checkout and whenever the TGraphs schema ''101companies-schema.xmi''\nis changed, then code generation must be re-executed. To this end, run ''ant'' on the included \n''build.xml'' file from the command line or from within Eclipse. This process re-generates \nall types in the packages ''...schema'' and ''...schema.impl.std''.  These packages provide\nthe API for ''CompanyServices''.", "technologies": [{"type": "Technology", "name": "JGraLab"}, {"type": "Technology", "name": "GReTL"}, {"type": "Technology", "name": "GraphViz"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "JGraLab"}, {"type": "Language", "name": "GReQL"}, {"type": "Language", "name": "GReTL"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "jqueryDom": {"usage_links": [], "motivation": "jQuery is a library for DOM manipulation in Javascript. The DOM is a tree-structured view of a HTML page and jQuery allows programming this tree with a \"select and manipulate\" style. Term-rewriting is a style of programming which adopts a \"traverse and match\" approach. Rules are written which fire on any matching value and all values in the program are checked against that rule during a traversal of data. While \"select and manipulate\" is not quite the same as \"traverse and match\" style, the two overlap considerably.  This 101Companies implementation aims to demonstrate that overlap by using jQuery/DOM for a task which is very well suited to term-rewriting.", "name": "jqueryDom", "illustration_links": [{"type": "Page", "name": "ASLASHASLASHmattrADOTnetADOTauASLASHarticlesASLASH101jqueryASLASH"}], "url": "http://101companies.org/index.php/101implementation:jqueryDom", "headline_links": [], "architecture_links": [], "illustration": "A commentry on the implementation is online at [[http://mattr.net.au/articles/101jquery/]].", "languages": [], "headline": "Demonstrate a term-rewriting style of programmnig using jQuery, JavaScript and the DOM", "architecture": "The entire program is in one HTML file.  Static HTML is used to set up an initial state and Javascript does the rest.", "usage": "Open the <tt>101jquery.html</tt> file in your web browser (development is done in Safari4+ but the code works in many browsers), this sets up the static data and registers the javascript code to certain events.  The data is displayed as a series of nested boxes.  You can use the buttons at the top of the page to perform calculations on the data.  Calculations which generate a mega-company will replace the existing data with the result of the computation, and you will see the results on the page.  Refresh the page in your browser to return to the initial state.", "technologies": [], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "StructureADASHdriven_query"}]}, "javaSyb": {"usage_links": [], "motivation": "When implementing operations for totaling or cutting salaries in a regular object-oriented fashion (such as in the case of [[101implementation:javaComposition]]), it occurs that the implementations are unnecessarily concerned with the detailed object model. In contrast, some XML-based implementations (such as in the case of [[101implementation:javaDom]]) are much more concise because they can leverage extra query facilities, in fact, axes, such as the descendants axis of XPath. The [[SYB]] style of generic programming also provides such conciseness on the grounds of functional programming idioms. In particular, queries and transformations are supported by customizable traversal schemes.  Conceptually, these are higher-order functions that are to be parametrized by essential, problem-specific first-order functions. The present implementation applies SYB to Java. The implementation includes a simple [[SYB]]-style library for object traversals. The library relies on reflection, in fact, introspection--as provided by Java's reflection approach.", "name": "javaSyb", "headline_links": [{"type": "Concept", "name": "SYB"}], "url": "http://101companies.org/index.php/101implementation:javaSyb", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}], "architecture_links": [{"type": "Implementation", "name": "javaComposition"}, {"type": "Implementation", "name": "javaComposition"}], "illustration": "Here is the complete implementation of [[101feature:Type-driven transformation]].\n\n<syntaxhighlight lang=\"java\">\npublic class Cut {\n\n\tpublic static void cut(Company c) {\n\t\teverywhere(orIdentity(updateSalary())).apply(c);\n\t}\t\n\t\n\tpublic static Action<Employee> updateSalary() {\n\t\treturn new Action<Employee>() {\n\t\t\tpublic void apply(Employee x) {\n\t\t\t\tx.setSalary(x.getSalary() / 2);\n\t\t\t}\n\t\t};\n\t}\n}\n</syntaxhighlight>\nThat is, we leverage the ''everywhere'' scheme of transformation which attempts to apply an argument transformation to each and every (sub-) object. The argument transformation is essentially a void method, but it is rendered here as an instance of a designated ''Action'' type.", "languages": [{"type": "Language", "name": "Java"}], "headline": "exercise [[SYB]]-style generic programming with reflection in Java", "architecture": "* Package ''javaf.prelude'' defines some basic function / action types that are needed for 101companies example.\n* Package ''javaf.syb'' defines the query and transformation schemes needed. This is the cool code!\n* Package ''org.softlang.company'' hosts an object model for companies; adopted from [[101implementation:javaComposition]].\n* Operations are not defined as instance methods on the object model.\n* Package ''org.softlang.features'' totals and cuts salaries in SYB style.\n* File ''sampleCompany.ser'' is a serialized sample company; adopted from [[101implementation:javaComposition]].\n* Package ''org.softlang.tests'' contains JUnit tests; see below.", "issues_links": [], "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise some operations including basic features.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "javaComposition"}, {"type": "Implementation", "name": "javaDom"}, {"type": "Concept", "name": "SYB"}, {"type": "Concept", "name": "SYB"}], "issues": "Naturally, any approach which uses reflection so heavily for data access \nhas inferior performance compared to approaches with more direct data access.\nThere are generative approaches that provide similar programming convenience\nwhile avoiding indeed reflection.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}]}, "gwtTree": {"usage_links": [{"type": "Page", "name": "101implementation"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "GWT"}, {"type": "Page", "name": "web_application"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Page", "name": "Web_application"}], "motivation": "[[Technology:GWT]] is a framework for creating [[Language:JavaScript]] [[:Category:Web application|web applications]] with [[Ajax]] support in [[Language:Java]]. Thereby, the complete JavaScript code is generated out of the Java code. The result is a complete [[Client-server architecture|client-server-based]] web application with a tree based [[GUI]]. Additionaly, the implementation extends the basic [[101implementation:gwt]] adding the [[101feature:Attribute editing]] and [[101feature:Structural editing]].", "name": "gwtTree", "illustration_links": [{"type": "Implementation", "name": "gwt"}, {"type": "Feature", "name": "Exploration"}, {"type": "Technology", "name": "GWT"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "Client"}, {"type": "Concept", "name": "Asynchronous_communication"}, {"type": "Page", "name": "Client"}, {"type": "Page", "name": "Server"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "Server"}], "url": "http://101companies.org/index.php/101implementation:gwtTree", "headline_links": [{"type": "Feature", "name": "Exploration"}, {"type": "Concept", "name": "web_programming"}, {"type": "Technology", "name": "GWT"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Page", "name": "user_interface"}, {"type": "Concept", "name": "asynchronous_communication"}, {"type": "Page", "name": "Serialization"}, {"type": "Concept", "name": "GUI"}], "illustration": "The main difference to the [[101implementation:gwt]] implementation is the improvement of the [[101feature:Exploration]]. Hence, the focus of this section is the development of the GUI and the implementation of the new features.\n\n=== GUI implementation ===\n\nThe supervising component of the GUI is the parent class implemented in [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. This component manages the visibility of the three panels [this!!src/org/softlang/client/CompanyPanel.java CompanyPanel.java], [this!!src/org/softlang/client/DepartmentPanel.java DepartmentPanel.java] and [this!!src/org/softlang/client/EmployeePanel.java EmployeePanel.java] and, additionaly, contains the panel [this!!src/org/softlang/client/TreePanel.java TreePanel.java]. The method <syntaxhighlight lang=\"java\" enclose=\"none\">onModuleLoad()</syntaxhighlight> initializes all these panels on application start.\n\n==== Tree ====\n\nThe class <syntaxhighlight lang=\"java\" enclose=\"none\">Tree</syntaxhighlight>, included in [[Technology:GWT]], provides great support for a tree based view. Every tree item contains a user object with the identifier of the specific entity. The tree generation starts with the company as root:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/client/TreePanel.java\">\n...\n\nfor (CompanyItem item : info.getCompanies()) {\n\tTreeItem root = new TreeItem(item.getName());\n\troot.setUserObject(item);\n\tappendDepsAndEmps(root, item.getDepartments());\n\taddItem(root);\n}\n\n...\n</syntaxhighlight>\nFirst, the tree item for the company is generated with the name of the company. The <syntaxhighlight lang=\"java\" enclose=\"none\">setUserObject</syntaxhighlight> method adds the <syntaxhighlight lang=\"java\" enclose=\"none\">CompanyItem</syntaxhighlight> with the identifier of the company. The method <syntaxhighlight lang=\"java\" enclose=\"none\">appendDepsAndEmps</syntaxhighlight> appends all departments and employees to the company root. At last, this root is added to the tree.\n\nThe selection handler of the tree invokes the displaying of the additional informations for each entity included in the company:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/client/TreePanel.java\">\n...\n\nthis.addSelectionHandler(new SelectionHandler<TreeItem>() {\n\n\t@Override\n\tpublic void onSelection(SelectionEvent<TreeItem> event) {\n\t\tObject obj = event.getSelectedItem().getUserObject();\n\t\tif (obj instanceof CompanyItem) {\n\t\t\tTreePanel.this.main.showCompany(((CompanyItem)obj).getId());\n\t\t} else if (obj instanceof DepartmentItem) {\n\t\t\tTreePanel.this.main.showDepartment(((DepartmentItem)obj).getId());\n\t\t} else if (obj instanceof EmployeeItem) {\n\t\t\tTreePanel.this.main.showEmployee(((EmployeeItem)obj).getId());\n\t\t}\n\t}\n});\n\n...\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"java\" enclose=\"none\">TreePanel.this.main</syntaxhighlight> member provides the main class [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. There is a different method <syntaxhighlight lang=\"java\" enclose=\"none\">TreePanel.this.main.show...</syntaxhighlight> for each different entity class. This method includes the specific company, department or employee panel into the GUI and initializes it with the corresponding data.\n\n==== Panel ====\n\nThe following section illustrates the main functionalities of the department panel. This panel containes two textfields for the name and the total value and two listboxes for the parent department and the manager. These elements are encapsulated within a <syntaxhighlight lang=\"java\" enclose=\"none\">grid</syntaxhighlight>:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/client/DepartmentPanel.java\">\n...\n\nGrid grid = new Grid(4, 3);\n\n...\n\nLabel lname = new Label(\"Name:\");\nlname.setWidth(\"60px\");\n\n// add labels\ngrid.setWidget(0, 0, lname);\ngrid.setWidget(1, 0, new Label(\"Total:\"));\ngrid.setWidget(2, 0, new Label(\"Manager:\"));\ngrid.setWidget(3, 0, new Label(\"Parent:\"));\n\n// add textboxes\ngrid.setWidget(0, 1, name);\ngrid.setWidget(1, 1, total);\ngrid.setWidget(2, 1, manager);\ngrid.setWidget(3, 1, parent);\n\n...\n\nadd(grid);\n\nHorizontalPanel buttons = new HorizontalPanel();\n\n...\n\nbuttons.add(save);\nbuttons.add(cut);\nbuttons.add(delete);\n\nadd(buttons);\n\n...\n</syntaxhighlight>\nThe Grid constructor has two parameters for the table rows and columns. First, the labels are added and second, the textfields and listboxes are added. The buttons cut, save and delete are added within a seperate <syntaxhighlight lang=\"java\" enclose=\"none\">HorizontalPanel buttons</syntaxhighlight>.\n\n=== Feature implementation ===\n\nThe following part shows the implementation of the [[101feature:Type-driven transformation]] for departments. We assume, that a user has clicked on the \"Cut\" button to create a corresponding request. All [[:Category:Client|client]] side requests are handled via [[Asynchronous communication|asynchronous communication]]. First we need a connection to the server-side service:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/client/DepartmentPanel.java\">\nprivate final DepartmentServiceAsync departmentService = GWT.create(DepartmentService.class);\n</syntaxhighlight>\nThis simple initialisation provides an easy possibility to connect the [[:Category:Client|client]] to the [[:Category:Server|server]]. The next step is to create a [[101feature:Type-driven transformation]] request. We have implemented this feature with the [this!!src/org/softlang/client/interfaces DepartmentService.java] interface. By calling this method, the request is created and the corresponding [[:Category:Server|server]] side method is invoked. The two parameters of the method are in first the department identifier (\"''department''\") and in second an object for the asynchronous callback.\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/client/DepartmentPanel.java\">\ndepartmentService.cut(department, new AsyncCallback<Double>() {\n\n\t// If the server responds an error, this method is invoked.\n\t@Override\n\tpublic void onFailure(Throwable caught) {\n\t\tWindow.alert(caught.getMessage());\n\t}\n\n\t// If the request is successfully executed on server side, this method is invoked with a new total value as parameter.\n\t@Override\n\tpublic void onSuccess(Double result) {\n\t\tDepartmentPanel.this.total.setText(Double.toString(result));\n\t}\n});\n</syntaxhighlight>\nIf the request fails, the ''onFailure'' method simply returns an adequate error message. If the request succeeds, the server returns the new total value for the department. The server side request handler is implemented as a method:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/server/DepartmentServiceImpl.java\">\n\t@Override\n\tpublic double cut(Integer id) {\n\t\t// This statement loads the department with the given id.\n\t\tDepartment department = CompanyApp.getInstance().getDepartments().get(id);\n\t\t\n\t\t// The department gets cutted.\n\t\tdepartment.cut();\n\t\t\n\t\t// The new total value for the department is returned.\n\t\treturn department.total();\n\t}\n</syntaxhighlight>\nThis method first calls amethod cut for the specific department and then returns the new total value to the client. The method for one department is implemented the following way:\n\n<syntaxhighlight lang=\"java\" source=\"gwtTree/src/org/softlang/server/company/Department.java\">\npublic class Department implements Parent {\n\t\n\t// Members\n\tprivate int id;\n\tprivate String name;\n\tprivate List<Department> departments;\n\tprivate List<Employee> employees;\n\tprivate Parent parent;\n\n\t...\n\n\t// This method cuts the salary of all contained employees and all contained subdepartments.\n\tpublic void cut() {\n\t\tfor (Employee employee : employees) {\n\t\t\t// The employees salary is devided by 2.\n\t\t\temployee.cut();\n\t\t}\n\t\tfor (Department department : departments) {\n\t\t\t// The subdepartments are cutted recursively.\n\t\t\tdepartment.cut();\n\t\t}\n\t}\n\n\t...\n\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "CSS"}], "headline": "[[101feature:Exploration]] [[web programming]] with [[Technology:GWT]]", "architecture": "* The application architecture is devided into client and server packages: [this!!src/org/softlang/client org.softlang.client] and [this!!src/org/softlang/server org.softlang.server]. While the server package contains all relevant data for the representation of the [[101feature:Tree structure|company]], the client package contains all relevant informations to generate a [[:Category:user interface]].\n* The interfaces for [[asynchronous communication]] between client and server are defined in [this!!src/org/softlang/client/interfaces org.softlang.client.interfaces]. These interfaces are also implemented by the service classes of the server. \n* The communication between server and client is provided with [[:Category:Serialization|serialized]] classes, which can be interpreted by the client implementation. Therefore, we have two classes for each company, department and employee to submit the data from the server to the client. The first class, provided in [this!!src/org/softlang/client/guiinfo org.softlang.client.guiinfo], delivers the data needed for the whole set of information for an entity like name, address, salary and parent for a given employee. The second class, provided in [this!!src/org/softlang/client/guiinfo/tree org.softlang.client.guiinfo.tree], delivers the data needed for generating a tree-based [[GUI]].\n* The GUI is divided into panels for each concern. They are located in [this!!src/org/softlang/client org.softlang.client]. The panels are initialized in the class [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. The panels [this!!src/org/softlang/client/CompanyPanel.java CompanyPanel.java], [this!!src/org/softlang/client/DepartmentPanel.java DepartmentPanel.java] and [this!!src/org/softlang/client/EmployeePanel.java EmployeePanel.java] are exchangeable with each other, while the panels [this!!src/org/softlang/client/TreePanel.java TreePanel.java] and the [this!!src/org/softlang/client/ButtonPanel.java Buttonpanel.java] are always visible.", "usage": "The [[:Category:101implementation|implementation]] is created with [[Technology:Eclipse]] (3.7/Indigo) and the [[Technology:GWT]]-plugin (Version 2.5). If you want to compile the code, you need these versions to run it safely. You can get them at:\n\n* [http://www.eclipse.org/downloads/ Eclipse]\n* [http://code.google.com/intl/de-DE/eclipse/docs/download.html GWT]\n\nAfter installation and start, simply open this [[:Category:web application]] as project in Eclipse:\n\n* Please clean up (Project -> Clean...) the project before running.\n* Right-click on the project, left-click on \"Run As\" and left-click on \"Web-application\".\n* Visit http://127.0.0.1:8888/GwtTree.html?gwt.codesvr=127.0.0.1:9997\n\nIf you want to recompile it, please end the old server-process by terminating the process in the [[Technology:Eclipse]] console first.\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "GWT"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "GWT"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Web_application"}, {"type": "Concept", "name": "Ajax"}, {"type": "Language", "name": "Java"}, {"type": "Concept", "name": "ClientADASHserver_architecture"}, {"type": "Concept", "name": "GUI"}, {"type": "Implementation", "name": "gwt"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "jdom": {"usage_links": [], "motivation": "See [[101implementation:dom]] for a general motivation for exercising\n[[in-memory XML processing]]. The present implementation simply exercises\nyet another DOM-like API.", "name": "jdom", "url": "http://101companies.org/index.php/101implementation:jdom", "headline_links": [{"type": "Concept", "name": "inADASHmemory_XML_processing"}, {"type": "Technology", "name": "JDOM"}, {"type": "Language", "name": "Java"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}], "headline": "Exercise [[in-memory XML processing]] with [[Technology:JDOM]] in [[Language:Java]]", "usage": "* The implementation is provided as an Eclipse project.\n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available through class ''pkg101.Tests''.", "technologies": [{"type": "Technology", "name": "JDOM"}, {"type": "Technology", "name": "Eclipse"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "dom"}, {"type": "Concept", "name": "inADASHmemory_XML_processing"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "jaxbExtension": {"usage_links": [{"type": "Implementation", "name": "jaxbComposition"}], "motivation": "See [[101implementation:jaxbComposition]] for the overall motivation of exercising [[Technology:JAXB]] and for arguably a simple baseline of a schema and corresponding schema-derived classes. The present implementation represents an attempt to model different kinds of subunits of department (i.e., sub-departments and employees) as subtypes of a common supertype of subunits, where subtyping is meant here in the sense of XSD's type extension mechanism. The result is rather complex at both ends.", "name": "jaxbExtension", "url": "http://101companies.org/index.php/101implementation:jaxbExtension", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XSD"}, {"type": "Technology", "name": "JAXB"}], "architecture_links": [{"type": "Implementation", "name": "jaxbComposition"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "Java"}], "headline": "[[Object/XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]", "architecture": "See [[101implementation:jaxbComposition]].", "usage": "See [[101implementation:jaxbComposition]].", "technologies": [{"type": "Technology", "name": "JAXB"}, {"type": "Technology", "name": "xjc"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "jaxbComposition"}, {"type": "Technology", "name": "JAXB"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "xsdDataSet": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "X/O mapping within the .NET platform is exercised. This is a variation on [[101implementation:xsdClasses]]; we generate typed DataSets as opposed to classes for plain objects.", "name": "xsdDataSet", "url": "http://101companies.org/index.php/101implementation:xsdDataSet", "headline_links": [{"type": "Technology", "name": "xsdADOTexe"}], "architecture_links": [{"type": "Implementation", "name": "xsdClasses"}], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "X/O/R mapping with [[Technology:xsd.exe]] and strongly typed DataSets", "architecture": "See [[101implementation:xsdClasses]].", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project file. The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).\nNunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.\n\nThe following command should be used if one wants to re-generate C# sources from xsd file: xsd Company.xsd /dataset /out:../", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "xsdClasses"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "kiama": {"usage_links": [], "motivation": "Kiama provides several advanced programming concepts:\ncontext-sensitive attribute equations, circular attribute equations,\nrewrite rules and higher-order rewriting strategies.  The present\nimplementation puts to work some of them for the benefit of a\ndeclarative and concise implementation of the 101companies system.", "name": "kiama", "url": "http://101companies.org/index.php/101implementation:kiama", "headline_links": [], "languages": [{"type": "Language", "name": "Scala"}], "headline": "demonstrate Kiama", "usage": "Use the simple-build-tool to build: sbt script for Unix and MacOSX and\nsbt.bat script for Windows.\n\n(One time only) Download Scala compiler and needed libraries:\n\n<pre>\n$ ./sbt update\n</pre>\n\nThis downloads and installs the relevant jars in your project, so you\nneed to be on the net for it to work. \n\nThe remaining steps can be performed without a net connection.\n\nTo compile the project (if necessary) and run the main program:\n\n<pre>\n$ ./sbt run\n399747.0\n199873.5\n3\n</pre>\n\nTo run the tests with logging:\n\n<pre>\n$ ./sbt info test\n</pre>", "technologies": [{"type": "Technology", "name": "Kiama"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Global_invariant"}]}, "csharp": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "Basic style of [[:Category:OO programming]] is exercised. The C# type system is used to create an in-memory representation, in fact, an [[object model]]  for companies, departments, and employees. There is also an\nextra base class for persons from which employees are derived, thereby illustrating [[class inheritance]]. Operations on companies are implemented as [[Category:instance method]]s. XML-based serialization is immediately available for all public [[Technology:.NET]] classes implying an implementation of [[101feature:Serialization]].", "name": "csharp", "url": "http://101companies.org/index.php/101implementation:csharp", "headline_links": [{"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "ADOTNET"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "a simple implementation in [[Language:CSharp|C#]] for the [[Technology:.NET]] Framework", "architecture": "C# object-oriented representation of 101companies model is located in\nthe ''CompanyModel folder''. It contains classes with required\nproperties and methods (features implementations).\n\n''Tests'' folder contains:\n* ''FeaturesTest'' class which covers test cases for the features: [[:101feature:Type-driven query|Total]], [[:101feature:Type-driven transformation|Cut]], [[:101feature:Structure-driven query|Depth]].\n* ''SerializationTests'' class which covers test cases for de-/serialization.\n\nAlso, helpers for serialization and building the in-memory model for the meganalysis company are implemented.", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project\nfile. The project itself is a class-library and compiles into a\nDLL. To run a project you must execute at least one unit test (or all\nat once). The Nunit GUI could be used for executing the unit tests\nconveniently.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "Visual_Studio"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "OO_programming"}, {"type": "Concept", "name": "object_model"}, {"type": "Concept", "name": "class_inheritance"}, {"type": "Page", "name": "instance_method"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Feature", "name": "Serialization"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Serialization"}]}, "jaxbComposition": {"usage_links": [], "motivation": "[[Language:XML]] import and export is supported for a Java-based implementation by means of O/X mapping. The primary data model for companies is an XML schema. The schema compiler [[Technology:xjc]] of [[Technology:JAXB]] is used to generate Java classes from the schema. In this manner, operations on an XML representation of companies can be implemented in near-to-regular OO fashion while using a problem-specific object model. In different terms, one can carry out [[:Category:XML processing]] while essentially staying in the technological space of [[objectware]]. It is insightful to compare XML schema and schema-derived classes. The XML schema is defined in a manner that the resulting object model systematically leverages [[object composition]] and no [[class inheritance]]. In fact, the schema-derived classes are very similar to a regular OO design; see \n[[101implementation:javaComposition]]. It is important to note that the operations on companies are not implemented as [[:Category:instance method]]s since this would imply modification of schema-derived classes---unless advanced  modularization mechanisms were leveraged. Instead, the operations are implemented as [[:Category:static method]]s in non-schema-derived classes.", "name": "jaxbComposition", "illustration_links": [{"type": "Concept", "name": "POJO"}, {"type": "Page", "name": "annotation"}, {"type": "Concept", "name": "SchemaADASHbased_validation"}, {"type": "Page", "name": "static_method"}], "url": "http://101companies.org/index.php/101implementation:jaxbComposition", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XSD"}, {"type": "Technology", "name": "JAXB"}], "architecture_links": [{"type": "Concept", "name": "schemaADASHfirst_mapping"}, {"type": "Technology", "name": "xjc"}, {"type": "Technology", "name": "JAXB"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "The following XML schema fragment shows the element declaration for departments:\n\n<syntaxhighlight lang=\"xml\">\n <xs:element name=\"department\">\n  <xs:complexType>\n   <xs:sequence>\n    <xs:element ref=\"name\"/>\n    <xs:element name=\"manager\" type=\"employee\"/>\n    <xs:element ref=\"department\" maxOccurs=\"unbounded\" minOccurs=\"0\"/>\n    <xs:element name=\"employee\"\n        type=\"employee\" maxOccurs=\"unbounded\" minOccurs=\"0\"/>\n   </xs:sequence>\n  </xs:complexType>\n </xs:element>\t\n</syntaxhighlight>\nThat is, department elements line up children elements for name, manager, sub-departments,\nand employees. There is an XSD type ''employee'' which is used in two local element\ndeclarations: one for managers; another one for regular employees. The\nschema-derived class for departments looks as follows:\n\n<syntaxhighlight lang=\"java\">\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\",\n  propOrder = { \"name\", \"manager\", \"department\", \"employee\" })\n@XmlRootElement(name = \"department\")\npublic class Department {\n    @XmlElement(required = true)\n    protected String name;\n    @XmlElement(required = true)\n    protected Employee manager;\n    protected List<Department> department;\n    protected List<Employee> employee;\n    // Getters and setters omitted\n}\n</syntaxhighlight>\nThis class essentially models [[POJO]]s for departments in a way similar to\nregular OO programming. However, the schema compiler injects a number of [[:Category:annotation]]s \ninto the schema-derived classes so that sufficient information is tracked for serialization,\nand, in fact, XML [[Schema-based validation]]. For instance, the fields for name and manager are annotated with \n''required=true'', thereby expressing that a valid department object must specify a name\nand a manager. On top of the schema-derived classes, the operation ''cut'' can be implemented\nwith [[:Category:static method]]s as follows: \n\n<syntaxhighlight lang=\"java\">\npublic class Cut {\n  public static void cut(Company c) {\n    for (Department d : c.getDepartment())\n      cut(d);\n  }\n  public static void cut(Department d) {\n    cut(d.getManager());\n    for (Department s : d.getDepartment())\n      cut(s);\n    for (Employee e : d.getEmployee())\n      cut(e);\n  }\n  public static void cut(Employee e) {\n    e.setSalary(e.getSalary() / 2);\n  }\t\t\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "JAXB_annotations"}, {"type": "Language", "name": "xjc_POJOs"}], "headline": "[[Object/XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]", "architecture": "''Company.xsd'' is the schema for [[schema-first mapping]].\n''Makefile'' shows how to (trivially) invoke the schema compiler [[Technology:xjc]] \nof [[Technology:JAXB]]. Package ''org.softlang.company'' hosts all schema-derived\nclasses and interfaces. Package ''org.softlang.features'' hosts \nimplementations for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] as well as\nsome boilerplate code for importing and exporting XML documents. Package ''org.softlang.tests''\nhosts JUnit tests.", "usage": "* The implementation is provided as an Eclipse project.\n* The schema-derived classes are included into the repository.\n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in package ''org.softlang.tests''.\n* If you want to regenerate classes from the scheme, see the ''Makefile''.\n\nHint: if you need to add schema files to a project so that XML files are \nautomatically validated on the grounds of their namespace, as it is useful for\nthe schema Company.xsd, which is part of the present implementation, then \nyou need to add the files via Eclipse preferences -> XML -> XML catalog.", "technologies": [{"type": "Technology", "name": "JAXB"}, {"type": "Technology", "name": "xjc"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "GNU_make"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "XML"}, {"type": "Technology", "name": "xjc"}, {"type": "Technology", "name": "JAXB"}, {"type": "Page", "name": "XML_processing"}, {"type": "Concept", "name": "objectware"}, {"type": "Concept", "name": "object_composition"}, {"type": "Concept", "name": "class_inheritance"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Page", "name": "instance_method"}, {"type": "Page", "name": "static_method"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "javaTree": {"usage_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "Eclipse"}], "motivation": "''This project was created at the PTT-Hackathon 2011.''\n\nThe tree-based view allows the user to get a large overview of the hierarchy of the [[101companies:System]]. The tree allows easy navigation within this hierarchy. The tree also provides quick adjustment on changes of the [[101feature:Tree structure|company]] data.", "name": "javaTree", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Implementation", "name": "swing"}], "url": "http://101companies.org/index.php/101implementation:javaTree", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Page", "name": "MVC"}, {"type": "Page", "name": "MVC"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}], "illustration": "The main features [[101feature:Type-driven transformation]], [[101feature:Type-driven query]] and [[101feature:Tree structure]] are adopted from [[101implementation:javaInheritance]]. The main difference to [[101implementation:swing]] is, that the navigation is simplified with a tree view. This tree has to be initialized recursively with the company as root:\n\n<syntaxhighlight lang=\"java\">\n/*\n * This method initializes the tree-view.\n */\nprivate Component createTree() {\n\tCompany company = model.getCompany(); // get company data\n\n\tDefaultMutableTreeNode root = new DefaultMutableTreeNode(company); // create root element\n\n\tfor (Department d : company.getDepts()) { // run through the departments and add them to the root\n\t\troot.add(addDepartmentNode(d)); // create department subtrees\n\t}\n\n\ttree = new JTree(root);\n\n\treturn new JScrollPane(tree); // return the JTree within a scroll pane\n}\n</syntaxhighlight>\nThe department subtrees are created in a similar way.", "languages": [{"type": "Language", "name": "Java"}], "headline": "Tree based implementation in [[Language:Java]].", "architecture": "The main architecture of this project is [[Architecture:MVC|MVC]]. The class [this!!org/softlang/tests/Interaction.java Interaction.java] starts the application and creates the main parts of the [[Architecture:MVC|MVC]]-structure: The [this!!org/softlang/swing/view/MainView.java MainView.java] creates the tree and provides a container for the single views of the company, departments and employees. These views are initialized by the [this!!org/softlang/swing/controller/Controller.java Controller.java] while the data and the selected element of the tree is stored in the [this!!org/softlang/swing/model/Model.java Model.java]. The main features [[101feature:Type-driven transformation]] and [[101feature:Type-driven query]] can be found in ''org.softlang.operations'' while the classes for the data structure are in ''org.softlang.company''.", "usage": "* This project is provided as an [[Technology:Eclipse]] project.\n* After importing the project into [[Technology:Eclipse]] as ''Java Project'', just run Interaction.java as ''Java Application''.", "technologies": [{"type": "Technology", "name": "Swing"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "System"}, {"type": "Feature", "name": "Tree_structure"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}]}, "antlrTrees": {"usage_links": [{"type": "Implementation", "name": "antlrAcceptor"}], "motivation": "Both concrete and abstract syntax is defined for companies.\nTo this end, we use an ANTLR-based parser description.\nThe resulting context-free parsing implements [[101feature:Data import]].\nThe abstract syntax is based on ANTLR's homogeneous tree format.\nA constructed tree can be walked with an ANTLR tree grammar to total all salaries or to cut salaries in half.", "name": "antlrTrees", "url": "http://101companies.org/index.php/101implementation:antlrTrees", "headline_links": [{"type": "Technology", "name": "ANTLR"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "Parsing text to trees and walk them with [[Technology:ANTLR]]", "usage": "See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.", "technologies": [{"type": "Technology", "name": "ANTLR"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Data_import"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}]}, "html5local": {"usage_links": [{"type": "Page", "name": "Web_browser"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "This implementation illustrates the use of [[client]] side data storage within a [[web application]]. Specifically, HTML5 offers a [[Language:JavaScript]] [[API]] for [[Technology:Web storage]] to permanently store data as ''key-value pairs'' on the [[client]] side. While this implementation supports session-independent storage, there is a similar implementation [[101implementation:html5session]] which supports session storage instead.", "name": "html5local", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Page", "name": "Web_application"}, {"type": "Language", "name": "JavaScript"}, {"type": "Technology", "name": "Web_storage"}, {"type": "Page", "name": "API"}, {"type": "Implementation", "name": "html5session"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "JSON"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Concept", "name": "Method"}, {"type": "Concept", "name": "GUI"}, {"type": "Language", "name": "HTML"}, {"type": "Concept", "name": "GUI"}], "url": "http://101companies.org/index.php/101implementation:html5local", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "HTML5"}, {"type": "Technology", "name": "Web_storage"}], "architecture_links": [{"type": "Language", "name": "HTML"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Language", "name": "JavaScript"}, {"type": "Concept", "name": "MVC"}, {"type": "Concept", "name": "GUI"}, {"type": "Page", "name": "101feature"}, {"type": "Page", "name": "Client"}, {"type": "Technology", "name": "Web_storage"}], "illustration": "The illustration section is devided into two parts. The first section shows the method of data storage, the second section shows the implementation of the [[101feature:Type-driven query]]. Most of the [[:Category:Web application|web application]] is written in [[Language:JavaScript]].\n\n=== Web storage ===\n\nThe [[Technology:Web storage]] [[:Category:API]] provides the <syntaxhighlight lang=\"javascript\" enclose=\"none\">localStorage</syntaxhighlight> and the <syntaxhighlight lang=\"javascript\" enclose=\"none\">sessionStorage</syntaxhighlight> objects. This application uses <syntaxhighlight lang=\"javascript\" enclose=\"none\">localStorage</syntaxhighlight>, at which the use of <syntaxhighlight lang=\"javascript\" enclose=\"none\">sessionStorage</syntaxhighlight> in [[101implementation:html5session]] is completely the same. We initialize our own variable <syntaxhighlight lang=\"javascript\" enclose=\"none\">storageObject</syntaxhighlight> in order to keep the possibility for a simple exchange of the storage principe:\n\n<syntaxhighlight lang=\"javascript\">\n    var storageObject = localStorage;\n</syntaxhighlight>\nThe value of the key-value pairs provided by web storage have to be primitive data types or a string. Since [[Language:JavaScript]] provides a great [[Language:JSON]] support, we store the [[101feature:Tree structure|company]] data as  JSON encoded string within the web storage. But first we have to create the company objects. Since JavaScript does not provide classes, there is a possibility to emulate classes with functions. The example shows one of these emulated classes for the company:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5local/company.js\">\nfunction Company(id, name) {\n\tthis.id = id;\n\tthis.name = name;\n\tthis.departments = new Array();\n}\n</syntaxhighlight>\nAfter providing the functions for each company, department and employee, we are now able to instantiate the company structure:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5local/company.js\">\nfunction loadData(reset) {\n\t// If the company does not exist, it must be created locally.\n\tif (storageObject.company == null || reset == true) {\n\t\t// create company ...\n\t\tvar company = new Company(0, \"Meganalysis\");\n\t\n\t\t...\n\n\t\t// save company\n\t\tstorageObject.setItem('company', JSON.stringify(company));\n\n\t}\n\treturn JSON.parse(storageObject.getItem('company'));\n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"javascript\" enclose=\"none\">setItem('company', JSON.stringify(company))</syntaxhighlight> call encodes the company as JSON string and stores it to a variable <syntaxhighlight lang=\"javascript\" enclose=\"none\">company</syntaxhighlight> within our <syntaxhighlight lang=\"javascript\" enclose=\"none\">storageObject</syntaxhighlight>. If this <syntaxhighlight lang=\"javascript\" enclose=\"none\">company</syntaxhighlight> variable already exists, the method simply returns the stored company. To get the company string, the <syntaxhighlight lang=\"javascript\" enclose=\"none\">getItem('company')</syntaxhighlight> [[Method|method]] has to be invoked on the <syntaxhighlight lang=\"javascript\" enclose=\"none\">storageObject</syntaxhighlight>.\n\n=== Feature implementation ===\n\nThe data-structure is a tree, which can be traversed to cut salaries or determine the total of the whole company or individual departments. The following example shows the method for totalling companies with the help of totalling departments:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5local/companyModel.js\">\n// This method calculates the total for a company.\nfunction totalCompany(company) {\n \tvar total = 0;\n \tvar len = company.departments.length;\n \tfor (var i = 0; i < len; i++) {\n \t \t// To get the total for the company, this method calls the total method for departments and adds the results.\n \t\ttotal += totalDepartment(company.departments[i]);\n \t}\n \treturn total;\n}\n\n// This method calculates the total value for departments.\nfunction totalDepartment(department) {\n \tvar total = 0;\n \tvar len = department.subdepartments.length;\n \t// Here, the total values of all subdepartments are added recursively.\n \tfor (var i = 0; i < len; i++) {\n \t\ttotal += totalDepartment(department.subdepartments[i]);\n \t}\n \tvar lenEmp = department.employees.length;\n \t// Here, the salaries of all contained employees are added.\n \tfor (var i = 0; i < lenEmp; i++) {\n \t\ttotal += department.employees[i].salary;\n \t}\n \treturn total;\n}\n</syntaxhighlight>\nThe function <syntaxhighlight lang=\"javascript\" enclose=\"none\">totalCompany</syntaxhighlight> uses the function <syntaxhighlight lang=\"javascript\" enclose=\"none\">totalDepartment</syntaxhighlight>, to get the values of its subdepartments. This total values are calculated recursively.\n\n=== [[GUI]] generation ===\n\nThe [[Language:HTML]] code for the [[GUI]] is completely generated with JavaScript. The following code generates the name textfield for the company view:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5local/companyView.js\">\n...\n\n// Create a form for the company view.\nvar content = \"<form name=\\\"company\\\">\";\n\n// Create a table within the company view.\ncontent += \"<table border=0>\";\n\n// Create a table row with the name textfield and a save button.\ncontent += \"<tr><td align=\\\"right\\\">Name: </td>\";\ncontent += \"<td><input type=\\\"text\\\"\"\n\t+ \" class=\\\"text\\\" name=\\\"name\\\" value='\"\n\t+ model.headline\n\t+ \"'>\";\ncontent += \" <input type=\\\"button\\\" name=\\\"save\\\"\"\n\t+ \" class=\\\"button\\\" value=\\\"save\\\"\"\n\t+ \" onclick=\\\"controller.changeName(this.form.name.value)\\\">\"\n\t+ \"</td></tr>\";\n...\n\n// Close table and form tags.\ncontent += \"</table>\";\ncontent += \"</form>\";\n\n// Move the content to the 'content' division of the company.html file.\ndocument.querySelector('#content').innerHTML = content;\n\n...\n</syntaxhighlight>\nThe first step is to create an HTML form (<syntaxhighlight lang=\"xml\" enclose=\"none\"><form name=\"company\"></syntaxhighlight>) including the table as a grid for proper alignment of the GUI components. The table row starting with the <syntaxhighlight lang=\"xml\" enclose=\"none\"><tr></syntaxhighlight> tag contains the name label, the name textfield and the save button. The textfield (the first <syntaxhighlight lang=\"xml\" enclose=\"none\"><input ... /></syntaxhighlight>) is initialized with the value <syntaxhighlight lang=\"javascript\" enclose=\"none\">model.headline</syntaxhighlight>, which contains the name of the company. The save button (second <syntaxhighlight lang=\"xml\" enclose=\"none\"><input ... /></syntaxhighlight>) invokes the method <syntaxhighlight lang=\"javascript\" enclose=\"none\">changeName</syntaxhighlight>, where the <syntaxhighlight lang=\"javascript\" enclose=\"none\">this.form.name.value</syntaxhighlight> parameter contains the current content of the name textfield. Finally, the last allocation (<syntaxhighlight lang=\"javascript\" enclose=\"none\"> ... = content;</syntaxhighlight>) moves the generated HTML code to the ''content'' division of the document [this!!company.html].", "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "JSON"}], "headline": "[[Web programming]] based on the [[Language:HTML5]] ecosystem with local [[Technology:Web storage]]", "architecture": "All files of the application are contained in one folder:\n\n* There is an initial [[Language:HTML]] page for each company entity of the [[101feature:Tree structure|company]]: [this!!company.html], [this!!department.html] and [this!!employee.html]. The content is generated by [[Language:JavaScript]]. Both, the HTML pages and [this!!companyView.js], [this!!departmentView.js] and [this!!employeeView.js] form the view of this [[MVC]] based implementation.\n* The controller (the files [this!!companyController.js], [this!!departmentController.js] and [this!!employeeController.js]) passes the data to the model and refreshes the [[GUI]]. It is very lightweight, based on the character and limited use of the [[:Category:101feature|features]] and on the pure [[:Category:Client|client]] side implementation.\n* The model ([this!!companyModel.js], [this!!departmentModel.js], [this!!employeeModel.js]) handles the access to the [[Technology:Web storage]].\n* The company is initialized in [this!!company.js].", "usage": "* Download the complete folder content.\n* Open the local [this!!index.html] with your [[:Category:Web browser|web browser]].\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "Web_storage"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "client"}, {"type": "Concept", "name": "web_application"}, {"type": "Language", "name": "JavaScript"}, {"type": "Concept", "name": "API"}, {"type": "Technology", "name": "Web_storage"}, {"type": "Concept", "name": "client"}, {"type": "Implementation", "name": "html5session"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "gra2mol": {"usage_links": [], "motivation": "This implementation demonstrates a transformation from an input file that conforms with a grammar into a model.", "name": "gra2mol", "url": "http://101companies.org/index.php/101implementation:gra2mol", "headline_links": [], "languages": [{"type": "Language", "name": "Java"}], "headline": "Grammar to model transformation with Grammar2Model", "usage": "Steps:\n* The project should be imported into Eclipse (\"File\" -> \"Import\")\n* The project provides an Ant file called build.xml. This file can be used to apply the transformation. \n* Right click on the build.xml and select \"Run As\" -> \"1 Ant build\". This may fail the first time, but it should succeed the second time.\n\nComments:\n* In order to see the output, it may be needed to refresh the Package Explorer View in Eclipse. To do that, right click on the project and choose \"Refresh\".", "technologies": [{"type": "Technology", "name": "ANTLR"}, {"type": "Technology", "name": "EMF"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}]}, "wcfRest": {"usage_links": [], "motivation": "", "name": "wcfRest", "url": "http://101companies.org/index.php/101implementation:wcfRest", "headline_links": [{"type": "Technology", "name": "WCF"}], "architecture_links": [], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "REST-based service implemented in [[Technology:WCF]]", "architecture": "", "usage": "* Create a new web site under IIS pointing to the projects' directory. Use port 1234 for a newly created web site. Ensure you use .NET Framework 4.0 for the application pool.\n\n* By pressing F5 in VS you will get the browser opened; go to the following URL to get the full API description http://localhost:1234/CompanyService/help", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "WCF"}, {"type": "Technology", "name": "Visual_Studio"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Distribution"}]}, "happstack": {"usage_links": [], "motivation": "The implementation demonstrates [[web programming]] in [[Language:Haskell]] with the [[Technology:Happstack]] [[framework]]. The templating engine [[Technology:Heist]] for [[Language:XHTML]]\nis used for the composition of dynamic web pages. The [[101companies:System]] is implemented as a [[web application]] using a [[client-server architecture]]. The company is stored in a client-side [[cookie]]. (The server initializes the cookie with a sample company.) URLs are used to encode requests and ids of involved data. There are these requests, which essentially correspond to user actions: a user can either view a specific part of the company, save an edited part, or cut salaries in the selected scope. The part to be viewed, cut, or saved is specified by making use of a [[Zipper]]-inspired focus concept that is also leveraged by [[101implementation:wxHaskell]]. Modified data is validated. That is, when processing a save request, sent by an HTML form, the server applies various validators and potentially returns error messages, which will be displayed to the user in the [[web browser]]. As a response, the client receives HTML documents, which are composed by making use of the templating engine [[Technology:Heist]] for [[Language:XHTML]].", "name": "happstack", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:happstack", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "Happstack"}], "architecture_links": [], "illustration": "In the following we will demonstrate how a specific request is processed by the server.\n\n=== Saving an Employee ===\n\n'''Scenario:''' After requesting to view a manager the user manipulates the input fields and submits a request by clicking a save button.\nThe browser sends an HTTP-request together with a company-cookie to the server. The URL looks like this:\n\n''<nowiki>http://localhost:8000/Employee/Save/ManagerFocus%20[0]/?Name=Erik&Address=</nowiki>''\n\n''<nowiki>Utrecht&Salary=1234.0</nowiki>''\n\n==== Routing filter ====\n\nWe set up a simple HTTP server:\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Main.hs\" line>\nmain = simpleHTTP nullConf $ \n  msum [ path $ \\v -> path $ \\a -> path $ \n           \\f -> mainPart a v f\n       , serveDirectory EnableBrowsing [] \"static\"]   \n</syntaxhighlight>\nWe specify two possible server behaviours (values of <syntaxhighlight lang=\"haskell\" enclose=\"none\">ServerPartT</syntaxhighlight>) in a list, which we then apply to the <syntaxhighlight lang=\"haskell\" enclose=\"none\">MonadPlus</syntaxhighlight>-function <syntaxhighlight lang=\"haskell\" enclose=\"none\">msum</syntaxhighlight>. This function tries to run each server until one serverstart succeeds.\nThe first list element uses Happstack's <syntaxhighlight lang=\"haskell\" enclose=\"none\">path</syntaxhighlight> function to extract:\n\n* The view (here <syntaxhighlight lang=\"haskell\" enclose=\"none\">Employee</syntaxhighlight>)\n* The action (here <syntaxhighlight lang=\"haskell\" enclose=\"none\">Save</syntaxhighlight>)\n* The focus (here <syntaxhighlight lang=\"haskell\" enclose=\"none\">ManagerFocus [0]</syntaxhighlight>)\nIn case the extraction fails the server falls back to being a file server in line 4.\nIn case extraction succeeds <syntaxhighlight lang=\"haskell\" enclose=\"none\">mainPart</syntaxhighlight> is called passing the action, the view and the focus:\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Serverparts.hs\">\nmainPart :: Action -> View -> Focus -> ServerPartT IO Response\nmainPart View = viewPart\nmainPart Cut  = cutPart\nmainPart Save = savePart   \n</syntaxhighlight>\nIn this scenario <syntaxhighlight lang=\"haskell\" enclose=\"none\">mainPart</syntaxhighlight> matches on <syntaxhighlight lang=\"haskell\" enclose=\"none\">Save</syntaxhighlight> and calls \n<syntaxhighlight lang=\"haskell\" enclose=\"none\">savePart</syntaxhighlight> passing the view and the focus:\n\n==== Saving ====\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Serverparts.hs\" line>\nsavePart :: View -> Focus -> ServerPartT IO Response\nsavePart v f = do\n  s <- save\n  case s of\n    (Left errs) -> do\n      c <- readCCookie\n      displayPart v f c errs\n    (Right newc) -> displayPart v f newc []       \n    where\n      save = case v of\n        CompanyV  -> saveCompany f\n        DeptV     -> saveDepartment f\n        EmployeeV -> saveEmployee f \n</syntaxhighlight>\nThe function starts by calling a save function, which is chosen based on the given <syntaxhighlight lang=\"haskell\" enclose=\"none\">View</syntaxhighlight> value. The <syntaxhighlight lang=\"haskell\" enclose=\"none\">save</syntaxhighlight>-functions, which are all of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Focus -> ServerPartT IO (Either [(ENames,String)] Company)</syntaxhighlight> either return a list of error information or the new company. In case of errors <syntaxhighlight lang=\"haskell\" enclose=\"none\">savePart</syntaxhighlight> calls <syntaxhighlight lang=\"haskell\" enclose=\"none\">displayPart</syntaxhighlight> in line 7 passing the old company (read from the cookie) and the errors. In case of success the new company and an empty list of errors is passed to <syntaxhighlight lang=\"haskell\" enclose=\"none\">displayPart</syntaxhighlight> in line 8. \nIn this scenario  <syntaxhighlight lang=\"haskell\" enclose=\"none\">saveEmployee</syntaxhighlight> is called by <syntaxhighlight lang=\"haskell\" enclose=\"none\">savePart</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Save.hs\" line>\nsaveEmployee :: Focus -> ServerPartT IO (Either [(ENames,String)] Company)\nsaveEmployee f = do\n  c <- readCCookie\n  name <- look \"Name\"\n  address <- look \"Address\"\n  salary <- lookRead \"Salary\"\n  let newe = Employee name address salary\n  let ev = validateEmployee c f newe\n  case ev of\n    (Just errs)\n        -> return $ Left errs\n    Nothing\n        -> do\n            let newc = writeEM f c newe\n            addCookie Session $ \n              (mkCookie \"company\" (show newc))\n            return $ Right newc\n</syntaxhighlight>\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">saveEmployee</syntaxhighlight> reads the company from a cookie and extracts the request parameters from the URL in lines 3-6. These values are used to compose the new <syntaxhighlight lang=\"haskell\" enclose=\"none\">Employee</syntaxhighlight> value in line 7. \nIn line 8 this employee is then passed to the validation function <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateEmployee</syntaxhighlight> of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Company -> Focus -> a -> Maybe [(ENames,String)]</syntaxhighlight>. If the validation succeeds, <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateEmployee</syntaxhighlight> returns <syntaxhighlight lang=\"haskell\" enclose=\"none\">Nothing</syntaxhighlight>. In this case the employee is replaced within the company, which is then re-stored in the cookie and returned by the function (lines 14-16). Otherwise <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateEmployee</syntaxhighlight> returns error information, which is then also returned by <syntaxhighlight lang=\"haskell\" enclose=\"none\">saveEmployee</syntaxhighlight> in line 11.\n\n==== Validation ====\n\nThe validation functionality can be found in the ''Validators'' module:\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Validators.hs\">\nvalidateEmployee :: Validations Employee\nvalidateEmployee c f (Employee n a s) = if null vs \n                           then Nothing\n                           else Just $ concat vs \n                             where \n                               vs = catMaybes \n                                [ validateNA c f (n,a)\n                                , validateSalary c f s]\n</syntaxhighlight>\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">validateEmployee</syntaxhighlight> composes two validations (see [this!!Validators.hs] for details):\n* <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateNA</syntaxhighlight> checks whether the employee's name/address pair is unique in the company <syntaxhighlight lang=\"haskell\" enclose=\"none\">c</syntaxhighlight>.\n* <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateSalary</syntaxhighlight> checks two things regarding the employee's salary:\n** It checks whether by changing the salary the employee's department-manager still receives the highest salary within the department.\n** It checks whether the salary has a positive value.\nIn case both validations return <syntaxhighlight lang=\"haskell\" enclose=\"none\">Nothing</syntaxhighlight>, <syntaxhighlight lang=\"haskell\" enclose=\"none\">validateEmployee</syntaxhighlight> returns <syntaxhighlight lang=\"haskell\" enclose=\"none\">Nothing</syntaxhighlight>. Otherwise it returns the list of all error messages.\n\n==== Binding and Responding ====\n\nThe user might have tried to assign an invalid salary and an invalid name/address pair to the manager in question. Validation therefore would return error information. \n<syntaxhighlight lang=\"haskell\" enclose=\"none\">savePart</syntaxhighlight> would call <syntaxhighlight lang=\"haskell\" enclose=\"none\">displayPart</syntaxhighlight> passing the old company and the error messages:\n\n<syntaxhighlight lang=\"haskell\" source=\"happstack/Serverparts.hs\" line>\ndisplayPart :: View -> Focus -> Company -> [(ENames,String)] -> ServerPart Response\ndisplayPart v f c errs = do \n      td <- newTemplateDirectory' tDir $ \n              eNamesBinder errs $ binder f c $ \n                emptyTemplateState tDir\n      render td (B.pack tname)\n          where\n            binder = case v of\n              CompanyV  -> companyBinder\n              DeptV     -> departmentBinder\n              EmployeeV -> employeeBinder\n                where\n            tname = case v of\n              CompanyV  -> \"company\"\n              DeptV     -> \"department\"\n              EmployeeV -> \"employee\"\n</syntaxhighlight>\nIn lines 8-16 <syntaxhighlight lang=\"haskell\" enclose=\"none\">displayPart</syntaxhighlight> decides which template and which binder to apply by making use of a <syntaxhighlight lang=\"haskell\" enclose=\"none\">case</syntaxhighlight> expression on the given view. The binder will bind all template variables to strings or small HTML fragments (splices). After that <syntaxhighlight lang=\"haskell\" enclose=\"none\">eNamesBinder</syntaxhighlight> will bind the error messages to template variables. Both binders can be found in [this!!Binder.hs]. \nThey return a function of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Monad m => TemplateState m -> TemplateState m</syntaxhighlight>. That is, binders are state transformers for templates.\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">displayPart</syntaxhighlight> then renders the HTML document, which is sent to the client as the response in line 6.", "languages": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Web programming]] in [[Language:Haskell]] with [[Technology:Happstack]]", "architecture": "[this!!Main.hs] holds the server using various server parts in [this!!Serverparts.hs]. The actual save action is performed by functionality in [this!!Save.hs]. [this!!Binder.hs] contains functions to bind template variables. The validators can be found in [this!!Validators.hs] using helper functions hosted by [this!!Utils.hs]. The algebraic datatype for companies can be found in [this!!Company.hs], a sample company in [this!!SampleCompany.hs]. Functionality to total and cut is provided by [this!!Total.hs] and [this!!Cut.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. Various types used by the server can be found in [this!!Types.hs]. The [this!!static] folder contains the sytlesheet for the application and images, while [this!!templates] contains the (X)HTML templates.", "usage": "=== Build ===\n\nA number of cabal packages are needed:\n* happstack\n* xmlhtml\n* heist\n* happstack-heist\n\n=== Run ===\n* [this!!Main.hs] can to be consulted with runhaskell to avoid the compilation step.\nThere is a [this!!Makefile] with a target ''run'' to do this.\n* Open ''http://localhost:8000/Company/View/CompanyFocus'' to demo, starting with the root view.", "technologies": [{"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "Happstack"}, {"type": "Technology", "name": "Heist"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "web_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "Happstack"}, {"type": "Concept", "name": "framework"}, {"type": "Technology", "name": "Heist"}, {"type": "Language", "name": "XHTML"}, {"type": "Page", "name": "System"}, {"type": "Concept", "name": "web_application"}, {"type": "Concept", "name": "clientADASHserver_architecture"}, {"type": "Concept", "name": "cookie"}, {"type": "Concept", "name": "Zipper"}, {"type": "Implementation", "name": "wxHaskell"}, {"type": "Concept", "name": "web_browser"}, {"type": "Technology", "name": "Heist"}, {"type": "Language", "name": "XHTML"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Web_UI"}]}, "wxHaskell": {"usage_links": [], "motivation": "The implementation demonstrates [[GUI programming]] in [[Language:Haskell]] with [[Technology:wxHaskell]]. A simple [[GUI]] for companies is provided. The user can navigate the hierarchical company structure, cut salaries, and edit attributes such as names, addresses, and salaries. The implementation uses a [[zipper]]-inspired focus concept to enable modification of the company tree along editing in the GUI. The focus keeps track of a location in the company tree and enables read and write operations for the location.", "name": "wxHaskell", "illustration_links": [{"type": "Concept", "name": "Zipper"}], "url": "http://101companies.org/index.php/101implementation:wxHaskell", "headline_links": [{"type": "Concept", "name": "GUI_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "wxHaskell"}], "architecture_links": [], "illustration": "=== Focus datatype ===\n\nWe are using a datastructure inspired by the concept of [[Zipper|Zippers]] to specify positions of components within the company. We provide an algebraic datatype <syntaxhighlight lang=\"haskell\" enclose=\"none\">Focus</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"wxHaskell/Focus.hs\" line>\ndata Focus = \n     CompanyFocus\n   | DeptFocus [Int]\n   | ManagerFocus [Int]\n   | EmployeeFocus [Int] Int\n    deriving (Show, Read)\n</syntaxhighlight>\nWe define one constructor per company datatype and one for managers. For example to construct a focus for an employee one needs to pass:\n* A list of indexes: Starting from the company root this list is used to navigate through the departments and subdepartments to the employee's department.\n* An index: The index of this employee in the employee's department's employees list.\nOn top of this definition we provide functions to get sub and upper foci and to read and write company components (see [this!!Focus.hs] for details).\n\n=== The views ===\n\nFor each company datatype, that is <syntaxhighlight lang=\"haskell\" enclose=\"none\">Company</syntaxhighlight>, <syntaxhighlight lang=\"haskell\" enclose=\"none\">Department</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">Employee</syntaxhighlight>, [this!!Views.hs] provides a view to display the specific component including buttons to navigate and cut salaries. All of these functions are of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Frame () -> Focus -> Company -> IO ()</syntaxhighlight>. That is, given the global frame, a focus and a company these functions perform GUI actions (which are IO actions). \nIn the following we demonstrate how an employee is displayed.\n\n==== Viewing an employee ====\n\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">showEmployee</syntaxhighlight> is the view function for employees:\n\n<syntaxhighlight lang=\"haskell\" source=\"wxHaskell/Views.hs\" line>\nviewEmployee :: Frame () -> Focus -> Company -> IO ()\nviewEmployee f focus c = do\n    -- reading employee\n    let e = readEM focus c\n    -- setting up frames and panels\n    set f [ text := \"Employee \\\"\" ++ ename e ++ \"\\\"\"]\n    p <- panel f [textColor := textBlue]\n    -- boxes for name, address and salary\n    nameBox <- entry p [text := ename e]                                    \n    addressBox <- entry p [text := address e]\n    salaryBox <- entry p [text := show $ salary e]\n    -- cut button\n    cButton <- cutButton p f focus c\n    -- back button                                \n    bButton <- backButton p f focus c           \n    -- save button                                                             \n    sButton <- button  p \n          [ text := \"Save\"\n          , size := Size 50 22 \n          , on command := do { \n              newName <- get nameBox text;\n              newAddress <- get addressBox text;\n              newSalary <- get salaryBox text;\n              objectDelete p;\n              viewEmployee f focus $ \n               writeEM focus c $ \n                Employee newName newAddress $ \n                 read newSalary; }]\n    -- compose layout                                 \n    setEmployeeLayout f p sButton bButton nameBox addressBox salaryBox cButton\n</syntaxhighlight>\nIn line 4 we read the employee in question using the ''Focus'' module's function <syntaxhighlight lang=\"haskell\" enclose=\"none\">readEM</syntaxhighlight>. In lines 6-7 we set the frame title and create a new panel for this view. In lines 9-11 we create one input box per employee field. We create buttons to cut the employee's salary and to go back to the department level in lines 13-15. In lines 17-28 we set up a save button: When a user clicks the button, the name, address and salary fields are read, the panel is deleted, the employee is updated in the company and the new company is displayed. In the last line  we call <syntaxhighlight lang=\"haskell\" enclose=\"none\">setEmployeeLayout</syntaxhighlight>, which composes the layout using various layout combinators (see [this!!Views.hs] for details).\n\n=== Cutting button ===\n\nOn each view the GUI provides a button to cut all salaries: \n\n<syntaxhighlight lang=\"haskell\" source=\"wxHaskell/Views.hs\" line>\ncutButton :: Panel () -> Frame () -> Focus -> Company -> IO (Button ())\ncutButton p f focus c = \n  button p [ text := \"Cut\"      \n           , size := Size 50 22                                                                \n           , on command := do {\n                objectDelete p; \n                view f focus $ readCutWrite focus c;}]   \n</syntaxhighlight>\nWhen the user clicks the button the <syntaxhighlight lang=\"haskell\" enclose=\"none\">command</syntaxhighlight> action (lines 5-7) is executed. First the view's panel is deleted in line 6. We use <syntaxhighlight lang=\"haskell\" enclose=\"none\">readCutWrite</syntaxhighlight> to cut the company component's salaries. This function reads the component in question based on the focus, then cuts this component's salaries and replaces it in the given company. In line 7 the <syntaxhighlight lang=\"haskell\" enclose=\"none\">command</syntaxhighlight> action calls <syntaxhighlight lang=\"haskell\" enclose=\"none\">view</syntaxhighlight> to view the company, department or employee. Based on the focus <syntaxhighlight lang=\"haskell\" enclose=\"none\">view</syntaxhighlight> decides which concrete view-function to call:\n\n<syntaxhighlight lang=\"haskell\" source=\"wxHaskell/Views.hs\" line>\nview:: Frame () -> Focus -> Company -> IO ()\nview f focus = view' f focus\n  where \n    view' = case focus of\n              CompanyFocus        -> viewCompany\n              (DeptFocus _)       -> viewDept\n              (EmployeeFocus _ _) -> viewEmployee\n              (ManagerFocus _)    -> viewEmployee       \n</syntaxhighlight>\n=== Starting the GUI ===\n\nWe use xwHaskell's <syntaxhighlight lang=\"haskell\" enclose=\"none\">start :: IO a -> IO ()</syntaxhighlight>. This function runs the given GUI of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">IO a</syntaxhighlight> while discarding <syntaxhighlight lang=\"haskell\" enclose=\"none\">a</syntaxhighlight> and returning <syntaxhighlight lang=\"haskell\" enclose=\"none\">IO ()</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"wxHaskell/Main.hs\" line>\ngui :: IO ()\ngui = do\n    f <- frame [ textBgcolor := colorRGB 112 128 144 \n               , resizeable := False\n               , fontWeight := WeightBold\n               , fontUnderline := False\n               , position := Point 50 50]\n    showCompany f CompanyFocus company \n\nmain :: IO ()\nmain = start gui\n</syntaxhighlight>\nIn lines 3-7 <syntaxhighlight lang=\"haskell\" enclose=\"none\">gui</syntaxhighlight> creates the main frame for all views passing a list attributes, which are assigned by making use of assign operator <syntaxhighlight lang=\"haskell\" enclose=\"none\">(:=)</syntaxhighlight>. In the last line the function calls <syntaxhighlight lang=\"haskell\" enclose=\"none\">showCompany</syntaxhighlight> passing the frame, the root focus and a sample company in line 8.", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[GUI programming]] in [[Language:Haskell]] with [[Technology:wxHaskell]]", "architecture": "[this!!Views.hs] provides one view per company datatype. [this!!Main.hs] starts the GUI. The algebraic datatype for companies can be found in [this!!Company.hs], a sample company in [this!!SampleCompany.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. [this!!Total.hs] and [this!!Cut.hs] provide functionality to total and cut salaries.", "usage": "* [this!!Main.hs] has to be compiled using GHC.\n* The output is executed. \n\nThere is a ''Makefile'' with a target ''start'' covering both stepts.", "technologies": [{"type": "Technology", "name": "wxHaskell"}, {"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "GUI_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "wxHaskell"}, {"type": "Concept", "name": "GUI"}, {"type": "Concept", "name": "zipper"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}]}, "mySql": {"usage_links": [], "motivation": "", "name": "mySql", "url": "http://101companies.org/index.php/101implementation:mySql", "headline_links": [{"type": "Technology", "name": "MySQL"}], "languages": [{"type": "Language", "name": "SQL"}], "headline": "Database and SQL-based approach with [[Technology:MySQL]]", "usage": "We use SQL for data processing.\nWe exercise some company scenarios.\nThis project is entirely SQL/scripting-based.\n\nWe need a local database Server.\nIn the following we explain the steps for XAMPP.  \nhttp://www.apachefriends.org/en/xampp.html\n\nWe also need some SQL tool.\nIn the following we explain the steps for MySQL Workbench.\nhttp://dev.mysql.com/downloads/workbench/\n\n* Download and install XAMPP. \n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"Mysql\".\n* A local MySQL Server is now running:\n Server Host : \"localhost\"\n Port : 3306\n Username : \"root\"\n Password : \"\" (no password)\n* Connect to database in MySQL Workbench.\n* Select \"test\" schema or create one.\n* Create tables (run SQL script Company.sql)\n* Populate tables (run SQL script sampleCompany.sql)\n* Execute scenario total (run SQL script Total.sql)\n* Execute scenario cut (run SQL script Cut.sql)\n* Execute scenario total, again (run SQL script Total.sql)", "technologies": [{"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "XAMPP"}, {"type": "Technology", "name": "MySQL_Workbench"}], "type": "Implementation", "motivation_links": [], "features": []}, "linq2Sql": {"usage_links": [], "motivation": "", "name": "linq2Sql", "url": "http://101companies.org/index.php/101implementation:linq2Sql", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "a basic implementation for O/R mapping using LINQ2SQL", "architecture": "", "usage": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "erlang": {"usage_links": [{"type": "Technology", "name": "Rebar"}], "motivation": "Concurrency is implemented in a simple way. The company itself is a server process with which you communicate through an API (meganalysis for now). If that process has a bug, it crashes, but a supervisor will restart it back up (though it does not yet persist its state under crashes). Thus, it is already an example of fault tolerance (or reliability) as well, albeit naively implemented.", "name": "erlang", "url": "http://101companies.org/index.php/101implementation:erlang", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "Erlang"}], "headline": "an Erlang-based implementation ", "architecture": "The code makes extensive use of the OTP (Open Telecom Platform). Aptly misnamed, this is a library of common concurrency tasks which most concurrent programs will use. Rather than writing code that uses the primitive send (''!'') and receive (''receive .. end'') constructs, these are wrapped in OTP.\n\nA common OTP idiom is that OTP provides a *generic* version of a task, a server, a supervisor, and so on. This generic version is then specialized by injecting the name of a module. Whenever specific hook points in the generic server is reached, a callback is made to the module according to a protocol. Thus our code is call-backed to handle the specialization. A consequence as that we don't have to handle all the gritty parts of message passing concurrency.\n\nThe code consist of several modules:\n\n* ''meganalysis.app.src'': This file describes a manifest of the meganalysis application.\n\n* ''meganalysis_app'': A callback interface to the generic ''application'' system in OTP. An application is a collection of processes that so some task together. The Erlang VM is an application server in which you store several applications. Should we want to provide a web interface for instance, we can spawn a webserver application later.\n\n* ''meganalysis_sup'': Provides the callbacks for the generic ''supervisor'' construction. The supervisor is built to mostly live in hibernation supervising concrete workers. If the worker dies due to a program error or some unforseen event, then the supervisor will restart its worker according to some rules. We use the ''one_for_one'' strategy here, but there are several possible. If the worker crashes too often however, the supervisor itself dies. This trigger application death in our case, but usually a nested tree of supervisors can withstand supervisor crashes as the error usually only propagates up the tree to a certain point.\n\n* ''meganalysis_process'': A generic server implementation. That is, we provide a set of callbacks for the ''gen_server'' OTP generic server *behaviour*. Note that we export a neat interface which hides the ''gen_server'' parts. Specifically, we export ''total()'' and ''cut()''. Total is a *call* meaning that it is synchronous. A caller will wait on the server to return an answer. Cut is a *cast* on the other hand. It is asynchronous and the caller is not going to wait on its completion. The ''handle_*'' parts are the protocol for the ''gen_server'' callbacks. That is actually doing the meat of the work.\n\n* ''meganalysis'': It is common to provide a nice API to the rest of the Erlang system, to hide the complexities of processes. An user of the application will only use this API to work with the application. Thus, we decouple the internal design of the application with its interface.", "usage": "=== Prerequisites ===\n\nFirst, in order to run this code, you need three tools:\n\n* Make, preferably GNU make, though the makefile should be BSD-make compatible. It can be skipped if you want. The Makefiles only serves as a canonical interface that makes Emacs and Vim's build-triggers work nicely.\n\n* A Recent Erlang/OTP distribution. Tested with R14B02, but anything from R13B04 and up ought to work for this. Avoid R14A if possible. It is a beta-release.\n\n* [[Technology:Rebar]]: Rebar is an Erlang build tool. When rebar has been boot-strapped, you place it into your path after which you have access to a build system that is bearable to work with.\n\n=== Building ===\n\nOnce the above requirements are satisfied, the code can be built with\n\n<pre>\n     make compile\n</pre>\n\nIt should complete with no warnings.\n\n=== Testing ===\n\nTo test the code, we use\n\n<pre>\n     make console\n</pre>\n\nwhich will spawn a console in the Erlang system, but with an altered code-load path so it can find our compiled bytecode .beam files. Now you can test it by:\n\n<pre>\n     1> meganalysis:run(). % Press return here :)\n     {399747,199873.5}\n     2> q().\n     ok\n</pre>\n\nNote the '.', which marks the end of the expression to the parser.", "technologies": [{"type": "Technology", "name": "ErlangASLASHOTP"}, {"type": "Technology", "name": "GNU_make"}, {"type": "Technology", "name": "Rebar"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Reliability"}]}, "javaParseLib": {"usage_links": [], "motivation": "We implement a functor-based combinator library for top-down parsing with which we parse concrete textual syntax for companies. Such parsing implements [[101feature:Data import]]. Salaries can be totaled along with parsing. The library supports plain acceptance and proper parsing into an intermediate representation. There are acceptor and parser combinators for all common EBNF constructs as well as building blocks for lexical analysis. Class inheritance can also be used to attach semantic actions to applications of parser combinators.", "name": "javaParseLib", "url": "http://101companies.org/index.php/101implementation:javaParseLib", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "Java"}], "headline": "parse companies with parser combinators in Java ", "architecture": "* Folder ''input'' hosts valid and invalid input files for the companies acceptor/parser.\n* Package ''javaf.prelude'' hosts basic functor types for functional OO programming.\n* Package ''parseLib.acceptor'' hosts combinators for acceptors.\n* Package ''parseLib.parser'' hosts combinators for parsers.\n* Package ''parseLib.util'' hosts general utilities.\n* Package ''org.softlang.parser'' hosts lexer, acceptor, and parser for companies.\n* There are also two ''...tests'' packages with JUnit tests; see below.", "issues_links": [], "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the following packages:\n** Package ''org.softlang.tests'' tests the companies acceptor and parser.\n** Package ''parseLib.tests'' tests the combinator library in some basic way.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Data_import"}], "issues": "Class ''Input'' of package ''parseLib.util'' should be replaced by \nsome class of the framework.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}]}, "wcf": {"usage_links": [{"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "IIS"}, {"type": "Technology", "name": "Visual_Studio"}, {"type": "Page", "name": "Web_service"}, {"type": "Page", "name": "Client"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "cscADOTexe"}, {"type": "Page", "name": "Compiler"}], "motivation": "The [[Technology:WCF]] technology supports the development of applications based on [[service-oriented architecture]]. Our implementation illustrates a [[Stateful|stateful]] [[:Category:Web service|web service]] created with WCF. It also introduces the use of [[Technology:SOAP]] over [[Technology:HTTP]]. That necessitates the use of [[DTO]]s to wrap the domain model into leightweight serializable containers and pass it to the client.", "name": "wcf", "illustration_links": [{"type": "Technology", "name": "WCF"}, {"type": "Language", "name": "WSDL"}, {"type": "Page", "name": "Web_service"}, {"type": "Language", "name": "CSharp"}, {"type": "Implementation", "name": "csharp"}, {"type": "Feature", "name": "TypeADASHdriven_query"}], "url": "http://101companies.org/index.php/101implementation:wcf", "headline_links": [{"type": "Technology", "name": "WCF"}, {"type": "Page", "name": "Web_service"}, {"type": "Technology", "name": "ADOTNET"}], "architecture_links": [], "illustration": "[[Technology:WCF]] uses contracts to generate [[Language:WSDL]] definitions for the [[:Category:Web service|web service]]. The contract is provided by a [[Language:CSharp]] interface. It contains all necessary methods for retreiving the company data and invoking the method cut on every entity within the company:\n\n<syntaxhighlight lang=\"csharp\" source=\"wcf/ICompanyService.cs\">\n[ServiceContract]\npublic interface ICompanyService\n{\n\t// The following methods define the interface for data retrieval.\n\t[OperationContract]\n\tCompanyDto GetCompany();\n\n\t[OperationContract]\n\tDepartmentDetailsDto GetDepartmentDetails(Guid id);\n\n\t[OperationContract]\n\tEmployeeDto GetEmployee(Guid id);\n\n\t// The following methods define the interface for performing cut on each entity.\n\t[OperationContract]\n\tdecimal CutDept(DepartmentDetailsDto dept);\n\n\t[OperationContract]\n\tdecimal CutEmpl(EmployeeDto emp);\n\n\t[OperationContract]\n\tdecimal Cut(CompanyDto company);\n}\n</syntaxhighlight>\nThe class <syntaxhighlight lang=\"csharp\" enclose=\"none\">CompanyService</syntaxhighlight> is the concrete contract implementation. The implementation uses the basic [[101implementation:csharp]] for data generation and manipulation. Our contract class invokes the methods of the implementation and creates DTOs out of the retrieved entities. The example shows the implementation of the method <syntaxhighlight lang=\"csharp\" enclose=\"none\">GetCompany</syntaxhighlight>. The method returns all necessary data for the company view encapsulated into a DTO:\n\n<syntaxhighlight lang=\"csharp\" source=\"CompanyService.svc.cs\">\n[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]\n[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]\npublic class CompanyService : ICompanyService\n{\n\n\t...\n\n\t// The concrete method implementation creates the DTO for a company using the data provided in the baseline csharp implementation.\n\tpublic CompanyDto GetCompany()\n\t{\n\t\tvar dto = new CompanyDto\n\t\t{\n\n\t\t\t// The DTO is filled with ID, Name and subdepartments.\n\t\t\tId = Company.Id,\n\t\t\tName = Company.Name,\n\t\t\tDepartments = Company.Departments.Select(d => new DepartmentDto\n\t\t\t{\n\n\t\t\t\t// The data for each department are included iteratively.\n\t\t\t\tDetails = new DepartmentDetailsDto\n\t\t\t\t{\n\t\t\t\t\tId = d.Id,\n\t\t\t\t\tName = d.Name,\n\t\t\t\t\tManager = new EmployeeDto\n\t\t\t\t\t{\n\t\t\t\t\t\t// Every Manager has its id, address, name and salary.\n\t\t\t\t\t\tAddress = d.Manager.Person.Address,\n\t\t\t\t\t\tId = d.Manager.Id,\n\t\t\t\t\t\tName = d.Manager.Person.Name,\n\t\t\t\t\t\tSalary = d.Manager.Salary\n\t\t\t\t\t}\n\t\n\t\t\t\t},\n\n\t\t\t\t// The data for each employee are included iteratively.\n\t\t\t\tEmployees = d.Employees.Select(e => new EmployeeDto\n\t\t\t\t{\n\t\t\t\t\t// Every Manager has its id, address, name and salary.\n\t\t\t\t\tId = e.Id,\n\t\t\t\t\tAddress = e.Person.Address,\n\t\t\t\t\tName = e.Person.Name,\n\t\t\t\t\tSalary = e.Salary\n\t\t\t\t}).ToList(),\n\n\t\t\t\tSubDepartments = FillSubDepartments(d),\n\t\t\t}).ToList(),\n\n\t\t\t// The parameter \"Total\" is filled.\n\t\t\tTotal = Company.Total\n\t\t};\n\n\t\treturn dto;\n\t}\n\n\t...\n\n}\n</syntaxhighlight >\nThe DTO classes <syntaxhighlight lang=\"csharp\" enclose=\"none\">CompanyDto</syntaxhighlight>, <syntaxhighlight lang=\"csharp\" enclose=\"none\">DepartmentDetailsDto</syntaxhighlight>, and <syntaxhighlight lang=\"csharp\" enclose=\"none\">EmployeeDto</syntaxhighlight> provide the serializability for view informations. The following example illustrates the DTO of the company, which contains fields for identifier, name, subdepartments and [[101feature:Type-driven query]].\n\n<syntaxhighlight lang=\"csharp\" source=\"wcf/Dto/CompanyDto.cs\">\n[ServiceContract]\n[DataContract]\npublic class CompanyDto\n{\n\t// Identifier\n\t[DataMember]\n\tpublic Guid Id { get; set; }\n\n\t// Name\n\t[DataMember]\n\tpublic string Name { get; set; }\n\n\t// Subdepartments\n\t[DataMember]\n\tpublic List<DepartmentDto> Departments { get; set; }\n\n\t// Total value\n\t[DataMember]\n\tpublic decimal Total { get; set; }\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "CSharp"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "WSDL"}], "headline": "[[Technology:WCF]] [[:Category:Web service]] implementation in [[Technology:.NET]] 4.0", "architecture": "The base folder contains the contract definition [this!!ICompanyService.cs] and the contract implementation ''ComanyService.svc.cs''. The file [this!!CompanyService.svc] links to the concrete implementation. DTO definitions are located in the ''dto'' folder. Both files, [this!!clientaccesspolicy.xml] and [this!!crossdomain.xml], solve possible cross-domain issues. The ''.config'' files in the base folder are generated.", "usage": "''Requirements:''\n* You need Microsoft Windows (preferably Vista or 7) running in combination with [[Technology:.NET]] 4.0.\n* Install [[Technology:IIS]] (Internet Information Services) 7 or 7.5 using the installation tutorials on [http://learn.iis.net/page.aspx/28/installing-iis-on-windows-vista-and-windows-7/ IIS] or [http://msdn.microsoft.com/de-de/library/aa964620.aspx MSDN]. Make sure, that you have installed the \"static content\" feature as well.\n* Download the wcf implementation from github.\n\n''Build:''\n* Use [[Technology:Visual Studio]] to build the project.\n\n''Create web site:''\n* Go to the \"Computer Management\" dialog.\n* Open the \"Services and Applications\" root and select the \"Internet Information Services (IIS) Manager\".\n* On the right, there is a panel \"Connections\". Create a new web site by right click on \"web sites\".\n* Use ''wcf'' as \"sitename\" and link to the physical folder of the wcf implementation. Use port 1212.\n\nMake sure that http://localhost:1212/CompanyService.svc shows that you have created a service. After the [[:Category:Web service|web service]] is running, continue with your [[:Category:Client|client]] side application, for example [[101implementation:silverlight]].\n\nWe also used:\n* version 4.0 of WCF\n* version 4.0 of [[Language:CSharp]]\n* and version 4.0 of the [[Technology:csc.exe]] [[:Category:Compiler|compiler]]\nto create the implementation.\n\nAttention: When creating a service anywhere other than on the web server, that hosts your Silverlight application, cross-domain issues can arise. Cross-domain calls between Silverlight applications and services present a security vulnerability and must be specifically enabled by an appropriate cross-domain policy. For procedures that describe how to implement such a policy, see \"Making a Service Available Across Domain Boundaries\" <cite>MSDN2012CD</cite>.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "WCF"}, {"type": "Technology", "name": "IIS"}, {"type": "Technology", "name": "SOAP"}, {"type": "Technology", "name": "ASP_ADOTNET"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "WCF"}, {"type": "Concept", "name": "serviceADASHoriented_architecture"}, {"type": "Concept", "name": "Stateful"}, {"type": "Page", "name": "Web_service"}, {"type": "Technology", "name": "SOAP"}, {"type": "Technology", "name": "HTTP"}, {"type": "Concept", "name": "DTO"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}]}, "android2": {"motivation": "", "name": "android2", "url": "http://101companies.org/index.php/101implementation:android2", "headline_links": [{"type": "Language", "name": "Android"}], "languages": [{"type": "Language", "name": "Android"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XML"}], "headline": "Advanced [[Language:Android]] programming", "technologies": [{"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Touch_control"}, {"type": "Feature", "name": "Serialization"}, {"type": "Feature", "name": "Localization"}]}, "scala2": {"usage_links": [], "motivation": "This implementation utilizes a more idiomatic, functional style approach than [[implementation:scala]]. The model is realized using only immutable data structures and the total and cut computation are realized by recursively mapping over the elements of the department tree.\nBecause the model is immutable, it is easily serialized. In addition, an example of JSON serialization was implemented using the sjson Library by Debasish Ghosh. Serialization patterns for all types of the Company domain are realized by implementing typeclass for each one. Such serialization implements [[101feature:Data import]] and [[101feature:Data export]].", "name": "scala2", "url": "http://101companies.org/index.php/101implementation:scala2", "headline_links": [{"type": "Language", "name": "Scala"}], "architecture_links": [], "languages": [{"type": "Language", "name": "Scala"}], "headline": "an implementation of the basic spec in [[Language:Scala]] providing typeclass based serialization using SJSON", "architecture": "The implementation is straightforward. All of the basic features are contained in ''Company.scala'' and serialization is implemented in ''JSONSerialization.scala''. Basic test cases are provided.", "usage": "You need to install sbt to build and run this project as shown on the sbt [http://code.google.com/p/simple-build-tool/wiki/Setup website]. Then change into the base directory of the project and run\n <nowiki>sbt update</nowiki>\nThis should fetch all needed dependencies. After that you can compile the project by typing\n <nowiki>sbt compile</nowiki>\nand then\n <nowiki>sbt test</nowiki>\nto run the tests.", "technologies": [{"type": "Technology", "name": "Scala"}, {"type": "Technology", "name": "sbt"}, {"type": "Technology", "name": "sjson"}, {"type": "Technology", "name": "ScalaTest"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "scala"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "mps": {"motivation": "", "name": "mps", "url": "http://101companies.org/index.php/101implementation:mps", "headline_links": [{"type": "Technology", "name": "MPS"}], "languages": [], "headline": "an implementation based on [[Technology:MPS]]", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "javaRmi": {"usage_links": [], "motivation": "We can think of the server as a centralized information system that maintains a number of companies.\nWe can also think of the server as the information system for a given company.\nIn both cases, the client remote accesses the company objects.\nFor instance, the calculation of the salary total is to be done by the server.", "name": "javaRmi", "url": "http://101companies.org/index.php/101implementation:javaRmi", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "Java"}], "headline": "Distribute company objects with RMI in Java", "architecture": "Package ''org.softlang.shared.company'' defines interfaces for the company object model.\nThe members of these interfaces have a throws declaration for remote exceptions.\nAlso, the interfaces derive from the Remote interface.\nPackage ''org.softlang.server.company'' implements the aforementioned interfaces as POJOs with methods for total and cut.\nThere is also Factory class in that package for convenience.\nThe class ''Server'' in the package ''org.softlang.server'' implements an (RMI) server.\nTo this end, a sample company is bound in the registry.\nThe server keeps on running until terminated explicitly.\nThe class ''Client'' in the package ''org.softlang.client'' implements an (RMI) client.\nTo this end, the sample company is looked up from the server.\nMethods for totaling and cutting salaries are executed on the resulting proxy object.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* The simple scenario of running server and client on the same machine is exercised as follows:\n** Start the server from the command line; see the Makefile.\n** Start the client from within Eclipse; class ''org.softlang.client.Client''.\n** Both server and client produce some standard output.\n** The client terminates automatically, and can be restarted any number of times.\n** The server must be terminated explicitly at the command line.\n\n=== General tips and tricks on RMI ===\n\na) Running the applications\n\nEven if you are not using make, look at the Makefiles for illustration.\n\nb) Running both server and client on the local machine.\n\nThe following advice may be helpful in running both the client and the\nserver parts of an RMI application on a single machine. When you use\nRMI, and you want to connect in the client to the server, you need to\nknow the IP address (hostname) of the server. For testing purposes, it\nis indeed common to run both client and server on the same\nmachine. One typically refers to the given machine by localhost or\n127.0.0.1, but depending on network setup, the actual IP address\nor the DNS-resolvable machine name may (need to) be used.\n\nc) Ports and firewall exceptions\n\nRMI requires some ports to be accessible.\n\nAlso RMI may require special firewall settings.\n\nRMI uses port 1099 by default.\nSee: \"LocateRegistry.createRegistry(Registry.REGISTRY_PORT);\"\nAll ports from 1024 may be used.\n\nIn Windows, the following firewall exceptions may be needed:\n C:\\WINDOWS\\system32\\java.exe\n C:\\Programme\\Java\\jdk1.6.0_06\\bin\\rmiregistry.exe\n C:\\Programme\\Java\\jdk1.6.0_06\\bin\\java.exe\n\nd) Security policy\n \nThe server of the application is started with a security manager.\nSee org.softlang.server.Server.java.\nHence we *must* grant some RMI-related rights; see file security.policy.\nAlso, the policy file must be passed to the server.\nSee Makefile.\nThe policy is very permissive; see the wildcard.", "technologies": [{"type": "Technology", "name": "Java_RMI"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}]}, "silverlight": {"usage_links": [{"type": "Implementation", "name": "wcf"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "The implementation illustrates the development of a [[:Category:Client|client]]-side [[user interface]] accessible via [[:Category:Web browser|web browser]]. We used [[Technology:Silverlight]] in combination with the [[Technology:Navigation framework]] [http://msdn.microsoft.com/en-us/library/cc838245(v=vs.95).aspx#application_navigation] to create an [[MVC]] based implementation. The [[:Category:Web application|web application]] is tied to a [[:Category:Web service|web service]], which is implemented in [[101implementation:wcf]]. An advantage of Silverlight is the out-of-the-box back button support.", "name": "silverlight", "illustration_links": [{"type": "Page", "name": "Client"}, {"type": "Page", "name": "Web_service"}, {"type": "Language", "name": "WSDL"}, {"type": "Language", "name": "CSharp"}, {"type": "Concept", "name": "asynchronous_communication"}, {"type": "Concept", "name": "GUI"}, {"type": "Language", "name": "XAML"}], "url": "http://101companies.org/index.php/101implementation:silverlight", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "Silverlight"}], "architecture_links": [{"type": "Language", "name": "WSDL"}, {"type": "Concept", "name": "GUI"}, {"type": "Language", "name": "XAML"}], "illustration": "There have to be proxy DTOs enabling the [[:Category:Client|client]] to receive the serialized data from the [[:Category:Web service|web service]]. These proxies are generated from a [[Language:WSDL]] file. The namespace for the generated classes is \n<syntaxhighlight lang=\"csharp\" enclose=\"none\">silverlight.CompanyServiceReference</syntaxhighlight>. These proxies are [[Language:CSharp]] classes located in [this!silverlight/Service References/CompanyServiceReference/Reference.cs]:\n\n<syntaxhighlight lang=\"csharp\" source=\"silverlight/silverlight/Service References/CompanyServiceReference/Reference.cs\">\nnamespace silverlight.CompanyServiceReference {\n\tusing System.Runtime.Serialization;    \n\n\t// The class \"CompanyDto\" is the proxy DTO for serialized company data.\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Runtime.Serialization\", \"4.0.0.0\")]\n\t[System.Runtime.Serialization.DataContractAttribute(Name=\"CompanyDto\", Namespace=\"http://schemas.datacontract.org/2004/07/wcf.Dto\")]\n\tpublic partial class CompanyDto : object, System.ComponentModel.INotifyPropertyChanged {\n\n\t\t...\n\n\t}\n\n\t...\n\n\t// The connection point to the company service provided by the wcf implementation.\n\t[System.Diagnostics.DebuggerStepThroughAttribute()]\n\t[System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.ServiceModel\", \"4.0.0.0\")]\n\tpublic partial class CompanyServiceClient : System.ServiceModel.ClientBase<silverlight.CompanyServiceReference.ICompanyService>, silverlight.CompanyServiceReference.ICompanyService {\n\n\t\t...\n\n\t}\n\n\t...\n\n}\n</syntaxhighlight>\n=== GUI ===\n\nThe proxy in combination with the <syntaxhighlight lang=\"csharp\" enclose=\"none\">CompanyServiceClient</syntaxhighlight> allows us to create an [[asynchronous communication]] asynchronous request.\n\n<syntaxhighlight lang=\"csharp\" source=\"silverlight/silverlight/Home.xaml.cs\">\n// Create a service client for companies and ... \nvar client = new CompanyServiceClient();\nclient.GetCompanyCompleted += client_GetCompanyCompleted;\n// ... wait for the requested company.\nclient.GetCompanyAsync();\n</syntaxhighlight>\nThe illustrated code creates a service client and waits, until the company data are completely delivered to the client. The result is a DTO, which is stored in the <syntaxhighlight lang=\"csharp\" enclose=\"none\">DataContext</syntaxhighlight>:\n\n<syntaxhighlight lang=\"csharp\" source=\"silverlight/silverlight/Home.xaml.cs\">\n void client_GetCompanyCompleted(object sender, GetCompanyCompletedEventArgs e)\n{\n\tDataContext = e.Result;\n}\n</syntaxhighlight>\nWe are now able to fill the [[GUI]] with the help of the <syntaxhighlight lang=\"csharp\" enclose=\"none\">DataContext</syntaxhighlight>. Each field of the DTO is automatically binded to the GUI defined by the [[Language:XAML]] files by using binding properties. For example, the [this!!silverlight/Home.xaml] contains a field <syntaxhighlight lang=\"xml\" enclose=\"none\">txtCompanyName</syntaxhighlight> binded to the field ''Name'' of the DTO.\n\n<syntaxhighlight lang=\"xml\" source=\"silverlight/silverlight/Home.xaml\">\n<TextBlock Height=\"23\" HorizontalAlignment=\"Left\" Margin=\"59,46,0,0\" Name=\"txtCompanyName\" Text=\"{Binding Name}\"\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "CSharp"}], "headline": "[[Web programming]] in [[Language:CSharp|C#]] with [[Technology:Silverlight]]", "architecture": "The project is represented as two Visual Studio projects:\n\n* ''silverlight.Web'' contains the generated bootstrap code for launching the silverlight application.\n* ''silverlight''  contains the actual implementation. The [[Language:WSDL]] file and the generated DTO proxies are located in the folder ''silverlight/ServiceReferences/CompanyServiceReference''. The [[GUI]] is provided by [[Language:XAML]] files located in the base folder of the project.", "usage": "* Follow the Usage section for the [[101implementation:wcf]] to create a WCF service.\n* Build the project using Visual Studio.\n* Open the [this!!silverlight.Web/silverlightTestPage.html silverlightTestPage.html] from ''silverlight.Web'' folder.\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "Silverlight"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "Client"}, {"type": "Concept", "name": "user_interface"}, {"type": "Page", "name": "Web_browser"}, {"type": "Technology", "name": "Silverlight"}, {"type": "Technology", "name": "Navigation_framework"}, {"type": "Concept", "name": "MVC"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_service"}, {"type": "Implementation", "name": "wcf"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Web_UI"}]}, "jena2": {"motivation": "", "name": "jena2", "url": "http://101companies.org/index.php/101implementation:jena2", "headline_links": [], "languages": [], "headline": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "qt": {"usage_links": [], "motivation": "TBD", "name": "qt", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:qt", "headline_links": [{"type": "Language", "name": "CPlusPlus"}, {"type": "Technology", "name": "QT"}], "architecture_links": [], "illustration": "TBD", "languages": [{"type": "Language", "name": "CPlusPlus"}], "headline": "GUI programming with [[Language:CPlusPlus]] and [[Technology:QT]]", "architecture": "TBD", "usage": "TBD", "technologies": [{"type": "Technology", "name": "QT"}, {"type": "Technology", "name": "QTCreator"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}]}, "javaMultithreading": {"usage_links": [], "motivation": "''This project was created at the PTT-Hackathon 2011.''\n\nMultithreading grants simultaneously executed multiple access to the [[101companies:System]]. This is usefull for multiclient-applications, in which it is possible to initiate different changes at the same time. The project uses the [[Technology:Monitor|monitor]]-concept of [[Language:Java]].", "name": "javaMultithreading", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}], "url": "http://101companies.org/index.php/101implementation:javaMultithreading", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "The actions [[101feature:Type-driven transformation|cut]] and [[101feature:Type-driven query|total]] are encapsulated in the execute-method of the ConcurrentContext. The synchronization of the execute-method allows only one execution at a time.\n\n<syntaxhighlight lang=\"java\">\n\tpublic synchronized <X, Y> void execute(final Action<X, Y> action,\n\t\tfinal X param) {\n\n\t\tfinal ConcurrentContext context = this;\n\t\tpool.submit(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\taction.execute(context, param);\n\n\t\t\t}\n\t\t});\n\n\t}\n</syntaxhighlight>\nEach action calls the method cut or total of the company. The specific method runs through the department-list and cuts the current department or adds the total of all related departments.\n\n<syntaxhighlight lang=\"java\">\n\tpublic Double total() {\n\t\tdouble total = 0;\n\t\tfor (Department d : getDepts()) {\n\t\t\ttotal += d.total(); // the total-method in department is similar to this one\n\t\t}\n\t\treturn total;\n\t}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}], "headline": "Multithreading implementation in [[Language:Java]].", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]]. The methods for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] are implemented as classes named Actions and hosted in ''org.softlang.action''. They implement the basic Action\ninterface [this!!src/org/softlang/action/Action.java Action.java]. These can be used with a descendant of the interface Context hosted in ''org.softlang.context''. There are two implementations: [this!!src/org/softlang/context/ConcurrentContext.java ConcurrentContext.java] and [this!!src/org/softlang/context/SequentialContext.java SequentialContext.java].  The methods should be called with [this!!src/org/softlang/context/CompanyContextManager.java CompanyContextManager.java], which organizes the call on all direct connected departments. The class [this!!src/org/softlang/tests/CompanyCreator.java CompanyCreator.java] ensures adequate large companies for testing to (hopefully) see the boost of multithreading. There is an internal timeout if we have a [this!!src/org/softlang/action/TotalAction.java TotalAction.java] to ensure all threads are finished before returning the result;", "usage": "* The implementation is provided as an Eclipse project. \n* Open the project with Eclipse; this will also build the project:\n** Run class ''Basics'' with JUnit to exercise basic features and ensure working of CompanyCreator.\n** Run class ''Threads'' with JUnit to exercise threading.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "System"}, {"type": "Technology", "name": "Monitor"}, {"type": "Language", "name": "Java"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "emftext": {"usage_links": [], "motivation": "We use one of the advantages of model-driven software development for the combination of different tools to implement different features of the [101companies:System]]. Most of the involved tools have been developed using EMFText, other tools like Graphviz  and JastEMF are independent of EMFText.\n\nEMFText is used for creating an interactive textual editor. It provides a parser and a printer for company models. References from employees to mentors are resolved automatically by EMFText. The company model is given by a specification in Text-Ecore which is an EMFText-based representation of Ecore models (instead of the XMI one). The Usage of eJava avoids having to add implementations of the Operations for Depth and Cut into the generated code artifacts (by the EMF generator model). The JastEMF tool is used to integrate a JastAdd attribute grammar into the model code which computes salary totals and evaluates the precedence constraint. The EMF+EMFText-based represention of the Graphviz DOT language finally is used for the transformation of Company specifications into a DOT specifications. The DOT specification is then compiled into a PDF using GraphViz.", "name": "emftext", "url": "http://101companies.org/index.php/101implementation:emftext", "headline_links": [], "languages": [], "headline": "This implementation uses model driven software development based on Java, EMFand generative technologies of the Dropsbox (http://www.dropsbox.org/). ", "usage": "=== Source code ===\n\nThe sources are not maintained in github.\n\nThe sources are available as several Eclipse projects from the following URLs:\n\n* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company (model & syntax specifications)\n* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.resource.company (generated parsing & printing & interpretation plugin)\n* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.resource.company.ui (UI integration,Outline and Properties view)\n* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.text (test cases)\n\n=== Preparations ===\n\n* Install the Eclipse 3.7 Modelling Distribution (Includes EMF)\n* Install the current Trunk Version of EMFText (will soon get out as Version 1.4.0 for Eclipse 3.7) and the DSLs from the update-site (http://emftext.org/update_trunk)\n** Feature EMFText (only for build)\n** Feature EMFText Syntax Ecore TEXT (Languages Root Feature)\n** Feature EMFText Syntax eJava (Languages Root Feature) (only for build)\n** Feature EMFText DOT (Graphviz)\n**  Feature Refactory Runtime (Refactory Root Feature)\n* Install the current Trunk Version of JastEMF (will soon get out as Version 0.1.6 for Eclipse 3.7) from the update-site (http://jastemf.googlecode.com/svn/trunk/build/org.jastemf.build/distribution)   \n** Feature JastEMF Core (only for build)\t\n* Install the current Version of FeatureMapper for its update-site (http://featuremapper.org/update/) (only needed for mapping the company features to metamodel)\n* Install GraphViz from http://www.graphviz.org/Download_windows.php (needed to generate the vizualization PDF from the generated DOT File)\n\n=== Build === \n\n* src-gen folders should be empty\n* generate the EMF + JastEMF Code using the EMF Semantic task in the build.xml (takes some time, must be run in the same jre as workspace)\n* generate the EMFText Plugins (right click on company.text.cs --> Generate Text Resource)\n* check if there are any errors in the code\n    \n=== Run ===\n\n* just run a new eclipse instance from the workspace and create a new company file using the EMFText new file wizzard", "technologies": [], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Serialization"}, {"type": "Feature", "name": "Visualization"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Data_import"}]}, "antlrObjects": {"usage_links": [{"type": "Implementation", "name": "antlrAcceptor"}], "motivation": "An ANTLR-based parser for a concrete syntax of companies is provided. The underlying grammar is LL(1). The parser translates text into company objects. To this end, a straightforward object model for companies is used. (In fact, the object model is very similar to the one of [[101implementation:javaComposition]]. The mapping is described by the semantic actions within the ANTLR-based parser description. Parsing provides an implementation of [[101feature:Data import]]. Pretty printing is also supported in the manner that objects can be exported in the concrete syntax. Pretty printing provides an implementation of [[101feature:Data export]]. Basic operations are implemented on top of the object model in basic OO programming style.", "name": "antlrObjects", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:antlrObjects", "headline_links": [{"type": "Concept", "name": "ObjectASLASHText_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "ANTLR"}, {"type": "Concept", "name": "parsing"}], "architecture_links": [{"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Implementation", "name": "javaComposition"}], "illustration": "The following ANTLR production shows the syntax of departments---yet without semantic actions:\n\n<syntaxhighlight lang=\"antlr\">\ndept :\n  'department' STRING '{' \n    ('manager' employee)\n    ('employee' employee)* \n    dept*\n  '}';\n</syntaxhighlight>\nThat is, a department begins with the keyword \"department\", followed by a \n''STRING'' for the department's name, followed by a manager, which is an employee\nprefixed by the keyword \"manager\", followed by a sequence of \nemployees, finally, followed by a sequence of sub-departments. \nThe same production, with semantic actions for object synthesis included, looks as follows:\n\n<syntaxhighlight lang=\"antlr\">\ndept returns [Department d]:\n  { $d = new Department(); }\n  'department' name=STRING\n  { $d.setName($STRING.text); } \n  '{'\n    'manager' m=employee\n    { $d.setManager($m.e); }\n    ( 'employee' e=employee\n      { $d.getEmployees().add($e.e); }\n    )*\n    ( sub=dept\n      { $d.getSubdepts().add($sub.d); }\n    )*\n  '}'\n  ;\n</syntaxhighlight>\nThat is, semantic actions are enclosed into braces {...}, and they are placed in an appropriate positions\nof alternatives. The first semantic action constructs a department object; all subsequent actions populate the object.", "languages": [{"type": "Language", "name": "Java"}], "headline": "[[Object/Text mapping]] for [[Language:Java]] with [[Technology:ANTLR]] for [[parsing]]", "architecture": "See [[101implementation:antlrAcceptor]] for general instructions on the architecture of ANTLR-based implementations.\nThe object model for companies with methods for the basic operations is adopted from [[101implementation:javaComposition]].", "usage": "See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.", "technologies": [{"type": "Technology", "name": "ANTLR"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "javaComposition"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "xpathAPI": {"usage_links": [], "motivation": "Companies are represented in [[Language:XML]] and processed by XPath and Java.  \nXPath is embedded into Java code which makes it possible to process\nquery results in Java. Query results are bound to DOM-like node sets, and\none can iterate over those and mutate them, thereby implementing\nimpure transformations.", "name": "xpathAPI", "url": "http://101companies.org/index.php/101implementation:xpathAPI", "headline_links": [{"type": "Page", "name": "XML_processing"}, {"type": "Language", "name": "XPath"}, {"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Implementation", "name": "dom"}, {"type": "Technology", "name": "DOM"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XPath"}, {"type": "Language", "name": "Java"}], "headline": "exercise [[:Category:XML processing]] with [[Language:XPath]] embedded in [[Language:Java]]", "architecture": "See [[101implementation:dom]] for a very similar implementation.\nThe main difference to the [[Technology:DOM]]-based implementation\nis really that an XPath query is used in the place of a DOM query axis. \nXalan-Java is included into the code distribution of this implementation;\nit implements an XPath processor.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.", "technologies": [{"type": "Technology", "name": "XalanADASHJava"}, {"type": "Technology", "name": "JAXP"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "XML"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "xquery": {"usage_links": [], "motivation": "", "name": "xquery", "url": "http://101companies.org/index.php/101implementation:xquery", "headline_links": [{"type": "Page", "name": "XML_processing"}, {"type": "Language", "name": "XQuery"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XQuery"}], "headline": "[[:Category:XML processing]] in [[Language:XQuery]]", "architecture": "There are two implementations of [[101feature:Type-driven transformation]]:\n* cut.xq: uses XQuery w/o update facility\n* cut.uf.xq: uses XQuery w/ update facility", "usage": "See the Makefile for running some tests.\n\nVersions of Saxon and BaseX are included in the code repository for this implementation.\n\nTested with this version of BaseX:\n\n<pre>\n$ java -cp basex/BaseX61.jar org.basex.BaseX -h\nBaseX 6.1; DBIS, University of Konstanz\nUsage: BaseX [-dioqsvVxz] [query] [-c]\n  [query]    query file\n  -c<cmd>    database commands\n  -d         debug mode\n  -i<file>   XML input\n  -o<file>   output file\n  -q<expr>   query expression\n  -s<pars>   serialization parameters\n  -v/V       show (all) process info\n  -w         wrap query result to xml\n  -z         skip query output\n</pre>\n\nTested with this version of Saxon:\n\n<pre>\n$ java -jar saxon/saxon9he.jar\nNo source file name\nSaxon-HE 9.2.1.2J from Saxonica\nUsage: see http://www.saxonica.com/documentation/using-xsl/commandline.html\nOptions: \n   ...\n</pre>\n\nTested on the following machines:\n\n<pre>\n\tDarwin ... 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386\n\t\t(both test-saxon and test-basex)\n\tDarwin ... 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT \n\t\t(both test-saxon and test-basex)\n2011; root:xnu-1504.15.3~1/RELEASE_I386 i386\n\tLinux ... 2.6.32-21-generic #32-Ubuntu SMP Fri Apr 16 08:09:38 UTC 2010 x86_64 GNU/Linux\n\t\t(both test-saxon and test-basex-unix)\n\tMicrosoft Windows XP [Version 5.1.2600]\n\t\t(both with and without update facility)\n</pre>\n\nThe project can be opened with Eclipse for convenience.", "technologies": [{"type": "Technology", "name": "Saxon"}, {"type": "Technology", "name": "BaseX"}, {"type": "Technology", "name": "Java_SE"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}]}, "haskell": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates basic style of [[functional programming]] in [[Language:Haskell]]. That is, [[algebraic data type]]s are used to represent companies, and [[pure function]]s implement operations for totaling and cutting salaries. The function on departments is [[Recursion|recursive]] because departments may be nested within departments. The functions generally perform [[pattern matching]] to decompose the tree-like structure for companies. The algebraic data types are amenable to uniform, compiler-generated read and show functions, and hence, [[closed serialization]] is immediately enabled.", "name": "haskell", "url": "http://101companies.org/index.php/101implementation:haskell", "headline_links": [{"type": "Language", "name": "Haskell"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "Haskell"}], "headline": "Basic functional programming in [[Language:Haskell]]", "architecture": "The implementation is straightforward. \n\nThere are Haskell modules for the basic features.\n\n* [[101feature:Tree structure]]: ''Company.hs''\n* [[101feature:Type-driven query]]: ''Total.hs''\n* [[101feature:Type-driven transformation]]: ''Cut.hs''\n\nRead and show is enabled by \"deriving\" clauses in ''Company.hs''.\nFinally, there is a ''Main'' module which collects a few test scenarios; see below.", "usage": "The Haskell module ''Main'' has to be consulted with GHCi, and the\n''main'' function has to be applied so that output for the test\nscenarios is produced. The ''expected'' output is available through\nthe file ''baseline''. There is a ''Makefile'' with a target ''test''\nfor [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "functional_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "algebraic_data_type"}, {"type": "Concept", "name": "pure_function"}, {"type": "Concept", "name": "Recursion"}, {"type": "Concept", "name": "pattern_matching"}, {"type": "Concept", "name": "closed_serialization"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Serialization"}]}, "xsdClasses": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "X/O mapping within the .NET platform is exercised. The implementation is also motivated by the [[101implementation:jaxbComposition]] and aims to compare Java and .NET approaches.\n[[Technology:xsd.exe]] is used to generate [[Language:CSharp|C#]] classes from the schema.\nWe show one of the xsd.exe usage scenarios, where C# object model generated from XSD schema is used to deserialize XML which match the same XSD. We apply .NET XML serialization API to support X/O mapping of the actual XML data. To this end we say that xsd.exe is used to map XSD/C# type systems, which are used by .NET XML serialization API to se/de-serialize the actual data.", "name": "xsdClasses", "url": "http://101companies.org/index.php/101implementation:xsdClasses", "headline_links": [{"type": "Technology", "name": "xsdADOTexe"}, {"type": "Language", "name": "CSharp_"}], "architecture_links": [{"type": "Concept", "name": "partial_class"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Implementation", "name": "csharp"}, {"type": "Implementation", "name": "jaxbComposition"}], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "Object/XML mapping with [[Technology:xsd.exe]] and [[Language:CSharp | C#]]", "architecture": "Company.xsd is the schema for schema-first mapping. Company.cs is an output produced by applying xsd.exe to the schema file. Features.cs contains a [[partial class]] with [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] implementations. In fact they are an exact copy of [[101implementation:csharp]]\nSampleCompany.xml contains the serialized company and used in unit tests.\n\nBoth XSD and XML files are taken from [[101implementation:jaxbComposition]] with one minor change: types' names are capitalized to follow C# coding best practices.", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project file. The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).\nNunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.\n\nThe following command should be used if one wants to re-generate C# sources from xsd file:\nxsd Company.xsd /classes /out:../", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "xsdADOTexe"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "jaxbComposition"}, {"type": "Technology", "name": "xsdADOTexe"}, {"type": "Language", "name": "CSharp"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "aspectJ": {"usage_links": [], "motivation": "Concepts of [[aspect-oriented programming]] (say, advanced modularization) are put\nto work. The starting point is an [[object model]] for companies with properties\nbut no other instance methods. The basic operations are \nimplemented by adding the corresponding methods through [[inter-type declaration]]s\n\"after the fact\"---in an extra module. Such a modular development should be compared\nwith the simple approach of [[101implementation:javaComposition]] where\nall methods are readily implemented within the classes. Further, logging is supported \nby [[around advice]] on any call for cutting salaries.", "name": "aspectJ", "illustration_links": [{"type": "Language", "name": "AspectJ"}, {"type": "Concept", "name": "interface_polymorphism"}], "url": "http://101companies.org/index.php/101implementation:aspectJ", "headline_links": [{"type": "Language", "name": "AspectJ"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Logging"}], "illustration": "The following [[Language:AspectJ]] aspect declares instance methods for\ncutting salaries on the classes of the object model for companies; the\nactual method bodies, which are elided, do not differ in any way from a \nstraightforward OO implementation:\n\n<syntaxhighlight lang=\"aspectj\">\npublic aspect Cut {\n   public void Company.cut() { ... }\n   public void Department.cut() { ... }\n   public void Employee.cut() { ... }\n}\n</syntaxhighlight>\nThe next goal is to log applications of cut so that the total of an \nobject is logged before and after applying ''cut''. The following fragment\nof a log illustrates the idea:\n\n<pre>\n...\n> BEGIN Cut Department \"Dev1.1\". Total: 4689.0\n> BEGIN Cut Employee \"Karl\". Total: 2345.0\n> END Cut Employee \"Karl\". Total: 1172.5\n> BEGIN Employee \"Joe\". Total: 2344.0\n> END Employee \"Joe\". Total: 1172.0\n> END Department \"Dev1.1\". Total: 2344.5\n...\n</pre>\n\nHence, the ''cut'' methods of company, department, and employee\nobjects should be intercepted. As a preparatory step, the design of\nthe object model is improved so that the pointcut can be expressed \nmore compactly with the help of [[interface polymorphism]]. That is,\nan interface for all common operations is introduced and implemented\n\"after the fact\" for all the types of the object model for companies:\n\n<syntaxhighlight lang=\"aspectj\">\npublic interface Operations {\n   String getName();\n   double total();\n   void cut();\n}\n\npublic aspect Polymorphism {\n   declare parents: Company implements Operations;\n   declare parents: Department implements Operations;\n   declare parents: Employee implements Operations;\n}\n</syntaxhighlight>\nIt remains to declare a pointcut for all calls of\n''cut'' and to advice each intercepted method call with logging\nactions before and after (say, around) it.\n\n<syntaxhighlight lang=\"aspectj\">\npointcut cut(Operations o):\n   target(o) && call(void Operations.cut());\n        \nvoid around(Operations o): cut(o) {\n   ... // Log \"before\" state\n   proceed(o);\n   ... // Log \"after\" state\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "AspectJ"}], "headline": "advanced modularization with [[Language:AspectJ]]", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]].\nThe Java classes of this object model do not implement any other features.\nPackage ''org.softlang.aspectj'' hosts aspects for [[101feature:Type-driven query]], \n[[101feature:Type-driven transformation]], [[101feature:Structure-driven query]], and [[101feature:Logging]]. There is \nanother aspect ''Polymorphism'' which rehashes existing operations (getName,\ntotal, cut) as an interface [this!!org/softlang/features/Operations.java Operations] on the relevant classes. Finally, \npackage ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project.\n* AJDT must be installed in Eclipse if Eclipse is to be used.\n* Open the project with Eclipse; this will also build the project.\n* There are JUnit tests available as the package ''org.softlang.tests''.\n* Run class ''Operations'' with JUnit to exercise several operations.", "technologies": [{"type": "Technology", "name": "AJDT"}, {"type": "Technology", "name": "ajc"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "aspectADASHoriented_programming"}, {"type": "Concept", "name": "object_model"}, {"type": "Concept", "name": "interADASHtype_declaration"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Concept", "name": "around_advice"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Logging"}]}, "dph": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[data parallelism]] in [[Language:Haskell]] with [[Technology:DPH]]. The operations for totaling and cutting salaries are implemented on top of DPH's [[parallel array]]s. In this manner, we encounter some limitations of DPH with regard to data parallelism. In particular, data parallelism is limited to arrays over primitive types from a DPH-specific [[Prelude]]; there is no support for user-defined types. Hence, we need to flatten the company to a list of salary values, which are of a DPH-specific type for floating point numbers, before salaries can be totaled and cut. The resulting list of cut salaries needs to be reintegrated into the company in question. These conversions obviously take more time than we gain by data parallelism. Hence, the present illustration of DPH is of limited use.", "name": "dph", "illustration_links": [{"type": "Technology", "name": "GHC"}], "url": "http://101companies.org/index.php/101implementation:dph", "headline_links": [{"type": "Concept", "name": "Data_parallelism"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "DPH"}], "architecture_links": [], "illustration": "=== Cutting in Parallel ===\n\nAs we mentioned in the motivation section, data parallelism can only be applied to arrays.\nWe therefore flatten the company to become a list of salaries (see [this!!SalaryFlattener.hs] for details).\n\n==== Non-parallel code ====\n\nUnfortunately the normal Prelude list type <syntaxhighlight lang=\"haskell\" enclose=\"none\">[a]</syntaxhighlight> is not amenable to data parallelism, but a special array type called <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray a</syntaxhighlight>. We therefore need a special function in a non-parallel module for converting between <syntaxhighlight lang=\"haskell\" enclose=\"none\">[Float]</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray Float</syntaxhighlight> before we can cut in parallel:\n\n<syntaxhighlight lang=\"haskell\" source=\"dph/Cut.hs\">\ncut :: Company -> Company\ncut c = (consumeSalaries c) (toList $ cutV $ fromList $ flattenSalaries c)\n</syntaxhighlight>\nWe first flatten the company, then convert the salary list to <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray Float</syntaxhighlight> and call the cut function <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutV</syntaxhighlight> from a parallelism-ready module. After that we convert back to <syntaxhighlight lang=\"haskell\" enclose=\"none\">[Float]</syntaxhighlight> and call <syntaxhighlight lang=\"haskell\" enclose=\"none\">consumeSalaries</syntaxhighlight> to replace all salaries in the company tree.\n\n==== Parallel code ====\n\nParallel and non-parallel code cannot be mixed in the same module. Hence, we set up separate modules.\nIn the module for parallel for cut, we declare:\n\n<syntaxhighlight lang=\"haskell\" source=\"dph/CutV.hs\">\n{-# LANGUAGE ParallelArrays #-}\n{-# OPTIONS_GHC -fvectorise #-}\n</syntaxhighlight>\nThis tells [[Technology:GHC]] to vectorise this module, i.e., to apply data parallelism, and that this module uses parallel arrays. We then define the interface function between vectorised and non-vectorised code <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutV</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"dph/CutV.hs\">\ncutV :: PArray Float -> PArray Float\n{-# NOINLINE cutV #-}\ncutV v = toPArrayP (cutVP (fromPArrayP v))\n</syntaxhighlight>\nThis function converts from <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray Float</syntaxhighlight> to a parallel array <syntaxhighlight lang=\"haskell\" enclose=\"none\">[:Float:]</syntaxhighlight>, calls the\nparallel code and converts back to <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray Float</syntaxhighlight>. A parallel array can only be used in a vectorised module, so only here can we convert to it. Marking this function <syntaxhighlight lang=\"haskell\" enclose=\"none\">{-# NOINLINE cutV #-}</syntaxhighlight> makes it usable in non-vectorised modules. <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutP</syntaxhighlight> calls the actual data parallel function <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutVP</syntaxhighlight>, which uses a parallel map function to cut all list values:\n\n<syntaxhighlight lang=\"haskell\" source=\"dph/CutV.hs\">\ncutVP :: [:Float:] -> [:Float:]\ncutVP = mapP (/2)\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Data parallelism]] in [[Language:Haskell]] with [[Technology:DPH]]", "architecture": "The module in [this!!SalaryFlattener.hs] contains functionality to flatten a company and to replace all salaries.\n[this!!Total.hs] and [this!!Cut.hs] host the code for converting between <syntaxhighlight lang=\"haskell\" enclose=\"none\">[Float]</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">PArray Float</syntaxhighlight> and calling data parallel functions for totaling and cutting salaries, which can be found in [this!!TotalV.hs] and [this!!CutV.hs].\nThe algebraic datatype for companies can be found in [this!!Company.hs]. [this!!SampleCompany.hs] holds a sample company.\n[this!!Main.hs] collects test scenarios for totaling and cutting.", "usage": "* All sources have to be compiled using the GHC-options <syntaxhighlight lang=\"make\" enclose=\"none\">-c -Odph -fdph-seq</syntaxhighlight>.\n* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline]. \nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "GHCi"}, {"type": "Technology", "name": "DPH"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "data_parallelism"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "DPH"}, {"type": "Concept", "name": "parallel_array"}, {"type": "Concept", "name": "Prelude"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_parallelism"}]}, "fsharp": {"usage_links": [], "motivation": "Multiparadigm nature of F# is shown;\nboth OO and FP features of the languages are illustrated by adjusting a basic [[101implementation:csharp | C#]] implementation.", "name": "fsharp", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:fsharp", "headline_links": [{"type": "Language", "name": "FSharp"}, {"type": "Technology", "name": "ADOTNET"}], "architecture_links": [], "illustration": "<syntaxhighlight lang=\"fsharp\">\n    type Company() = \n     class\n       let mutable name = \"\"\n       let mutable departments:List<Department> = new List<Department>() \n  \n       member this.Name with get() = name and set v = name <- v\n       member this.Departments with get() = departments and set v = departments <- v\n</syntaxhighlight>\n\nHere we define a member which is essentially a wrapper around pure functional style of calculating total using accumulator. (''fold'' function from F# library is used)\n\n<syntaxhighlight lang=\"fsharp\">\n member this.TotalSalaries =\n        let x = List.fold (fun (acc) (elem:Department) -> acc + elem.Total) 0M (List.ofSeq departments)\n        x\n\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "FSharp"}], "headline": "A simple implementation in [[Language:FSharp|F#]] for the [[Technology:.NET]] Framework", "architecture": "", "usage": "To make NUnit GUI working with .NET 4.0\nUnder <configuration> add:\n<nowiki>\n\n<startup>\n  <supportedRuntime version=\"v4.0.30319\" />\n</startup>\n</nowiki>\n\nand under <runtime> add:\n<loadFromRemoteSources enabled=\"true\" />", "technologies": [{"type": "Technology", "name": "fcsADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "Visual_Studio"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "csharp_"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "seaside": {"usage_links": [{"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "TBD", "name": "seaside", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:seaside", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Smalltalk"}, {"type": "Technology", "name": "Seaside"}], "architecture_links": [], "illustration": "There is a basic OO implemenetation.\n\nCut for the Employee\n<syntaxhighlight lang=\"smalltalk\">\ncut\n\tsalary := salary / 2\n</syntaxhighlight>\nTotal for the Employee\n<syntaxhighlight>\ntotal\n\t^salary\n</syntaxhighlight>\nCut for the Departmnent\n\n<syntaxhighlight lang=\"smalltalk\">\ncut\n\tsuper cut.\n\tmanager cut.\n\temployees do:[:each | each cut]\n</syntaxhighlight>\nTotal for the Department\n\n<syntaxhighlight lang=\"smalltalk\">\ntotal\n\t^self employees inject:((manager total) + (super total)) into:[:total :current | total + current total]\n</syntaxhighlight>\n\nThe second part contains a layer of web-specific components.", "languages": [{"type": "Language", "name": "Smalltalk"}], "headline": "[[Web programming]] in [[Language:Smalltalk]] with [[Technology:Seaside]]", "architecture": "", "usage": "* 1. Download Seaside for Pharo (http://www.seaside.st/download/pharo).\n* 2. Open Seaside environment.\n* 3. Open \"world\" context menu within seaside (right click or double left click). Tools->File Browser. Navigate to the \"implementations\\seaside\" folder in your svn repository.  \n* 4. Select ''101companies.st'' and click \"install\" on a toolbar.\n* 5. Select ''101companies-Tests.st'' and click \"install\" on a toolbar.\n\nAt this point you should be able to see 101comanies and 101companiesTests in the components browser.\nNext you have to start a web-server. For this go to the \"Seasise Control Panel\", select WAComancheAdaptor and click \"Start\" button.\n\nIf you don't see any adapters:\n* 1. Open the 'Seaside Control Panel' in the 'Tools' submenu of the 'World' menu\n* 2. Should there be no WAComancheAdaptor add one by right clicking and selecting 'Add adaptor...'\n* 3. Select the WAComancheAdaptor and press 'Start'.\n\nOpen http://localhost:8080/101companies in your web-browser.\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "Pharo"}, {"type": "Technology", "name": "Seaside"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}]}, "ef": {"usage_links": [{"type": "Implementation", "name": "sqlServer"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Technology", "name": "Visual_Studio"}], "motivation": "Entity Framework object model is generated for SQL Server representation of 101companies model.  We use LINQ queries over entities to implement [[101feature:Type-driven query]], [[101feature:Type-driven transformation]] and\n[[101feature:Structure-driven query]] features by showing different types of data tranformations happening on the database level. These transformations (SQL statements) are generated by [[Technology:Entity Framework]] using [[O/R Mapping]]\nmetadata stored in [[Language:XML]] file, which was also automatically generated from the database 101companies model representation.", "name": "ef", "url": "http://101companies.org/index.php/101implementation:ef", "headline_links": [{"type": "Concept", "name": "persistence"}, {"type": "Concept", "name": "OASLASHR_mapping"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "Entity_Framework"}], "architecture_links": [], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "object [[persistence]] and [[O/R mapping]] with [[Technology:.NET]] [[Technology:Entity Framework]]", "architecture": "CompanyModel.edmx represents all Entity Framework artifacts required for O/R Mapping. This is an XML file contains:\n* SSDL content\n* CSDL content\n* C-S mapping content\n* EF Designer content\n<nowiki>and also a *.cs file with C# objects.</nowiki>\n\n<nowiki>*.edmx files are visualized in Entity Data Model Designer by default, but also can be opened as raw xml files.</nowiki>\nThe Entity Data Model Designer (Entity Designer) stores storage model information in an .edmx file at design time. \nAt build time the Entity Designer uses information in an .edmx file to create the .ssdl file that is needed by the Entity Framework at runtime.\n \nTests folder contains unit tests showing implemented features.", "usage": "[[101implementation:sqlServer]] should be evaluated as soon as current implementation requires [[101feature:Tree structure]] to be created in the database.\n\n[[Technology:Visual Studio]] 2010 should be used to open a project file.\nThe project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).\nNunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "Entity_Framework"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "SQL_Server"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Technology", "name": "Entity_Framework"}, {"type": "Concept", "name": "OASLASHR_Mapping"}, {"type": "Language", "name": "XML"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Persistence"}]}, "jsf": {"usage_links": [{"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "mySql"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Technology", "name": "GlassFish"}, {"type": "Page", "name": "Application_server"}, {"type": "Page", "name": "Web_application"}], "motivation": "This [[:Category:101implementation|implementation]] covers the popular approach for [[web programming]] with [[Technology:JSF]]. [[Technology:JSF]] has a great support for the development of [[user interface]]s in the [[MVC]] context. This implementation is considered as a typical [[Language:Java]] based implementation with an amount of related and commonly used [[:Category:Technology|technologies]] like the [[Technology:Hibernate]] [[101feature:Persistence|persistence]] [[:Category:API]] and the [[Technology:GlassFish]] [[:Category:Application server|application server]].", "name": "jsf", "illustration_links": [{"type": "Concept", "name": "MVC"}, {"type": "Technology", "name": "JSF"}, {"type": "Concept", "name": "user_interface"}, {"type": "Technology", "name": "Facelets"}, {"type": "Language", "name": "XHTML"}, {"type": "Concept", "name": "GUI"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Concept", "name": "DAO"}, {"type": "Language", "name": "HTML"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "Client"}, {"type": "Page", "name": "Server"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Language", "name": "JavaScript"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Page", "name": "Annotation"}, {"type": "Page", "name": "Application_server"}, {"type": "Technology", "name": "GlassFish"}, {"type": "Technology", "name": "Hibernate"}], "url": "http://101companies.org/index.php/101implementation:jsf", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Technology", "name": "JSF"}], "architecture_links": [{"type": "Technology", "name": "Facelets"}, {"type": "Concept", "name": "User_interface"}, {"type": "Language", "name": "CSS"}, {"type": "Technology", "name": "Facelets"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Page", "name": "101feature"}, {"type": "Feature", "name": "Exploration"}, {"type": "Page", "name": "DBMS"}, {"type": "Page", "name": "Class"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Page", "name": "Mapping"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Page", "name": "Class"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Concept", "name": "DAO"}, {"type": "Page", "name": "Design_pattern"}], "illustration": "The main architecture is based on the [[MVC]] pattern. [[Technology:JSF]] itself is focussed on the view and the controller. The [[user interface]] (view) is provided by [[Technology:Facelets|facelets]], which is based on the [[Language:XHTML]] dialect. A facelet contains the necessary [[GUI]] components for the specific view and connects them to the corresponding methods of the backend [[Technology:Java Bean|Java Beans]] (model). The data provided by the Java Beans is stored within a [[Technology:MySQL]] database, accessible through [[Technology:Hibernate]] with the help of [[DAO]]s (data access objects). The following sections provide a specific description of the involved parts.\n\n=== GUI development ===\n\nFacelets provide [[Language:HTML]] page generation. Since the XML tags for the JSF components can not be displayed by the browser, they have to be changed to corresponding HTML tags via component aliasing. The following example shows the JSF components needed for total and cut of a company:\n\n<syntaxhighlight lang=\"xml\" source=\"jsf/jsf/web/company.xhtml\">\n<h:outputLabel for=\"total\" value=\"Total:\"/>\n<h:outputText id=\"total\" value=\"#{companyBean.total}\"/>\n<h:commandButton value=\"cut\" actionListener=\"#{companyBean.cut()}\"/>\n</syntaxhighlight>\nThe three elements model the GUI components for the label \"Total\", the textfield for the [[101feature:Type-driven query]] and the button for the [[101feature:Type-driven transformation]]. For example, the <syntaxhighlight lang=\"xml\" enclose=\"none\"><h:commandButton .../></syntaxhighlight> is transformed into the HTML tag <syntaxhighlight lang=\"xml\" enclose=\"none\"><input .../></syntaxhighlight>. The communication between [[:Category:Client|client]] and [[:Category:Server|server]] is provided by [[Technology:XMLHttpRequest]]. The needed [[Language:JavaScript]] files are automatically generated by the framework.\n\nThere is no need to implement the controller since it is provided by the [[Technology:Servlet API]] used within the JSF framework.\n\n=== Managed Beans ===\n\nThe previously introduced command button \"cut\" invokes the corresponding method <syntaxhighlight lang=\"java\" enclose=\"none\">cut</syntaxhighlight> in the Java Bean <syntaxhighlight lang=\"java\" enclose=\"none\">CompanyBean</syntaxhighlight>. In context of JSF, such beans are called Managed Beans:\n\n<syntaxhighlight lang=\"java\" source=\"jsf/jsf/src/java/company/beans/jsf/CompanyBean.java\">\n@ManagedBean(name = \"companyBean\")\n@RequestScoped\npublic class CompanyBean {\n\n\t...\n\n\t// This is the set of employees for the whole company (loaded previously by the method \"loadCompany(int id))\".\n\tprivate Set<Employee> employees;\n\t\n\t...\n\n\t// The method returns the current value for total of the loaded company.\n\tpublic double getTotal() {\n\t\treturn total;\n\t}\n\n\t// The method cuts all employees of the loaded company.\n\tpublic void cut() {\n\t\t// Here we retrieve the session and begin the transaction with Hibernate.\n\t\tHibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();\n\t\tDAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);\n\t\t// The employeeDAO manages the database interaction.\n\t\tEmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();\n\n\t\t// This loop iterates over the previously loaded employees and persists the new salary values.\n\t\tfor (Employee employee : employees) {\n\t\t\temployee.setSalary(employee.getSalary() / 2);\n\t\t\temployeeDAO.makePersistent(employee);\n\t\t}\n    \n\t\ttotal = total / 2;\n\n\t\t// Finally, we commit and close the transaction.\n\t\tHibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();\n\t}\n\n\t...\n\n}\n</syntaxhighlight>\nThe class <syntaxhighlight lang=\"java\" enclose=\"none\">CompanyBean</syntaxhighlight> encapsulates the server-side business methods for the application. Responses for ''GET'' requests are provided by simple Java ''getters'' (e. g. <syntaxhighlight lang=\"java\" enclose=\"none\">getTotal()</syntaxhighlight>). ''POST'' requests are handled by corresponding methods (e. g. <syntaxhighlight lang=\"java\" enclose=\"none\">cut()</syntaxhighlight>) or by Java ''setters''.\n\nThe two [[:Category:Annotation|annotations]] for the class provide the following features:\n* <syntaxhighlight lang=\"java\" enclose=\"none\">@ManagedBean</syntaxhighlight> annotates, that the bean is a managed bean in the context of JSF. The attribute <syntaxhighlight lang=\"java\" enclose=\"none\">name</syntaxhighlight> provides the ''connection point'' useable within the facelets.\n* <syntaxhighlight lang=\"java\" enclose=\"none\">@RequestScope</syntaxhighlight> annotates, that every new request affecting the <syntaxhighlight lang=\"java\" enclose=\"none\">CompanyBean</syntaxhighlight> will create a new instance.\n\nThe [[:Category:Application server|application server]] [[Technology:GlassFish]] provides the necessary container for the beans and manages the application.\n\n=== Persistence ===\n\nThe principle of the DAO pattern is the exchangeability of the persistence layer. This is provided by a <syntaxhighlight lang=\"java\" enclose=\"none\">DAOFactory</syntaxhighlight>, which instantiates the specific DAOs for the used persistence technology. In our case, the technology is [[Technology:Hibernate]]. According to the interface [this!!jsf/java/company/dao/interfaces/generic/GenericDAO.java GenericDAO.java], every implemented DAO provides the methods to load an entity either by id or by example, to load all entities corresponding to a specific class, or to persist a given entity.\n\n<syntaxhighlight lang=\"java\" source=\"jsf/jsf/java/company/dao/interfaces/generic/GenericDAO.java\">\nT findById(ID id, boolean lock);\nList<T> findAll();\nList<T> findByExample(T exampleInstance);\nT makePersistent(T entity);\nvoid makeTransient(T entity);\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"java\" enclose=\"none\">T</syntaxhighlight> stands for either the class <syntaxhighlight lang=\"java\" enclose=\"none\">Company</syntaxhighlight>, or the class <syntaxhighlight lang=\"java\" enclose=\"none\">Department</syntaxhighlight>, or the class <syntaxhighlight lang=\"java\" enclose=\"none\">Employee</syntaxhighlight>. The concrete methods for Hibernate are implemented in [this!!jsf/java/company/dao/hibernate/generic/GenericDAOHibernate.java GenericDAOHibernate.java]. This structure enables the Java Beans to perform data-affecting actions mostly independent from the persistence implementation:\n\n<syntaxhighlight lang=\"java\" source=\"jsf/jsf/src/java/company/beans/jsf/CompanyBean.java\">\n@ManagedBean(name = \"companyBean\")\n@RequestScoped\npublic class CompanyBean {\n        \n\t...\n\n\tpublic void cut() {\n\t\t// There has to be a transaction before creating hibernate requests.\n\t\tHibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();\n\n\t\t// Retrieve the Hibernate DAOFactory for creating the employee DAO.\n\t\tDAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);\n\t\tEmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();\n        \n\t\t// Cut all employees and save them.\n\t\tfor (Employee employee : employees) {\n\t\t\temployee.setSalary(employee.getSalary() / 2);\n\t\t\temployeeDAO.makePersistent(employee);\n\t\t}\n        \n\t\t// Calculate new total value.\n\t\ttotal = total / 2;\n\n\t\t// The transaction commits the data and ends.\n\t\tHibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();\n\t}\n\n\t...\n\n}\n</syntaxhighlight>\nThere is an issue to be solved in the future: The transaction should be invoked by annotations or any automated transaction management instead of using corresponding methods with the help of <syntaxhighlight lang=\"java\" enclose=\"none\">HibernateUtil</syntaxhighlight>. If there is no Hibernate persistence, the calls will lead to exceptions.", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "CSS"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "JavaScript"}], "headline": "[[Web programming]] with [[Technology:JSF]]", "architecture": "The [[Technology:Facelets|facelets]] ([this!!jsf/web/company.xhtml company.xhtml], [this!!jsf/web/department.xhtml department.xhtml], [this!!jsf/web/employee.xhtml employee.xhtml]) are located in the folder ''jsf/web/''. There is a [this!!jsf/web/template.xhtml template.xhtml] as well, which arranges the main [[User interface|UI]] components of each view. The folder ''jsf/web/resources/css/'' contains the corresponding [[Language:CSS]] files.\n\nThe navigation between the different [[Technology:Facelets|facelets]] is managed with the help of the file ''faces-config.xml'', while the starting page and the class for the controller [[Technology:Servlet API|servlet]] is defined in the [this!!jsf/web/WEB-INF/web.xml web.xml].\n\nThe ''jsf/src/java/'' folder contains all relevant code for the realization of the main [[:Category:101feature|features]] (except [[101feature:Exploration]]):\n\n* The ''hibernate.cfg.xml'' defines the necessary data for the [[:Category:DBMS]] connection and the [[:Category:Class|classes]] for [[Technology:Hibernate|hibernate]] [[:Category:Mapping|mapping]].\n\n* The folder ''src/java/company/beans/jsf/'' contains the three [[Technology:Java Bean|beans]] ([this!!jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java], [this!!jsf/src/java/company/beans/jsf/DepartmentBean.java DepartmentBean.java], [this!!jsf/src/java/company/beans/jsf/EmployeeBean.java EmployeeBean.java]) necessary for handling the companies, departments and employees.\n\n* The [this!!jsf/src/java/company/classes] folder contains the relevant [[:Category:Class|classes]] for the instantiation of the [[101feature:Tree structure|company system]].\n\n* The [this!!jsf/src/java/company/dao] folder contains all necessary classes and factories for the exchangablility of the data model corresponding to the [[DAO]] [[:Category:Design pattern|design pattern]].", "usage": "You need an sql-server to use this application. In this tutorial both will be handled by XAMPP (http://www.apachefriends.org/en/xampp.html).\n\nYou can use the ''company.sql'' and ''sampleCompany.sql'' of [[101implementation:html5tree]] for the jsf project.\n\n* Download and install XAMPP\n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"MySQL\"\n* Use the guideline of [[101implementation:mySql]] up to \"Populate tables...\"\n\nAfter the database is running, follow the next steps:\n\n* To start the application, you have to download the sources from github\n* Open the project with [[Technology:NetBeans]] (http://netbeans.org/)\n* Select the project, right click and ''run''\n* The glassfish-server (and a browser window) with the application will start automatically\n\nThe project is implemented with [[Technology:NetBeans]] 7.0.1. You will need the full version with an installed [[Technology:GlassFish]] [[:Category:Application server]].\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "JSF"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Technology", "name": "Java_EE"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Technology", "name": "GlassFish"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "101implementation"}, {"type": "Concept", "name": "web_programming"}, {"type": "Technology", "name": "JSF"}, {"type": "Technology", "name": "JSF"}, {"type": "Concept", "name": "user_interface"}, {"type": "Concept", "name": "MVC"}, {"type": "Language", "name": "Java"}, {"type": "Page", "name": "Technology"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Feature", "name": "Persistence"}, {"type": "Page", "name": "API"}, {"type": "Technology", "name": "GlassFish"}, {"type": "Page", "name": "Application_server"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "antlrParser": {"usage_links": [{"type": "Implementation", "name": "antlrAcceptor"}], "motivation": "An ANTLR-based parser for a concrete syntax of companies is provided. The underlying grammar is LL(1). The parser uses semantics actions to implement [[101feature:Type-driven query]]. Such parsing implements [[101feature:Data import]].", "name": "antlrParser", "url": "http://101companies.org/index.php/101implementation:antlrParser", "headline_links": [{"type": "Technology", "name": "ANTLR"}], "architecture_links": [{"type": "Implementation", "name": "antlrAcceptor"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "Processing textual syntax with semantic actions of [[Technology:ANTLR]]", "architecture": "See [[101implementation:antlrAcceptor]] for general instructions on the architecture of ANTLR-based implementations.", "usage": "See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.", "technologies": [{"type": "Technology", "name": "ANTLR"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}]}, "seam": {"usage_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Page", "name": "Web_browser"}], "motivation": "[[Technology:Seam]] provides a great support for the development of [[:Category:Web application|web applications]] in [[Language:Java]] with easy [[101feature:Access control|access control]] and an integrated persistence layer. It combines the popular [[Technology:JSF]] (please visit [[101implementation:jsf]] for more information) approach for [[User interface|UI]] programming with [[Technology:Hibernate]] and [[Technology:JPA]]. Both [[:Category:Persistence_technology|persistence technologies]] are directly integrated into the [[:Category:Web-application framework|web-application framework]].", "name": "seam", "illustration_links": [{"type": "Technology", "name": "Seam"}, {"type": "Concept", "name": "ThreeADASHtier_architecture"}, {"type": "Technology", "name": "JSF"}, {"type": "Concept", "name": "MVC"}, {"type": "Technology", "name": "JSF"}, {"type": "Technology", "name": "Facelets"}, {"type": "Language", "name": "HTML"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Technology", "name": "Facelets"}, {"type": "Feature", "name": "Access_control"}, {"type": "Technology", "name": "JPA"}, {"type": "Page", "name": "Annotation"}, {"type": "Feature", "name": "Access_control"}], "url": "http://101companies.org/index.php/101implementation:seam", "headline_links": [{"type": "Page", "name": "Web_application"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Seam"}, {"type": "Page", "name": "WebADASHapplication_framework"}], "architecture_links": [{"type": "Technology", "name": "Facelets"}, {"type": "Concept", "name": "this!!view"}, {"type": "Language", "name": "CSS"}, {"type": "Technology", "name": "Seam"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Technology", "name": "Seam"}, {"type": "Page", "name": "Library"}, {"type": "Page", "name": "Web_application"}], "illustration": "[[Technology:Seam]] is based on the [[Three-tier architecture|three-tier architecture]]. Since the presentation is covered by [[Technology:JSF]], the focus of the Seam framework is the business and data access layer. This section illustrates the major components of the Seam framework and introduces its rights management.\n\n=== Presentation ===\n\nThe presentation layer is based on the [[MVC]] architecture, because it is the main architecture of the [[Technology:JSF]] framework. From this it follows, that the view consists of [[Technology:Facelets]]. We will start our presentation illustration with the first page of the application: the company view. It contains four parts, at which there are two textfields for the name and the total of the company and two buttons for the department list and the cut of the company. In theory, the view is designed to show more than one company, but this is not demanded by the feature model.\n\n<syntaxhighlight lang=\"xml\" source=\"seam/view/listAllCompanies.xhtml\">\n...\n\n<!-- 'c' is mapped to the field 'allCompanies' contained in the CompanyAction.java. -->\n<rich:dataTable value=\"#{allCompanies}\" var=\"c\" width=\"300px\">\n\t<rich:column>\n\t\t<f:facet name=\"header\">Name</f:facet>\n\t\t<!-- The field displays the name of the company. -->\n\t\t<h:outputText value=\"#{c.name}\" />\n\t</rich:column>\n\t<rich:column>\n\t\t<f:facet name=\"header\">Total salaries</f:facet>\n\t\t<!-- The field displays the total value of the company. -->\n\t\t<h:outputText value=\"#{c.total()}\" />\n\t</rich:column>\n\t<rich:column>\n\t\t<!-- This button opens the view for all departments contained by the company. -->\n\t\t<s:button value=\"Show details\" action=\"#{companyAction.showDetails()}\" />\n\t</rich:column>\n\t<rich:column>\n\t\t<!-- This is the cut button for the company. -->\n\t\t<s:button value=\"Cut salaries\" action=\"#{companyAction.cutSalaries()}\" />\n\t</rich:column>\n</rich:dataTable>\n\n...\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"xml\" enclose=\"none\"><rich:dataTable ...> ... </rich:dataTable></syntaxhighlight> tags create a new [[Language:HTML]] table with a predefined <syntaxhighlight lang=\"xml\" enclose=\"none\">width=\"300px\"</syntaxhighlight>. The value <syntaxhighlight lang=\"xml\" enclose=\"none\">\"#{allCompanies}\"</syntaxhighlight> maps the table rows to the <syntaxhighlight lang=\"java\" enclose=\"none\">allCompanies</syntaxhighlight> list contained in the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java]. Each entry has a corresponding table row. The attribute <syntaxhighlight lang=\"xml\" enclose=\"none\">var=\"c\"</syntaxhighlight> helps to access one object of the list and get its informations. As mentioned above, the table has four columns: name, total, detail button and cut button. Each column is created by the use of the tags <syntaxhighlight lang=\"xml\" enclose=\"none\"><rich:column> ... </rich:column></syntaxhighlight>. The methods of the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java] are directly accessed via the actions of the buttons, for example in <syntaxhighlight lang=\"xml\" enclose=\"none\"><s:button value=\"Cut salaries\" action=\"#{companyAction.cutSalaries()}\"/></syntaxhighlight>. [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction] is a [[Technology:Java Bean]], which receives the requests of the facelets. \n\nThe following example illustrates the <syntaxhighlight lang=\"java\" enclose=\"none\">cutSalaries()</syntaxhighlight> method implemented by the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java]:\n\n<syntaxhighlight lang=\"java\" source=\"seam/src/hot/org/softlang/web/CompanyAction.java\">\n...\n\npublic String cutSalaries() {\n\ttry {\n\t\t// The method cuts the salaries for the selected company.\n\t\tcompanyService.cutSalaries(selectedCompany);\n\t\t// If the call is successful, a corresponding message is displayed.\n\t\tfacesMessages.add(FacesMessage.SEVERITY_INFO, \"The cut salary operation was successfully applied.\");\n\t}\n\tcatch(Exception e) {\n\t\t// If an exception occures, an error message is displayed.\n\t\tfacesMessages.add(FacesMessage.SEVERITY_ERROR, \"Error when trying to cut salaries. \" + e.getMessage());\n\t\te.printStackTrace();\n\t}\n\t// The framework expects a view name for loading the next view. If this name is 'null', the current view will reloads.\n\treturn null;\n}\n\n...\n</syntaxhighlight>\nThe action invokes the <syntaxhighlight lang=\"java\" enclose=\"none\">cutSalaries(selectedCompany)</syntaxhighlight> method of the [this!!src/main/org/softlang/services/CompanyService.java CompanyService] and additionaly manages the loading of further pages. If an exception occurs, it returns an error message to the [[Technology:Facelets|facelet]]. The <syntaxhighlight lang=\"java\" enclose=\"none\">null</syntaxhighlight> return value simply means, that the current view has to be reloaded.\n\n=== Business and Data access ===\n\nThe business layer manages the [[101feature:Access control|access control]] of the application. In addition, it is connected to the persistence layer, which is implemented with [[Technology:JPA]]. On cut, the following method of the service class [this!!src/main/org/softlang/services/CompanyService.java CompanyService] is invoked:\n\n<syntaxhighlight lang=\"java\" source=\"seam/src/main/org/softlang/service/CompanyService.java\">\n...\n\n// The annotation manages the access control for this method.\n@Restrict(\"#{s:hasRole('admin')}\") \npublic void cutSalaries(Company company) {\n\tcompany.cut();\n\tentityManager.merge(company);\n}\n\n...\n</syntaxhighlight>\nA simple [[:Category:Annotation|annotation]] <syntaxhighlight lang=\"java\" enclose=\"none\">@Restrict</syntaxhighlight> provides [[101feature:Access control|access controll]] for the different users. The annotated method is restricted to a user or a group of users, in this case to the \"admin\" user. The cut is performed within the company object directly. The <syntaxhighlight lang=\"java\" enclose=\"none\">entityManager</syntaxhighlight> manages the company entities and provides an easy merge mechanism for all contained entities. In this case all manipulated employees of this company are merged automatically without explicit call.", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "HQL"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "JavaScript"}], "headline": "[[:Category:Web application]] development with [[Language:Java]] and the [[Technology:Seam]] [[:Category:Web-application framework|framework]]", "architecture": "* The [[Technology:Facelets]] defining the view are located in the folder ''[[this!!view]]''. The folder contains layout templates, images and [[Language:CSS|style sheets]] as well, which are provided directly by the [[Technology:Seam]] [[:Category:Web-application framework|web-application framework]].\n* The [[Technology:Java Bean|Java bean]] [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java] is located in [this!!src/hot/org/softlang/web] and provides the connection point to the business layer.\n* The entity classes for the company are located in the [this!!src/main/org/softlang/model] package.\n* The [[Technology:Seam]] service class is located in the [this!!src/main/org/softlang/services] package.\n\nThere are some necessary configuration files like the ''build.xml'' and the ''build.properties''. Apart from that, everything else is generated or part of the [[:Category:Library|libraries]].\n\n[[Category:Web application]]", "usage": "This application requires the [[Technology:Eclipse]] and [[Technology:JBoss Application Server]] (Version 4.2.x). After downloading and installing both, follow these steps:\n\n* Import the seam project from your file system to [[Technology:Eclipse]] as a java project.\n* Change the [this!!build.properties] file located in the projects base folder. The ''jboss.home''-property must refer to your [[Technology:JBoss Application Server]] location: ''jboss.home = <your JBoss location>''.\n* Run the seam project as ant build in eclipse (Right click on the ''build.xml'' file -> Run As -> Ant Script).\n* Start JBoss using either ''<your JBoss location>/bin/run.bat'' for Windows OS or ''<your JBoss location>/bin/run.sh'' for Unix OS.\n* Start a [[:Category:Web browser]] and go to http://localhost:8080/seam\n\nIt is possible to access the system with two different users: \"admin\" (Password: \"admin\") and \"user\" (Password: \"user\"). If you are logged in as \"admin\", you are allowed to visit all departments and employees contained in the company and cut all salaries. If you are logged in as \"user\", you are only allowed to visit all elements of the company but not to cut salaries.", "technologies": [{"type": "Technology", "name": "Seam"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Technology", "name": "Eclipse"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "Seam"}, {"type": "Page", "name": "Web_application"}, {"type": "Language", "name": "Java"}, {"type": "Feature", "name": "Access_control"}, {"type": "Technology", "name": "JSF"}, {"type": "Implementation", "name": "jsf"}, {"type": "Concept", "name": "User_interface"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Technology", "name": "JPA"}, {"type": "Page", "name": "Persistence_technology"}, {"type": "Page", "name": "WebADASHapplication_framework"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Access_control"}, {"type": "Feature", "name": "Web_UI"}]}, "emfGenerative": {"usage_links": [], "motivation": "[[M/O mapping]] within the Java platform is exercised. The primary data model\nfor companies is an Ecore model from which an object model for \"Model Code\"\nin EMF's sense is derived. The classes of the Ecore-derived object model are\nsomewhat richer than [[POJO]], but their core properties and relationships\nare similar to a regular OO design (such as the one of\n[[101implementation:javaComposition]]), and operations on the EMF objects can \nbe implemented as [[:Category:instance method]]s on the Ecore-derived classes.\nIt should be noted that instance methods on generated classes survive \nre-generation because EMF is capable of distinguishing generated versus\nprogrammer-inserted class members. The Ecore model is interesting in so far that it\nclearly demonstrates the difference between [[Containment relationship|containment]]\nvs. [[reference relationship]]s. In particular, the association of mentees and mentores\nrequires a reference.", "name": "emfGenerative", "headline_links": [{"type": "Concept", "name": "ModelASLASHObject_mapping"}, {"type": "Language", "name": "Ecore"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "EMF"}], "url": "http://101companies.org/index.php/101implementation:emfGenerative", "illustration_links": [], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "Ecore supports modeling of structure. Ecore models are represented as XML documents.\nThe following excerpt shows the declaration of the \"classifier\" for companies: elements in \nthe Ecore-specific namespace are used to break down companies into a name and \na list of departments:\n\n<syntaxhighlight lang=\"xml\">\n<eClassifiers xsi:type=\"ecore:EClass\" name=\"Company\">\n  <eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"name\"\n    ordered=\"false\" lowerBound=\"1\"\n    eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>\n  <eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"depts\"\n    ordered=\"false\" upperBound=\"-1\" \n    eType=\"#//Department\" containment=\"true\"/>\n</eClassifiers>\n</syntaxhighlight>\nThe Ecore-derived, Java-based object model will not be illustrated here because it covers \nproperties and relationships that are similar to a regular OO design, and all additional fields\nand methods are not used in the basic scenario at hand. \n\nObjects of the Ecore-derived model can also be serialized to or de-serialized from XML (XMI).\nTo this end, the namespace for the model and its implementing package need to be registered \nwith the ''registry of EMF EPackage''. Thus:\n\n<syntaxhighlight lang=\"java\">\nEPackage.\n  Registry.\n  INSTANCE.\n  put(CompanyPackage.eNS_URI, CompanyPackage.eINSTANCE);\n</syntaxhighlight>\nFurther, a specific serialization format has to be chosen. To this end, a number of idiosyncratic \nobjects have to be constructed and configured so that a preferred file extension is mapped to \nthe intended serialization behavior. For instance, the process of loading a company from an \".xmi\"\nfile is organized as follows:\n\n<syntaxhighlight lang=\"java\">\nResourceSet resourceSet = new ResourceSetImpl();\nresourceSet.\n  getResourceFactoryRegistry().\n  getExtensionToFactoryMap().\n  put(\"xmi\", new XMIResourceFactoryImpl());\nResource xmiResource = \n  resourceSet.\n  createResource(URI.createFileURI(\"sampleCompany.xmi\"));\nxmiResource.load(null);\nCompany c = (Company)xmiResource.getContents().get(0);\n</syntaxhighlight>\nThat is, ''XMIResourceFactoryImpl'' is a resource factory for XMI; there is also a resource factory ''XMLResourceFactoryImpl'' for XML. When they are used upon saving, XMI and XML output are almost identical; the XMI file though contains a namespace declaration and an attribute referring to XMI.", "languages": [{"type": "Language", "name": "Ecore"}, {"type": "Language", "name": "Java"}], "headline": "[[Model/Object mapping]] for [[Language:Ecore]] and [[Language:Java]] with [[Technology:EMF]]", "architecture": "=== Summary ===\n\nFile ''model/Company.ecore'' is the Ecode model of companies. File ''model/Company.genmodel'' is the EMF generator model which has been derived from the Ecore model; see below. Files ''model/Company*.xsd'' are XML schemas for XML instances of the Ecore model; they were derived with the Export functionality from the generator model; see below. Package ''company'' and subpackages contain the model code for companies. Most of this code has been generated from the generator model (see below) but the generated code has been enriched with instance methods for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]]. (We leverage the EMF convention that all generated members are marked by @generated whereas the manually injected members do not carry such markers. In this manner the model code can be regenerated without overriding manually injected members.) Package ''org.softlang.features.Serialization'' contains boilerplate code for serialization. Package ''org.softlang.tests'' contains JUnit tests for operations on companies and serialization.\n\n=== Transcript ===\n\nCreation and evolution of an EMF project with support for serialization is not straightfoward.\n\nThe following transcript documents the essential steps and constraints.\n\n==== Create EMF Project ====\n\n* -> New -> Empty EMF Project ...\n\n==== Create Ecore Model ====\n\n* -> New -> Ecore Model \n* Choose the \"model\" folder of the EMF project.\n* Adjust name of model (default My.ecore) if needed.\n* Now it is time to work out the Ecore model.\n* One needs to define name of the package, namespace URI, and prefix.\n\nA minimal example follows:\n\n<syntaxhighlight lang=\"xml\">\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ecore:EPackage xmi:version=\"2.0\"\n    xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\"\n    nsURI=\"www.foo.com\" nsPrefix=\"bar\">\n  <eClassifiers xsi:type=\"ecore:EClass\" name=\"xyz\"/>\n</ecore:EPackage>\n</syntaxhighlight>\n==== Create EMF Generator Model ====\n\n* Select the Ecore model in the package explorer.\n* -> New -> Generator model \n* Choose the \"model\" folder of the EMF project.\n* When asked for a Model Importer, choose Ecore Model.\n* When asked for Model URIs, '''you must Browse Workspace, and select the Ecore file'''.\n\n==== Generate Model Code ====\n\n* Open the generator model.\n* Right click on it in the opened view.\n* -> Generate Model Code\n\nThis will generate several files and folders:\n* build.properties\n* plugin.properties\n* plugin.xml\n* src/<your-ecore-name>\n* src/<your-ecore-name/impl>\n* src/<your-ecore-name/util>\n\n==== Enable XMI/XML resources ====\n\n* Open ''plugin.xml'' with ''plug-in manifest editor''.\n* Select ''Dependencies'' tab.\n* Add ''org.eclipse.emf.ecore.xmi.impl'' to ''imported packages''.\n\n==== Create XML Schemas ====\n\n* Right click on Company.genmodel.\n* Select \"Export Model ...\".\n* Select \"XML Schema\" and provide name such as \"Company.xsd\".\n* Select \"XML Schema for XMI\" and provide name such as \"CompanyXMI.xsd\".", "issues_links": [], "usage": "* The implementation is provided as an Eclipse project.\n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in package ''org.softlang.tests''.\n* If you change the Ecore or generator models, you may need to rerun some EMF tools; see the transcript above.", "technologies": [{"type": "Technology", "name": "EMF"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "MASLASHO_mapping"}, {"type": "Concept", "name": "POJO"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Page", "name": "instance_method"}, {"type": "Concept", "name": "Containment_relationship"}, {"type": "Concept", "name": "reference_relationship"}], "issues": "* It is not obvious how to make good use of the generated XML schemas. Validation code should be added so that it is shown how the two schemas Company.xsd and CompanyXMI.xsd can be used for actual validation of presumably sampleCompany.xml and sampleCompany.xmi. In fact, it would also be good to some negative testcases such as an XMI file that can be validated with the XML schema, but which cannot be loaded as a resource. This would make the point that extra validation is performed by EMF. The particular negative test case could exercise, for example, stress the issue of references for mentors. Likewise, some test case should demonstrate the substantial differences between Company.xsd and CompanyXMI.xsd; to this end, it needs to be understood how these different schemas are actually supposed to be used.\n* The generated types end up in the \"company\" package at the top, whereas it should be \"org.softlang.company\" for better alignment with other implementations. It is not obvious how to control the package accordingly.\n* This is more of an idea for another implementation. The generated classes are only used in the simplest POJO-like manner. The generated code also supports richer idioms/design patterns, which should be possibly demonstrated. Likewise, an editor for companies based on EMF or GMF could be targeted.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "Type_generation"}]}, "scala": {"usage_links": [], "motivation": "This defines a minimal approach to realize the basic spec using Scala's OO features. In Scala terms this could be considered a ''Java without semicolons'' implementation.", "name": "scala", "url": "http://101companies.org/index.php/101implementation:scala", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "Scala_2ADOT8ADOT1"}], "headline": "a very very OO implementation of the basic spec in Scala", "architecture": "The implementation features fully mutable classes and total and cut are implemented as instance methods. The implementation contains three files:\n\n* ''Company.scala'' contains everything related to the Company entity\n* ''Employee.scala'' contains classes describing the company personnel\n* ''Dept.scala'' contains the implementation of Departments", "usage": "You need to install sbt to build and run this project as shown on the sbt [http://code.google.com/p/simple-build-tool/wiki/Setup website]. Then change into the base directory of the project and run\n <nowiki>sbt update</nowiki>\nThis should fetch all needed dependencies. After that you can compile the project by typing\n <nowiki>sbt compile</nowiki>\nand then\n <nowiki>sbt test</nowiki>\nto run the tests.", "technologies": [{"type": "Technology", "name": "Scala"}, {"type": "Technology", "name": "sbt"}, {"type": "Technology", "name": "sbtADASHidea"}, {"type": "Technology", "name": "ScalaTest"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "rascal": {"usage_links": [], "motivation": "This contribution serves as an example of how Rascal can be used to create language implementations and IDEs. We show that one can quickly implement a wide range of features with only small amounts of code. [[101feature:Tree structure]] is implemented as the basic data model in AST form. [[101feature:Type-driven transformation]] is implement as an AST transformation. [[101feature:Type-driven query]] is implemented as an AST visit. [[101feature:Data import]] is implemented by parsing based on a grammar from which an SGLL parser is generated. (The same syntax as in [[101implementation:antlrParser]] is used.) [[101feature:Visualization]] is implemented such that the company structure is visualized as a tree and nodes provide info on employer salary with the node size correlating with salary. Editing-related features are implemented through IDE support: editor, syntax highlighting, markers, error messages, folding, outline view.", "name": "rascal", "headline_links": [], "url": "http://101companies.org/index.php/101implementation:rascal", "illustration_links": [], "architecture_links": [], "illustration": "=== Screenshot of the editors/IDE ===\n\nhttps://github.com/101companies/101implementations/raw/master/rascal/101Companies_Rascal_Visualization.png\n\n=== Screenshot of the visualization ===\n\nhttps://github.com/101companies/101implementations/raw/master/rascal/101Companies_Rascal_IDE.jpg", "languages": [], "headline": "A metaprogramming-oriented implementation based on Rascal", "architecture": "TODO", "issues_links": [], "usage": "TODO", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}, {"type": "Implementation", "name": "antlrParser"}, {"type": "Feature", "name": "Visualization"}], "issues": "* Technologies TODO\n* Architecture TODO\n* Usage TODO", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Visualization"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}]}, "haskellCGI": {"usage_links": [], "motivation": "The implementation demonstrates [[Technology:CGI]] style [[web programming]] in [[Language:Haskell]].\nWe make use of a CGI [[library]] for Haskell. A [[Language:XHTML]] combinator [[library]] is used for the composition of dynamic web pages. The [[101companies:System]] is implemented as a [[web application]] using a [[client-server architecture]]. The company is stored in a client-side [[cookie]]. (The server initializes the cookie with a sample company.) The [[server]] processes HTTP requests from and returns HTTP responses to a web client using the CGI technology. Request parameters are extracted from the request's URL in the sense of [[Technology:HTTP]]'s GET parameters. The user can either request to view a company, department, or employee; the user can also cut salaries or save edits in the selected scope. The part to be viewed, cut or saved is specified by making use of a [[Zipper]]-inspired focus concept that is also leveraged by [[101implementation:wxHaskell]]. Such a focus parameter is included into the URL.", "name": "haskellCGI", "illustration_links": [{"type": "Implementation", "name": "happstack"}], "url": "http://101companies.org/index.php/101implementation:haskellCGI", "headline_links": [{"type": "Technology", "name": "CGI"}, {"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Haskell"}], "architecture_links": [], "illustration": "The server is set up as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/Main.hs\" line>\nmain = runCGI $ handleErrors cgiMain\n</syntaxhighlight>\nWe use a default error handler provided by the CGI library ''Network.CGI''. <syntaxhighlight lang=\"haskell\" enclose=\"none\">cgiMain</syntaxhighlight> is the main request handler, which is shown in the next section.\nIn the following we will demonstrate how a specific request is processed by the server.\n\n=== Cutting an employee's salary ===\n\n'''Scenario:''' After receiving an employee view the user clicks the cut button in the browser. The browser sends a request to the server using this URL:\n\n''<nowiki>http://localhost/cgi-bin/HaskellCgi/company.cgi?focus=EmployeeFocus%20[1,0,0]%200&</nowiki>''\n''<nowiki>action=Cut</nowiki>''\n\nBecause of the fact that the CGI library does not support any extraction of information out of the URL path (as opposed to the [[101implementation:happstack|happstack]] implementation), parameters are encoded as URL parameters:\n\n* The action (here <syntaxhighlight lang=\"haskell\" enclose=\"none\">Cut</syntaxhighlight>)\n* The focus (here <syntaxhighlight lang=\"haskell\" enclose=\"none\">EmployeeFocus [1,0,0]</syntaxhighlight>)\n\n==== Main request handler ====\n\nThe main request handler is defined as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/Response.hs\" line>\ncgiMain :: CGI CGIResult\ncgiMain =  do\n    f <- getInput \"focus\"\n    let focusP = maybe CompanyFocus read f\n    a <- getInput \"action\"\n    let actionP = maybe View read a\n    chtml <- (doAction actionP) focusP\n    let title = \"101companies WebApp\" \n    output $ renderHtml $ page title $ chtml\n      where\n        doAction ap = case ap of\n          View  -> doView\n          Cut   -> doCut\n          Save  -> doSave \n</syntaxhighlight>\nWe are working inside the <syntaxhighlight lang=\"haskell\" enclose=\"none\">CGI</syntaxhighlight> monad, which is provided by the CGI library. In lines 3 and 5 <syntaxhighlight lang=\"haskell\" enclose=\"none\">getInput :: MonadCGI m => String -> m (Maybe String)</syntaxhighlight> tries to get the focus and action input parameters as <syntaxhighlight lang=\"haskell\" enclose=\"none\">String</syntaxhighlight> values, which we process in lines 4 and 6. If a parameter is set, that is, <syntaxhighlight lang=\"haskell\" enclose=\"none\">getInput</syntaxhighlight> returns <syntaxhighlight lang=\"haskell\" enclose=\"none\">Just a</syntaxhighlight>, we <syntaxhighlight lang=\"haskell\" enclose=\"none\">read</syntaxhighlight> the String to values of <syntaxhighlight lang=\"haskell\" enclose=\"none\">Focus</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">Action</syntaxhighlight>. If a parameters is not set, we use a default focus respectively a default action. \n\nWe call <syntaxhighlight lang=\"haskell\" enclose=\"none\">doAction</syntaxhighlight>, which is defined in lines 11-14. Based on the <syntaxhighlight lang=\"haskell\" enclose=\"none\">Action</syntaxhighlight> value <syntaxhighlight lang=\"haskell\" enclose=\"none\">doAction</syntaxhighlight> returns one of the action functions <syntaxhighlight lang=\"haskell\" enclose=\"none\">doView</syntaxhighlight>, <syntaxhighlight lang=\"haskell\" enclose=\"none\">doCut</syntaxhighlight> or <syntaxhighlight lang=\"haskell\" enclose=\"none\">doSave</syntaxhighlight>. In this scenario the <syntaxhighlight lang=\"haskell\" enclose=\"none\">case</syntaxhighlight> expression matches on <syntaxhighlight lang=\"haskell\" enclose=\"none\">Cut</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">doAction</syntaxhighlight> returns <syntaxhighlight lang=\"haskell\" enclose=\"none\">doCut</syntaxhighlight>. <syntaxhighlight lang=\"haskell\" enclose=\"none\">cgiMain</syntaxhighlight> applies the focus to the action function in line 7. The action function returns an <syntaxhighlight lang=\"haskell\" enclose=\"none\">Html</syntaxhighlight> value, which is used in line 9 as the content of a new page, rendered to an HTML document and returned as the <syntaxhighlight lang=\"haskell\" enclose=\"none\">CGIResult</syntaxhighlight>.\n\n==== Cutting the cookie ====\n\nThe function <syntaxhighlight lang=\"haskell\" enclose=\"none\">doCut</syntaxhighlight> performs the actual cut action on the company cookie:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/Cut.hs\">\ndoCut :: Focus -> CGI Html\ndoCut f = do\n    c <- tryReadCCookie\n    let cutC = readCutWrite f c   \n    writeCCookie cutC\n    return $ html f cutC\n</syntaxhighlight>\nThe company cookie is read using <syntaxhighlight lang=\"haskell\" enclose=\"none\">tryReadCCookie</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/Save.hs\" line>\ntryReadCCookie = liftM (fromMaybe company) $ \n                 readCookie \"companyCookie\"\n</syntaxhighlight>\nThis function tries to read the company cookie. If the client does not have this cookie stored, the default company is returned.\nIn line 4 <syntaxhighlight lang=\"haskell\" enclose=\"none\">doCut</syntaxhighlight> calls <syntaxhighlight lang=\"haskell\" enclose=\"none\">readCutWrite</syntaxhighlight>, which reads a company, department or employee based on the focus, cuts it and replaces it within the company (see [this!!Cut.hs] for details). In line 5 the manipulated company is written back into the cookie using <syntaxhighlight lang=\"haskell\" enclose=\"none\">writeCCookie</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/Save.hs\" line>\nwriteCCookie s = setCookie $ \n                 newCookie \"companyCookie\" $ \n                 show s    \n</syntaxhighlight>\n==== Returning HTML ====\n\nAfter the company data is saved in the cookie <syntaxhighlight lang=\"haskell\" enclose=\"none\">doCut</syntaxhighlight> calls <syntaxhighlight lang=\"haskell\" enclose=\"none\">html</syntaxhighlight> passing the focus and the new company:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellCGI/CompanyHtml.hs\" line>\nhtml :: Focus -> Company -> Html\nhtml f = case f of \n  CompanyFocus        -> companyHtml f\n  (DeptFocus _)       -> deptHtml f\n  (EmployeeFocus _ _) -> employeeHtml f\n  (ManagerFocus _)    -> employeeHtml f   \n</syntaxhighlight>\nBased on the focus <syntaxhighlight lang=\"haskell\" enclose=\"none\">html</syntaxhighlight> calls one of the functions for composing HTML. In this scenario <syntaxhighlight lang=\"haskell\" enclose=\"none\">case</syntaxhighlight> matches on <syntaxhighlight lang=\"haskell\" enclose=\"none\">(EmployeeFocus _ _)</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">employeeHtml</syntaxhighlight> is called. This function composes HTML for the employee in question using various HTML combinators (see [this!!CompanyHtml.hs] for details).", "languages": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "XHTML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Technology:CGI]] style [[Web programming]] in [[Language:Haskell]]", "architecture": "In [this!!Main.hs] the server is set up using request handlers provided by [this!!Response.hs]. The save actions are performed by functionality hosted by [this!!Save.hs]. An algebraic datatype for actions is definied in [this!!Types.hs]. HTML pages are composed in [this!!CompanyHtml.hs].\nThe algebraic datatype for companies can be found in [this!!Company.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. A sample company can be found in [this!!SampleCompany.hs]. [this!!Cut.hs] and [this!!Total.hs] provide cut and total functionality.", "usage": "* First you need a webserver. In the following we explain the steps for XAMPP<cite>xampp</cite>.\n* Compile [this!!Main.hs] to a CGI file using GHC: <syntaxhighlight lang=\"make\">ghc --make -o company.cgi Main.hs</syntaxhighlight>\n* Place ''company.cgi'' in the folder ''cgi-bin'' of your XAMPP installation.\n* Place [this!!style.css] in the folder ''htdocs'' of your XAMPP installation.\n* Open ''http://localhost/cgi-bin/haskellCGI/company.cgi'' in a web browser to see the application's root view.\nCompiling the project is scripted by the ''run'' target in [this!!Makefile.hs].", "technologies": [{"type": "Technology", "name": "CGI"}, {"type": "Technology", "name": "GHC"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "CGI"}, {"type": "Concept", "name": "web_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "library"}, {"type": "Language", "name": "XHTML"}, {"type": "Concept", "name": "library"}, {"type": "Page", "name": "System"}, {"type": "Concept", "name": "web_application"}, {"type": "Concept", "name": "clientADASHserver_architecture"}, {"type": "Concept", "name": "cookie"}, {"type": "Concept", "name": "server"}, {"type": "Technology", "name": "HTTP"}, {"type": "Concept", "name": "Zipper"}, {"type": "Implementation", "name": "wxHaskell"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Distribution"}]}, "xtext": {"usage_links": [], "motivation": "Based on an Xtext grammar, model code and a corresponding DSL editor is generated, with which companies can be edited and operations for totaling and cutting salaries can be invoked. Textual syntax is described by the EBNF dialect of Xtext. Ecore is used for the representation of models where the Ecore model is derived from the EBNF. The generated parser maps textual syntax to EObjects. The parser is ANTLR-based. The implementation hence also relates to EMF-based implementations such as [[101implementation:emf]] as well as ANTLR-based implementations such as [[101implementation:antlrParser]].", "name": "xtext", "url": "http://101companies.org/index.php/101implementation:xtext", "headline_links": [], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}], "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "EBNF"}], "headline": "An XText- and Eclipse-based DSL editor", "architecture": "* [[101feature:Tree structure]]: implemented by the generated EMF classes.\n* [[101feature:Type-driven query]]: manually implemented as verification in IOIJavaValidator.java\n* [[101feature:Type-driven transformation]]: manually implemented as verification and corresponding editor quickfix in IOIJavaValidator.java and IOIQuickfixProvider.java.\n* [[101feature:Data import]] TODO", "issues_links": [], "usage": "TODO", "technologies": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "Xtext"}, {"type": "Technology", "name": "Ecore"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "emf"}, {"type": "Implementation", "name": "antlrParser"}], "issues": "* Usage information missing\n* Architecture information somewhat sparse\n* The information markers indicating the total salary per department are not correctly updated when updating salaries manually.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}]}, "scalaAkkaActors": {"usage_links": [], "motivation": "This implementation uses Akka to show how a strong, static type system can serve to type check the inherently dynamic actor pattern by encapsulating actors behind typesafe proxy interfaces.", "name": "scalaAkkaActors", "url": "http://101companies.org/index.php/101implementation:scalaAkkaActors", "headline_links": [{"type": "Language", "name": "Scala"}, {"type": "Technology", "name": "Akka"}], "architecture_links": [], "languages": [], "headline": "This is an implementation of the basic spec using [[Language:Scala]] together with the [[Technology:Akka]] toolkit's actor library as well as Akka's Typed Actors.", "architecture": "In ''Company.scala'' a regular Akka actor-based implementation is given as a reference. ''TypedCompany.scala'' shows how the message passing is hidden behind traits that provide a front from which Akka can construct a proxy object to interact with.", "issues_links": [], "usage": "This implementation uses sbt 0.10 as build tool, available at [http://github.com/harrah/xsbt/]. After installing sbt just change into the project directory and run\n <nowiki>sbt</nowiki>\nto create the project, followed by\n <nowiki>sbt update</nowiki>\nThis should fetch any needed dependencies. After that you can compile the project by typing\n <nowiki>sbt compile</nowiki>\nand then\n <nowiki>sbt test</nowiki>\nto run the tests.", "technologies": [{"type": "Technology", "name": "Scala"}, {"type": "Technology", "name": "Akka"}, {"type": "Technology", "name": "sbt"}, {"type": "Technology", "name": "specs2"}], "type": "Implementation", "motivation_links": [], "issues": "Akka is currently transitioning to version 2.0 which radically changes and simplifies the implementation of TypedActors. Upon release of Akka 2.0, a revision of this implementation is to be scheduled.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "template": {"usage_links": [{"type": "Page", "name": "Java_mapping_theme"}], "motivation": "This implementation makes the contribution of demonstrating xyz using [[Technology:Eclipse]] for [[Language:Cobol]] such that the [[101feature:Type-driven query]] can be implemented in a particularly exciting way. This is interesting in so far that [[Technology:Eclipse]] is specifically prepared to achieve WOW.\n\n'''Explanations:'''\n* This is important, required information.\n* The text must explain why the implementation at hand makes a contribution.\n* This should be freestyle text.\n* Relationships to other implementations should be pointed out.", "name": "template", "headline_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Language", "name": "Cobol"}], "url": "http://101companies.org/index.php/101implementation:template", "illustration_links": [{"type": "Page", "name": "Haskell_theme"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "Haskell_theme"}], "illustration": "'''Explanations:'''\n* This is optional information. \n* Code snippets and explanations thereof are typically mixed in this section.\n* See, for example, implementations of the [[:Category:Haskell theme]] for examples.", "languages": [{"type": "Language", "name": "Cobol"}, {"type": "Language", "name": "XML"}], "headline": "Demonstrate xyz using [[Technology:Eclipse]] for [[Language:Cobol]]", "architecture": "* Module \"m1.cob\": Implementation of [[101feature:Tree structure]]\n* Module \"m42.cob\": Implementation of [[101feature:Type-driven query]]\n* Module \"m88.cob\": Implementation of [[101feature:Type-driven transformation]]\n* File \"test.sh\": automated tests\n\n'''Explanations:'''\n* This is optional information. \n* The components of the implementation are somehow enumerated.\n* The existence of tests should be pointed out.\n* See, for example, implementations of the [[:Category:Haskell theme]] for examples.\n* Use itemized lists where possible; resort to freestyle text where necessary.\n* One should mention the code units for all implemented 101companies features.\n* Code-level details should not be discussed.\n* Additional architectural details may be of interest:\n** Design patterns, if they were not already mentioned in the motivation section.\n** Interesting properties of code units and relationships between them.\n** All remaining implementation- or design-level choices that are worth emphasizing.", "issues_links": [{"type": "Technology", "name": "Hibernate"}], "usage": "* Open the project in Eclipse.\n* Execute the JUnit tests in package \"tests\".\n\n'''Explanations:'''\n* This is important, required information. \n* The steps for building and running the implementations should be described.\n* Use itemized lists where possible; resort to freestyle text where necessary.\n* A non-expert should be enabled to run the implementation, if possible.\n* See, for example, implementations of the [[:Category:Java mapping theme]] for examples.\n* Typical items of the description include the following:\n** Is another 101companies implementation needed as prerequisite?\n** Are specific preparations to install libraries, plugins, or other such entities?\n** What IDE, if any, to use for building and running the implementation?\n** What steps have to be performed to actually build the implementation?\n** Are build scripts available for automated build?\n** How to run the implementation?\n** Are test cases available that can demonstrate the implementation?\n** Are clean-up steps needed to run the implementation repeatedly?", "technologies": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "Ant"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Language", "name": "Cobol"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Technology", "name": "Eclipse"}], "issues": "The implementation uses a naive model of change tracking and committing changes. That is, essentially the complete object graph is visited and object-by-object is committed to the database. Hence, the performance of the implementation is problematic. It needs to be determined what idioms of [[Technology:Hibernate]] should be used instead so that more efficient and less manual commits are achieved.\n\n'''Explanations:'''\n* This is optional information. \n* This section identifies issues worth knowing or fixing.\n* Use itemized lists where possible; resort to freestyle text where necessary.\n* Abstract examples of \"issues\" are these:\n** Some 101companies feature is implemented incompletely..\n** Some data or behavior is implemented incorrectly.\n** Some part of the implementation is not in compliance with best practices.\n** Some aspect of the implementation is not fully understood.\n** The technologies at hand suggest important variation point that should be studied in further implementations.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "mongodb": {"usage_links": [], "motivation": "This implementation demonstrates the basic features of a [[Technology:Document-oriented database]] by example of [[Technology:MongoDB]]. Entries do not need to adhere to a rigid tuple shape like in a relational database. In MongoDB, entries are contained in [[Language:BSON]] objects which are organized in collections. The implementation is done in [[Language:JavaScript]] which is MongoDB's primary query language and shows how to use of the MapReduce pattern to process contained data inside the database. Typical patterns for a data model most beneficial for a document-oriented DB are also explained.", "name": "mongodb", "url": "http://101companies.org/index.php/101implementation:mongodb", "headline_links": [], "illustration": "One MongoDB instance can handle many databases, in which collections of documents reside. In this implementation the 101companies [[101feature:Tree Structure]] is mapped onto the MongoDB server as follows:\n\n* Each company has its own database.\n* Per database there is:\n** One collection for employees\n** one collection for departments\n\nEach employee refers to her department by its ObjectID, a unique identifier assigned by MongoDB to each entry. This is also employed to have departments refer to their super-departments in the tree, as well as to their managers.\nFor top-level departments, this reference is simply omitted.\n\nAn example employee entry looks like this:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t\"_id\" : ObjectId(\"4fd1ef6716fc9783d9e779f0\"),\n\t\"address\" : {\n\t\t\"city\" : \"Koblenz\",\n\t\t\"country\" : \"Germany\"\n\t},\n\t\"dept\" : ObjectId(\"4fd1ea2942afa58847224864\"),\n\t\"name\" : \"Ralf\",\n\t\"salary\" : 1234\n}\n</syntaxhighlight>\nEach department carries information about its direct parent under the key \"super\" and a list of all its ancestor department Object IDs under \"ancestors\". Note that both the \"ancestors\" and \"super\" field are omitted in top-level departments as those have neither and there is now schema forcing us to keep these entries.\n\nAn example Department looks like this:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t\"_id\" : ObjectId(\"4fd2061816fc9783d9e779f6\"),\n\t\"manager\" : ObjectId(\"4fd2073116fc9783d9e779f7\"),\n\t\"super\" : ObjectId(\"4fd1f7b616fc9783d9e779f3\"),\n\t\"name\" : \"Dev1.1\",\n\t\"ancestors\" : [\n\t\tObjectId(\"4fd1f7b616fc9783d9e779f3\"),\n\t\tObjectId(\"4fd1f78316fc9783d9e779f2\")\n\t]\n}\n</syntaxhighlight>\nThe reasoning behind the collection layout is as follows: One could easily use the capabilities of MongoDB to save a company as one document, like this:\n\n<syntaxhighlight lang=\"javascript\">\n{\n        \"company\" : \"meganalysis\"\n        \"depts\" : [\n                        {\n                                \"name\" : \"Research\",\n                                \"manager\" : {...},\n                                \"employees\" : [...]\n                        },\n                        {\n                                \"name\" : \"Development\",\n                                \"manager\" : {...},\n                                \"employees\" : [...],\n                                \"subdepts\" : [\n                                                {\n                                                    \"name\" : \"Dev1\",\n                                                    ...\n                                                }\n                                             ]}]}\n</syntaxhighlight>\nThis has two major disadvantages: First, it is difficult to search through this structure and secondly MongoDB places a 16 MB limit on single documents. If a company grows large, it might hit this limit.\nThe second problem might apply even if we change \"subdepts\" and \"employees\" fields to reference to different documents as the lists might still grow indefinitely. By adding parent information to the children instead, we work around this limitation.\nFor departments, references to all ancestors are also saved as this enables us to build the department hierarchy tree-structure more easily.\n\nTotal is implemented using MongoDBs MapReduce capabilities. The map function will emit one entry per employee, all under the same key. The reduce function will just sum up all these entries and return the results.\nNote: Normally, the result of a MapReduce computation will be written into a new collection inside MongoDB, due to the small size of the example, the server is advised to simply return the computation as a JSON object.\n\nCut is implemented by simply iterating over the employees collection and changing the salary field for each document inside.\n\nIn addition to this, MapReduce code to create all subtrees to a company is provided. This is achieved as follows:\n\nThe map function essentially takes the list of ancestors for each department and emits pairs of {ancestor, dept} for each of the department's ancestors. The reduce function then gathers all pairs who are keyed by the same ancestors, yielding all subtrees contained in the hierarchy.\nIn a second step, using a few simple queries on the employee database, all employees that are associated with each subtrees are added.", "languages": [{"type": "Language", "name": "JavaScript"}], "headline": "Provide an example of employing the features of a document oriented database to manage 101companies.", "illustration_links": [{"type": "Feature", "name": "Tree_Structure"}], "usage": "In the json subfolder are two collection dumps created via the mongoexport tool. To import those, make sure you have a MongoDB server running on your local machine and simply run the packaged script:\n\n<syntaxhighlight lang=\"bash\">\n$ ./rebuild.sh\n</syntaxhighlight>\nThis will reimport the employee and dept collections for the meganalysis company into the local MongoDB instance.\n\nFeature demonstrations are run using the mongo command by simply specifying the correct database and the corresponding JavaScript files as command line arguments like this:\n\n<syntaxhighlight lang=\"bash\">\n$ mongo meganalysis total.js\n</syntaxhighlight>\nEach script will print out the results of the respective computation.", "technologies": [{"type": "Technology", "name": "MongoDB"}, {"type": "Technology", "name": "Data_aggregation"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "DocumentADASHoriented_database"}, {"type": "Technology", "name": "MongoDB"}, {"type": "Language", "name": "BSON"}, {"type": "Language", "name": "JavaScript"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "xom": {"usage_links": [], "motivation": "See [[101implementation:dom]] for a general motivation for exercising\n[[in-memory XML processing]]. The present implementation simply exercises\nyet another DOM-like API. We end up providing a descendants axis to this\nend.", "name": "xom", "url": "http://101companies.org/index.php/101implementation:xom", "headline_links": [{"type": "Concept", "name": "inADASHmemory_XML_processing"}, {"type": "Technology", "name": "XOM"}, {"type": "Language", "name": "Java"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}], "headline": "exercise [[in-memory XML processing]] with [[Technology:XOM]] in [[Language:Java]]", "usage": "* The implementation is provided as an Eclipse project.\n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available though class ''org.softlang.xom.Tests''.", "technologies": [{"type": "Technology", "name": "XOM"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "dom"}, {"type": "Concept", "name": "inADASHmemory_XML_processing"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "jaxbSubstitution": {"usage_links": [{"type": "Implementation", "name": "jaxbComposition"}], "motivation": "See [[101implementation:jaxbComposition]] for the overall motivation of exercising \n[[Technology:JAXB]] and for arguably a simple baseline of a schema and corresponding schema-derived classes. The present implementation represents an attempt to model different kinds of subunits of department (i.e., sub-departments and employees) as subtypes of a common supertype of subunits, where subtyping is meant here in the sense of XSD's substitution grouping mechanism. The result is rather complex at both ends.", "name": "jaxbSubstitution", "url": "http://101companies.org/index.php/101implementation:jaxbSubstitution", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XSD"}, {"type": "Technology", "name": "JAXB"}], "architecture_links": [{"type": "Implementation", "name": "jaxbComposition"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "Java"}], "headline": "[[Object/XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]", "architecture": "See [[101implementation:jaxbComposition]].", "usage": "See [[101implementation:jaxbComposition]].", "technologies": [{"type": "Technology", "name": "JAXB"}, {"type": "Technology", "name": "xjc"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "jaxbComposition"}, {"type": "Technology", "name": "JAXB"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "hibernate": {"usage_links": [], "motivation": "[[Object/Relational mapping]] or [[persistence]] on the Java platform is exercised using \n[[Technology:Hibernate]]. The primary data model for companies is a straightforward\nobject model for [[POJO]]s. A mapping is defined to associate a relational schema\nwith the classes. The mapping is specified in an [[Language:XML]] language and organized\nin a per-class manner. For each class, properties and [[:Category:relationship]]s are specified by\nthe mapping. It is insightful to compare the object model and the mapping-implied relational\nschema. It is also insightful to compare the latter schema with one that was ''natively'' \ndesigned from a relational database point of view; see [[101implementation:mySql]]. In \nparticular, the object model and the implied relational schema are essentially \"optimized\" \nfor downwards traversal of the company structure whereas a native relational schema would\nrather provide foreign keys for upwards navigation (such as navigating from an employee to\nits department or company).", "name": "hibernate", "headline_links": [{"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "HQL"}, {"type": "Technology", "name": "Hibernate"}], "url": "http://101companies.org/index.php/101implementation:hibernate", "illustration_links": [{"type": "Concept", "name": "POJO"}, {"type": "Language", "name": "HQL"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Persistence"}], "illustration": "Consider the following sketch of the class for departments:\n\n<syntaxhighlight lang=\"java\">\npublic class Department {\n  private Long id;\n  private String name;\n  private Set<Employee> employees;\n  private Set<Department> subdepts;\n\n  public Long getId() { ... }\n  private void setId(Long id) { ... }\n  public String getName() { ... }\n  public void setName(String name) { ... }\n  public Set<Employee> getEmployees() { ... }\n  private void setEmployees(Set<Employee> employees) { ... }\n  public Set<Department> getSubdepts() { ... }\n  private void setSubdepts(Set<Department> subdepts) { ... }\n}\n</syntaxhighlight>\nEach persistent class must provide a property (i.e., a getter and a setter) for\nan ''id'' that can serve as primary key in the database. Properties of \ncollection types (in fact, set types) proxy for one-to-many relationships.\nOther than that, a persistent class is not much different from a regular\n[[POJO]]-like class. (There are some private setters that would be missing\nfrom a native object model. These setters are needed for object population.)\n\nConsider the mapping file of class ''Department'' to table ''DEPARTMENT'':\n\n<syntaxhighlight lang=\"xml\">\n<hibernate-mapping>\n <class name=\"org.softlang.company.Department\" table=\"DEPARTMENT\">\n  <id name=\"id\" column=\"ID\">\n    <generator class=\"native\" />\n  </id>\n  <property name=\"name\" />\n  <set name=\"employees\" cascade=\"all\">\n   <key column=\"DEPT_ID\" />\n   <one-to-many class=\"org.softlang.company.Employee\" />\n  </set>\n  <set name=\"subdepts\" cascade=\"all\">\n   <key column=\"DEPT_ID\" />\n   <one-to-many class=\"org.softlang.company.Department\" />\n  </set>\n </class>\n</hibernate-mapping>\n</syntaxhighlight>\nAll properties of the class are associated with the table.\nThat is, the ''id'' property is directly mapped to a primary key column\n''ID'' of the ''DEPARTMENT'' table. Also, the ''name'' property is mapped\nto a column of just that name---applying default mapping rules between\nSQL types and Java types. Further, the ''employees'' property is \nnon-trivially associated with a foreign key ''DEPT_ID'' of the \n''EMPLOYEE'' table---which is only indirectly identified through the \nmentioning of the ''Employee'' class; likewise for sub-departments.\n\nPersistent objects are brought back to life as follows:\n\n<syntaxhighlight lang=\"java\">\npublic Company loadCompany(String name) {\n  this.session = getSessionFactory().getCurrentSession();\n  this.session.beginTransaction();\n  List<?> result = this.session.createQuery(\n    \"from Company where name = '\" + name + \"'\").list();\n  for (Object o : result)\n    return (Company)o;\n  return null;\n}\n</syntaxhighlight>\nThat is, an [[Language:HQL]] query is executed to retrieve a company \nthat is identified by name; the Hibernate framework takes care of populating\nthe company object and all its sub-objects. If the requested company cannot be found,\nthen ''null'' is returned.\n\nFinally, consider the Hibernate configuration:\n\n<syntaxhighlight lang=\"xml\">\n<hibernate-configuration>\n <session-factory>\n  <!-- Database connection settings. -->\n  <property name=\"connection.driver_class\">org.hsqldb....\n  <property name=\"connection.url\">...\n  <property name=\"connection.username\">...\n  <property name=\"connection.password\">...\n   <!-- Create the database schema, if needed; update otherwise -->\n  <property name=\"hbm2ddl.auto\">update</property>\t\t\t  \t\t\t  \n  <!-- This part lists all the mapping files present in the project -->\n  <mapping resource=\"org/softlang/company/Company.hbm.xml\" />\n  <mapping resource=\"org/softlang/company/Department.hbm.xml\" />\n  <mapping resource=\"org/softlang/company/Employee.hbm.xml\" />\n  ...\n </session-factory>\n</hibernate-configuration>\n</syntaxhighlight>\nThis configuration helps the runtime to connect to the right database, to find\nall mapping files of interest, and to define some essential settings. For instance,\nHibernate is informed here that the database catalog is to be updated automatically\n(see ''hbm2ddl.auto'' ... ''update'') upon starting a Hibernate session. In particular,\nif the mapping-implied tables are not yet declared in the database, then they will\nbe created automatically.", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "HSQLDialect"}, {"type": "Language", "name": "HQL"}, {"type": "Language", "name": "XML"}], "headline": "[[Object/Relational mapping]] for [[Language:Java]] and [[Language:SQL]]/[[Language:HQL]] with [[Technology:Hibernate]]", "architecture": "Package ''org.softlang.company'' hosts the java object model for [[101feature:Tree structure]]\nand the O/R-mapping files. Package ''org.softlang.features'' provides functionality for \n[[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] as well as boilerplate code for \n[[101feature:Persistence]]. The folder ''scripts'' contains SQL-scripts to create tables\n(extracted from the hibernate log; there is no need to execute these statements), and to \npopulate the tables (needed in the workflow described below). The Hibernate configuration \nfile is located in the root dir. The HSQLDB database files are located in the data dir.", "issues_links": [], "usage": "Please follow these steps carefully.\n\n=== Start from a clean setup ===\n\nUpon checking out the implementation, you are clean.\n\nThe \"make clean\" target in the root dir should bring you back to a clean setup.\n\nHowever, make sure the HSQL database server is shutdown as you go clean.\n\n=== Build the project ===\n\nThis is an Eclipse project.\n\nEverything is included.\n\nThe project should built fine within Eclipse without additional efforts.\n\n=== Start the HSQL database server ===\n\n* Go to the data dir of the distribution.\n* Run the following command in the command line:\n** > java -classpath ../lib/hsqldb.jar org.hsqldb.Server \n** You can also send it to the background if you like.\n** You can also go to the root dir and run \"make start-db\" instead.\n\n=== Start the database monitor ===\n\n* Go to the root dir of the distribution.\n* Run the following command in the command line:\n** > java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing\n** You can also send it to the background if you like.\n** You can also go to the root dir and run \"make start-gui\" instead.\n* When the GUI pops up, make sure to select '''\"HSQL Database Engine Server\"'''.\n\n=== Create tables ===\n\nThe tables are automatically created by trying to query them.\n\nThere is JUnit test ''Load'' in package ''org.softlang.tests'' which just does that.\n\nDo ''refresh'' in the database monitor to see all tables in the left panel.\n\n=== Populate tables ===\n\nSuitable INSERT statements for population are to be found in scripts/PopulateTables.sql\n\nOpen the file and copy and paste its content over to the database monitor, and execute the statements.\n\nYou may want to double-check that the tables were populated.\n\nTo this end, enter a SQL statement such as \"select * from EMPLOYEE;\".\n\n=== More testing ===\n\nRun the JUnit test ''Operations'' in package ''org.softlang.tests''.\n\nThe modified state is '''not''' committed; hence, the test can be executed time and again.\n\nRun the JUnit test ''Constraints'' in package ''org.softlang.tests''.\n\nThere is no state changes.\n\nRun the JUnit test ''Save'' in package ''org.softlang.tests''.\n\nThe modified state is committed; the test will only succeed once.\n\n=== Finish off ===\n\nGo to the database monitor and enter and execute \"shutdown;\".\n\nQuit the database monitor.\n\nYou may also want to run \"make clean\" in the root dir to be clean for next time.", "technologies": [{"type": "Technology", "name": "Hibernate"}, {"type": "Technology", "name": "HSQLDB"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Concept", "name": "persistence"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Concept", "name": "POJO"}, {"type": "Language", "name": "XML"}, {"type": "Page", "name": "relationship"}, {"type": "Implementation", "name": "mySql"}], "issues": "* Efficiency/incrementality of loading objects and saving changes", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}]}, "rubyonrails": {"usage_links": [], "motivation": "We exercise [[Web programming]] using [[Technology:Ruby on Rails]]. That is, we use this MVC [[Category:Web-application framework]]  to provide  [[101feature:Attribute editing|attribute]] and [[101feature:Structural editing|structural editing]] of companies by using a dynamically typed language. We make use of several framework tools for generating code and migrating.", "name": "rubyonrails", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:rubyonrails", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Ruby"}, {"type": "Technology", "name": "Ruby_on_Rails"}], "architecture_links": [], "illustration": "Most of the implementations code was generated using the ''rails generate scaffold'' command. This generates \n* A model for the given class and attributes\n* A view including pages for editing, indexing and showing instances\n* A controller for actions like creating, updating and removing of instances\n\nWe then used ''rake db:migrate'' to migrate the tables in the underlining database.\n\nIn the next section we will illustrate how routing rules and resources are defined.\n\n=== Routes ===\n\nThe ''routes.rb'' file defines a default route when entering the application:\n\n<syntaxhighlight lang=\"ruby>\nget \"home/index\"\n</syntaxhighlight>\nThat is, when entering by just providing \"http://localhost:3000/\" as a URL the user is redirected to the specified page.\n\nThis file also defines ruby resources:\n\n<syntaxhighlight lang=\"ruby\">\nresources :employees\n\nresources :departments do\n  resources :departments\n  resources :employees\nend \n\nresources :companies do\n  resources :departments\nend\n</syntaxhighlight>\nThese rules define what kind of resources the application contains and how these resources should be nested. For instance, a company resource has many department resources.\n\nThe framework also provides routes for both index pages and pages for showing a concrete instance. For companies these helpers are provided as follows:\n* <syntaxhighlight lang=\"ruby\" enclose=\"none\">companies_path</syntaxhighlight> provides the URL for the index page for all companies.\n* <syntaxhighlight lang=\"ruby\" enclose=\"none\">company_path(someCompany)</syntaxhighlight> provides the URL for the given company.\n\nThis example also shows the use of pluralisation for name conventions.\n\nIn the next section we will continue by illustration the binding between models and views.\n\n=== Model/View binding ===\n\nWe will illustrate this topic by showing how one can add an employee to an existing department using the edit page for departments.\n\nIn the ''edit.html.erb'' template file for departments we define a form for adding an employee:\n\n<syntaxhighlight lang=\"rails\">\n<%= form_for([@department, @department.employees.build]) do |f| %>\n  <div class=\"field\">\n    <%= f.label :name %><br />\n    <%= f.text_field :name %>\n    Set as manager?\n    <%= f.check_box :isManager %>\n  </div>\n  <div class=\"actions\">\n    <%= f.submit %>\n  </div>\n<% end %>\n</syntaxhighlight>\nWe use <syntaxhighlight lang=\"ruby\" enclose=\"none\">form_for</syntaxhighlight> to generate a form for a new employee. Submitting this form sends a request including the new employee in JSON and the department_id of the owning department. This behavior is caused by the fact that we added employees as a nested resource of departments. \n\nIn the form <syntaxhighlight lang=\"ruby\" enclose=\"none\">f</syntaxhighlight> we then bind the name of the new employee to a textfield and the <syntaxhighlight lang=\"ruby\" enclose=\"none\">isManager</syntaxhighlight> property to a checkbox.\n\nSubmitting this form will call the employee controller's <syntaxhighlight lang=\"ruby\" enclose=\"none\">create</syntaxhighlight> method:\n\n<syntaxhighlight lang=\"ruby\">\ndef create\n      @department = Department.find(params[:department_id])\n      @employee = @department.employees.create(params[:employee])\n      redirect_to department_path(@department)\n  end\n</syntaxhighlight>\nThis method starts by searching the department instance by the given id. It then calls the <syntaxhighlight lang=\"ruby\" enclose=\"none\">create</syntaxhighlight> method of the employees collection of this department. Finally the method redirects the user to this department.", "languages": [{"type": "Language", "name": "Ruby"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Web programming]]  in [[Language:Ruby]] with [[Technology:Ruby on Rails]]", "architecture": "The MVC code for this implementation can be found in [this!!companies/app]. The [this!!companies/app/models models] folder holds models for companies, departments and employees. The [this!!companies/app/controllers controllers] folder holds the controllers for actions like indexing, creating, updating and destroying of instances. The [this!!companies/app/views views] folder contains the views for all classes including editing, showing and indexing views.\n\nThe schema for the underlining database can be found in [this!!companies/db/schema.rb schema.rb]. The migration files in the [this!!companies/db/migrate migrate] folder.\n\nThe routing rules can be found in  [this!!companies/config/routes.rb routes.rb].", "usage": "* Run ''rails s'' in the project's root folder.\n* Run ''rake db:migrate'' in the project's root folder", "technologies": [{"type": "Technology", "name": "Ruby_on_Rails"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Technology", "name": "Ruby_on_Rails"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}]}, "xslt": {"usage_links": [], "motivation": "XSLT is easily applied to the basic query/transformation features. Structurally recursive,\n[[endogenous transformation]]s are taken care of by XSLT transformations\nthat leverage the \"copy-recurse\" idiom for all elements that do not require\nany \"local\" change; see below. Structurally recursive queries are handled similarly;\noutput mode \"text\" is used, though. The data model for companies is provided as an XML schema.\nValidity is not checked or otherwise implied.", "name": "xslt", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:xslt", "headline_links": [{"type": "Page", "name": "XML_processing"}, {"type": "Language", "name": "XSLT"}], "architecture_links": [], "illustration": "The transformation relies on the \"copy-recurse\" idiom.\n\n<pre>\n\t<xsl:template match=\"@*|node()\">\n\t\t<xsl:copy>\n\t\t\t<xsl:apply-templates select=\"@*|node()\"/>\n\t\t</xsl:copy>\n\t</xsl:template>\n</pre>", "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "XSLT"}], "headline": "[[:Category:XML processing]] with [[Language:XSLT]]", "architecture": "Each of the implemented query/transformation features is modeled by a designated XML transformation.", "usage": "See the Makefile for running some tests.\n\nAn xsltproc implementation is readily available on OS X, Linux et al.\n\nA version of Saxon is included in the code repository for this implementation.\n\nTested with this version of xsltproc:\n\n<pre>\n$ xsltproc -V\nUsing libxml 20703, libxslt 10124 and libexslt 813\nxsltproc was compiled against libxml 20703, libxslt 10124 and libexslt 813\nlibxslt 10124 was compiled against libxml 20703\nlibexslt 813 was compiled against libxml 20703\n\nAlso possible to work with Saxon from:\n\thttp://saxon.sourceforge.net/ or http://www.saxonica.com/\n</pre>\n\nTested with this version of Saxon:\n\n<pre>\n$ java -jar saxon/saxon9he.jar\nNo source file name\nSaxon-HE 9.2.1.2J from Saxonica\nUsage: see http://www.saxonica.com/documentation/using-xsl/commandline.html\nOptions: \n   ...\n</pre>\n\nTested on the following machines:\n\n<pre>\n\tDarwin ... 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386\n\t\t(both test-xsltproc and test-saxon)\n\tDarwin ... 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386\n\t\t(both test-xsltproc and test-saxon)\n\tLinux ... 2.6.32-21-generic #32-Ubuntu SMP Fri Apr 16 08:09:38 UTC 2010 x86_64 GNU/Linux\n\t\t(both test-xsltproc and test-saxon with Java 6)\n\tLinux ... 2.6.16.60-0.69.1-ppc64 #1 SMP Fri Sep 17 17:07:54 UTC 2010 ppc64 ppc64 ppc64 GNU/Linux\n\t\t(only test-xsltproc due to the lack of Java 5+)\n\tLinux ... 2.6.13-15.18-bigsmp #1 SMP Tue Oct 2 17:36:20 UTC 2007 i686 i686 i386 GNU/Linux\n\t\t(only test-xsltproc due to the lack of any Java)\n\tMicrosoft Windows XP [Version 5.1.2600]\n\t\t(only saxon due to the lack of xsltproc)\n</pre>\n\nThe project can be opened with Eclipse for convenience.", "technologies": [{"type": "Technology", "name": "xsltproc"}, {"type": "Technology", "name": "Saxon"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "endogenous_transformation"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "csharpLinqToXml": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "LINQ to XML is used in 2 scenarios:\n\n* Reconstruct full in-memory model. Linq2Xml is used to create a full in-memory object tree from the source XML file.\n* Cut and Total operations implemented directly on top of XML file where the model is stored.", "name": "csharpLinqToXml", "url": "http://101companies.org/index.php/101implementation:csharpLinqToXml", "headline_links": [{"type": "Concept", "name": "inADASHmemory_XML_processing"}, {"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "LINQ_to_XML"}], "architecture_links": [{"type": "Implementation", "name": "csharp"}], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "[[in-memory XML processing]] in [[Language:CSharp|C#]] with [[Technology:LINQ to XML]]", "architecture": "C# object-oriented representation of 101companies model iimlemented in [[101implementation:csharp]] is used. It contains classes with required properties and methods(features implementations).\n\n* Manual reconsctruction of object model from xml\n* Transformations for pure xml model representation without using OO-model", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project file.\nThe project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).\nNunit GUI or other Visual studio extension (e.g., Resharper) should be used for executing unit tests.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "LINQ_to_XML"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "jdbc": {"usage_links": [{"type": "Implementation", "name": "mySql"}], "motivation": "", "name": "jdbc", "url": "http://101companies.org/index.php/101implementation:jdbc", "headline_links": [{"type": "Technology", "name": "JDBC"}], "languages": [{"type": "Language", "name": "SQL"}, {"type": "Language", "name": "Java"}], "headline": "Database programming with [[Technology:JDBC]]", "usage": "* You need a suitable JDBC Driver for MySQL\n** An appropriate driver is available here: http://dev.mysql.com/downloads/connector/j/\n** Some version of that driver is readily included into the project.\n* Set up a company database.\n** Follow the steps described here [[101implementation:mySql]] to set up the company database. That is, stop after populating the tables. \n* There are JUnit tests available as the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.", "technologies": [{"type": "Technology", "name": "JDBC"}, {"type": "Technology", "name": "MySQL"}], "type": "Implementation", "motivation_links": [], "features": []}, "javaStatic": {"usage_links": [{"type": "Implementation", "name": "javaComposition"}], "motivation": "The present  implementation can be viewed as a variation on [[101implementation:javaComposition]]. \nOperations on companies are implemented as families of static methods in extra classes. \nThis is straightforward '''if''' the operations are not polymorphic. \nThis is necessarily the case for the given object model only uses object composition as opposed to \nclass inheritance or interface polymorphism.", "name": "javaStatic", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:javaStatic", "headline_links": [{"type": "Page", "name": "static_method"}, {"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "closed_serialization"}], "illustration": "A designated class with static methods for ''cut'' is defined as follows:\n\n<syntaxhighlight lang=\"java\">\npublic class Cut {\n\tpublic static void cut(Company that) {\n\t\tfor (Department d : that.getDepts())\n\t\t\tcut(d);\n\t}\t\n\tpublic static void cut(Department that) {\n\t\tcut(that.getManager());\n\t\tfor (Department s : that.getSubdepts())\n\t\t\tcut(s);\n\t\tfor (Employee e : that.getEmployees())\n\t\t\tcut(e);\n\t}\t\n\tpublic static void cut(Employee that) {\n\t\tthat.setSalary(that.getSalary() / 2);\n\t}\t\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}], "headline": "modular programming with [[:Category:static method]]s in [[Language:Java]]", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]]\nand the general interfaces for void and returning visitors on companies, departments,\nand employees. Package ''org.softlang.features'' hosts implementations of the basic \noperations [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] as well as some boilerplate\ncode for [[closed serialization]]. Package ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n\nThe sample data is retrieved from the file ''sampleCompany.ser''.\n\nThe latter file was saved with [[101implementation:javaComposition]].", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "javaComposition"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "coq": {"motivation": "", "name": "coq", "url": "http://101companies.org/index.php/101implementation:coq", "headline_links": [], "languages": [], "headline": "TBD", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "hibernate2": {"usage_links": [], "motivation": "An [[object model]] for companies is provided, as well as classes to total and cut salaries.\nThis is, we apply a basic style of [[:Category:OO programming]]. Instances the company model are [[Persistence|persisted]] by making use of the [[Technology:Hibernate]]\ntechnology. To that end the [[O/R mapping]] is realized by making use of [[Language:XML]]-mapping files for departments, employees, subunits and persons.", "name": "hibernate2", "url": "http://101companies.org/index.php/101implementation:hibernate2", "headline_links": [{"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Technology", "name": "Hibernate"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "SQL"}], "headline": "[[Object/Relational mapping]] with [[Technology:Hibernate]]", "architecture": "Package ''org.softlang.om'' holds the java object model for [[101feature:Tree structure]] and the xml-mapping files.\n''org.softlang.hibernate'' provides functionality to [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] salaries. \nThis package also hosts ''Init.java'' which tells hibernate to create tables; also test cases (see below) and\nand ''HibernateConnectivity.java'' to easily load and save company objects. This class uses the ''SessionFactory'' provided by ''HibernateUtil.java'' in ''org.softlang.util''.\nThe folder ''scripts'' contains sql-scripts to create tables (extracted from the hibernate log), populate data and to drop tables.\nHibernate configuration files (see below) can be found in the project's root folder.", "issues_links": [], "usage": "'''Steps of a typical demo:'''\n* Make sure you start from an initial distribution.\n* Build the project with Eclipse.\n(The following steps are explained in detail below.)\n* Start the HSQL database server.\n* Run ''org/softlang/hibernate/Init.java'' to create tables.\n* Run the database monitor and populate the tables with scripts/PopulateTables.\n* Patch hibernate.cfg.xml to disable \"drop and re-recreate\".\n* Run ''org/softlang/hibernate/Tests.java''.\n\n\n'''How to start the database server:'''\n* Start it from the command line.\n* Go to the data dir of the distribution.\n* Run the following command:\n** > java -classpath ../../hibernate/lib/hsqldb.jar org.hsqldb.Server\n** You can also send it to the background if you like.\nYou can also go to the root dir and run a \"make start-db\".\n\n\n'''How to create new tables:'''\n* Run ''Init.java'' in ''org.softlang.hibernate''.\n\n\n'''How and why to start the database monitor:'''\n\n* Start it from the command line.\n* Run the following command:\n** > java -classpath ../hibernate/lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing\n** You can also send it to the background if you like.\nYou can also go to the root dir and run a \"make start-gui\".\n* When the GUI pops up, make sure to select \"HSQL Database Engine Server\".\n* If you had performed Main already, you see the tables of the app.\n* Populate these tables:\n** Open scripts/PopulateTables (File -> Open Script)\n** Press \"Execute SQL\"\n\n\n'''How and why to patch ''hibernate.cfg.xml?'' '''\n\nYou can edit that XML file in Eclipse.\nIt is the configuration that is used for Hibernate for persistency.\nUpon the first use the EventManager the database must be initialized.\nHence it says:\n: <property name=\"hbm2ddl.auto\">create</property>\nSubsequently, we want to keep all data.\nHence the line should be commented out.\n\n'''How to test:'''\n\n* Run ''Tests.java'' in ''org.softlang.hibernate''.", "technologies": [{"type": "Technology", "name": "Hibernate"}, {"type": "Technology", "name": "HSQLDB"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "object_model"}, {"type": "Page", "name": "OO_programming"}, {"type": "Concept", "name": "Persistence"}, {"type": "Technology", "name": "Hibernate"}, {"type": "Concept", "name": "OASLASHR_mapping"}, {"type": "Language", "name": "XML"}], "issues": "* How to deal with acknowledgements? (See COPYRIGHT in svn)", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}]}, "atl": {"usage_links": [], "motivation": "This implementation demonstrates model transformations with [[Language:ATL]].", "name": "atl", "url": "http://101companies.org/index.php/101implementation:atl", "headline_links": [], "languages": [{"type": "Language", "name": "ATL"}, {"type": "Language", "name": "Java"}], "headline": "model transformation with ATL", "usage": "Steps:\n* The project should be imported into Eclipse\n* It will provide two pieces of source code - RunTransfoJava.java and RunTransfoPlugins.java. Both are executable Java files. RunTransfoJava.java uses EMF to start the transformation, RunTansfoPlugins.java uses the ATL plugin to start the transformation.\n* Right click on either implementation and select \"Run As\" -> \"Java Application\"\n\nComments:\n* The output models can be found in Models/Java or Models/Plugins.\n* RunTransfoPlugins.java relies on the RunTransfoPlugins.launch file, which can be found in the \"Runners\" directory.", "technologies": [{"type": "Technology", "name": "EMF"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "ATL"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "writerMonad": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[101feature:Logging|logging]] in [[Language:Haskell]] by making use of the [[Writer monad]]. That is, the operation for cutting the salaries of all employees is enriched with computations for building a log such that sub-totals of salaries are logged for all nodes in the company tree. Logs are modeled as values of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">[String]</syntaxhighlight>, yet the Writer monad could be used with any [[monoid]] type.", "name": "writerMonad", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:writerMonad", "headline_links": [{"type": "Concept", "name": "Logging"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "Writer_monad"}], "architecture_links": [], "illustration": "=== Logging cutting ===\n\nWe provide functionality for cutting all company, department and employee salaries. In the following we will show how cutting all salaries in a given department is realized in the current implementation.\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellLogger/Cut.hs\" line>\ncutLogDept :: Int -> Department -> Writer Log Department\ncutLogDept n d@(Department name m dus eus) = do\n    tell [replicate n '\\t' ++ \"Starting cutting \"\n                           ++ \"department \\\"\" \n                           ++ name \n                           ++ \"\\\", old Total = \" \n                           ++ (show $ totalDept d)]\n    cutManager <- cutLogEmployee (n + 1) m\n    cutDus <- mapM (cutLogDept (n + 1)) dus\n    cutEus <- mapM (cutLogEmployee (n + 1)) eus\n    let cutD = Department name cutManager cutDus cutEus\n    tell [replicate n '\\t' ++ \"Done cutting \" \n                           ++ \"department \\\"\" \n                           ++ name \n                           ++ \"\\\", new Total = \" \n                           ++ (show $ totalDept cutD)]\n    return cutD\n</syntaxhighlight>\nIn line 3 we log the start of the process of cutting a department by adding a message containing the department's name and the old total salary. We make use of the <syntaxhighlight lang=\"haskell\" enclose=\"none\">tell</syntaxhighlight> function, which is provided by the ''Control.Monad.Writer'' module, to add messages to the log.\nTo prettyPrint this log we indent all log lines using the given indent size <syntaxhighlight lang=\"haskell\" enclose=\"none\">n</syntaxhighlight>. In line 8 we cut the department manager's salary by passing the manager and an increased indent size to <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutLogEmployee</syntaxhighlight>. To cut all sub departments and employees we make use of the monadic map function <syntaxhighlight lang=\"haskell\" enclose=\"none\">mapM</syntaxhighlight> in lines 9 and 10. In the following lines we log that department cutting is finished and what the new total salary is. In line 17 we return the cut <syntaxhighlight lang=\"haskell\" enclose=\"none\">Department</syntaxhighlight> value.", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Logging]] in [[Language:Haskell]] with the [[Writer monad]]", "architecture": "[this!!Cut.hs] contains functionality to cut salaries while logging the process of doing so. [this!!Types.hs] holds the log type and a function for prettyprinting logs. The algebraic datatype for companies can be found in [this!!Company.hs]. [this!!Main.hs] collects test scenarios for totaling and cutting a sample company provided by [this!!SampleCompany.hs].", "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Logging"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "Writer_monad"}, {"type": "Concept", "name": "monoid"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Logging"}]}, "html5tree": {"usage_links": [{"type": "Technology", "name": "MySQL"}, {"type": "Implementation", "name": "mySql"}, {"type": "Implementation", "name": "mySql"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Page", "name": "Web_application"}], "motivation": "This [[:Category:Web application|web application]] extends the [[101implementation:html5ajax|html5ajax]] implementation with a tree view, thereby improving the [[101feature:Exploration]]. This is necessary to guarantee a clear overview while deleting, moving and creating departments and employees due to [[101feature:Structural editing|structural editing]]. [[Language:JavaScript]] is very suitable for trees, because it allows [[:Category:Client|client side]] [[Technology:DOM]] manipulation. This is necessary for creating fast, expandable tree structures. We have used the [[Technology:jQuery]] [[:Category:Library|library]] to gain proper [[Technology:DOM]] manipulation.", "name": "html5tree", "illustration_links": [{"type": "Feature", "name": "Structural_editing"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Technology", "name": "MySQL"}, {"type": "Page", "name": "Server"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "JSON"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Language", "name": "PHP"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Page", "name": "Client"}, {"type": "Technology", "name": "MySQL"}, {"type": "Page", "name": "DBMS"}, {"type": "Language", "name": "JSON"}, {"type": "Concept", "name": "Asynchronous_communication"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Page", "name": "Client"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Page", "name": "Server"}, {"type": "Language", "name": "PHP"}], "url": "http://101companies.org/index.php/101implementation:html5tree", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "HTML5"}, {"type": "Concept", "name": "Ajax"}], "architecture_links": [{"type": "Implementation", "name": "html5ajax"}, {"type": "Concept", "name": "MVC"}, {"type": "Page", "name": "Architectural_pattern"}, {"type": "Concept", "name": "ClientADASHserver_architecture"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}], "illustration": "The first part of this illustration shows, how the tree view is created. The second part illustrates the deletion of a department as it is part of the [[101feature:Structural editing|structural editing]] feature.\n\n=== Tree creation ===\n\nAs shown in [[101implementation:html5ajax]], the data is stored within a [[Technology:MySQL]] database. After the client creates the initial request, a [[:Category:Server|server]] side [[Language:PHP]] script called [this!!server/treeServer.php] prepares the data for a [[Language:JSON]] response. The initial [[Technology:XMLHttpRequest]] is rather simple:\n\n<syntaxhighlight lang=\"java\" source=\"html5tree/client/javascript/model/treeModel.js\">\n...\n\ntreeModel.load = function(strategy, id) {\n    treeModel.initCompany(id);\n    treeModel.company.action = \"load\";\n\n    requestUnit.sendRequest(strategy, treeModel.url, treeModel.company);\n}\n\n...\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"java\" enclose=\"none\">requestUnit</syntaxhighlight> (file: [this!!client/javascript/model/XMLHttpRequest.js]) is developed to create generic requests. The given strategy updates the tree view with the retrieved data.\n\n==== Server ====\n\nThe server side [[Language:PHP]] script [this!!/server/treeServer.php treeServer.php] creates the objects necessary for the tree. Therefore, it loads the entities from the database with the ids and names, bacause there is no need for total oder address values within the tree display. The following function illustrates the initialization of the [[101feature:Tree structure|company]]:\n\n<syntaxhighlight lang=\"php\" source=\"html5tree/server/treeServer.php\">\n\n...\n\nfunction perform($jsonObject) {\n    $action = $jsonObject->action;\n\n    switch ($action) {\n        case \"load\":\n            return loadCompany($jsonObject);\n    }\n}\n\nfunction loadCompany($jsonObject) {\n    // The $jsonObject contains the request of the client.\n    $id = $jsonObject->id;\n        \n    // This is the SQL statement to get the company with a given id.\n    $request = \"SELECT * FROM company WHERE id = $id\";\n    $result = mysql_query($request);\n    $row = mysql_fetch_object($result);\n      \n    // These few commands create a new company and set the id and the name.\n    $company = new Company();\n    $company->setId($row->id);\n    $company->setName($row->name);\n      \n    // The subdepartments are added to the company.\n    $company->setDepartments(loadDepartmentsForCompany($id));\n\n    return $company;\n}\n\n...\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"php\" enclose=\"none\">perform($jsonObject)</syntaxhighlight> method interprets the request of the [[:Category:Client|client]]. After the server retrieves the company id, it is able to select the company out of the [[Technology:MySQL]] [[:Category:DBMS]]. After that, a new company object is filled with id and name. The subdepartments are added to the company within a nested tree structure. The <syntaxhighlight lang=\"php\" enclose=\"none\">$company</syntaxhighlight> is transformed to [[Language:JSON]] before the response is returned to the client:\n\n<syntaxhighlight lang=\"php\" source=\"html5tree/server/databaseConnection/connection.php\">\n...\n\necho json_encode(perform($jsonObject));\n\n...\n</syntaxhighlight>\n==== Client ====\n\nIn the introduction of the tree creation section we have introduced the parameter <syntaxhighlight lang=\"java\" enclose=\"none\">strategy</syntaxhighlight>, which is used for the views callback initialization after the response is returned [[Asynchronous communication|asynchronously]]. This strategy is initialized in the [this!!client/javascript/controller.js controller.js] and simply invokes the method <syntaxhighlight lang=\"java\" enclose=\"none\">refresh</syntaxhighlight> of the [this!!client/javascript/view/treeView.js treeView.js]:\n\n<syntaxhighlight lang=\"java\" source=\"html5tree/client/javascript/view/treeView.js\">\n...\n\n// This method refreshs the tree view.\ntreeView.refresh = function() {\n    // The content variable contains the generated html string for a nested unordered list.\n    content = \"<ul>\";\n  \n    // If there are subdepartments, create a list item with a 'plus' symbol\n    if (treeModel.response.departments.length > 0) {\n        // The 'plus' symbol is the button for expanding the tree.\n        content += \"<li> <input id=\\\"0\\\" \"\n            + \"type=\\\"image\\\" src=\\\"symbols/plus.gif\\\" \"\n            + \"onclick=\\\"treeNavigation.toggleList(this)\\\">\";\n        // The name of the company is the button for company load.\n        content += \"<input type=\\\"button\\\" class=\\\"companyButton\\\" value=\\\"\"\n            + treeModel.response.name\n            + \"\\\" onclick=\\\"controller.loadCompany(\"\n            + treeModel.response.id\n            + \")\\\">\";\n        // The subdepartments are added as sublists of the company list item.\n        content += treeView.showDepartments(treeModel.response.departments);\n        content += \"</li>\";\n    // If there are no subdepartments, create a list item with a 'dot' symbol\n    } else {\n        content += \"<li> <img src=\\\"symbols/leaf.gif\\\"> <b>\"\n            + treeModel.response.name\n            + \"</b></li>\";\n    }\n   \n    content += \"</ul>\";\n    \n    // This replaces the content of the tree division with the generated html code in 'content'.\n    document.querySelector('#tree').innerHTML = content;\n}\n\n...\n</syntaxhighlight>\nEvery tree item is a list item of a nested unordered list and consists of two visible parts, a symbol and a name. The symbol refers to the position of the item within the tree. There are ''dots'' for leafs and ''plus'' and ''minus'' symbols for unexpanded and expanded tree items. The name is a link, which refers to a load function. This function returns a complete data set for the requested entity.\n\n=== Delete department ===\n\nThe following part illustrates an example for the deletion of a department according to the [[101feature:Structural editing]]. Please visit [[101implementation:html5ajax]] to get an overview over loading company entities with XMLHttpRequest and JSON. Keep in mind, that there is no need to load subdepartments or employees for a specific department, since the tree provides the structure to pick these subelements.\n\nAfter a department is selected, the user can press the ''delete'' button to invoke the corresponding [[:Category:Client|client]] side delete method implemented in [this!!/client/javascript/model/departmentModel.js departmentModel.js]:\n\n<syntaxhighlight lang=\"java\" source=\"html5tree/client/javascript/model/departmentModel.js\">\ndepartmentModel.deleteEntity = function(strategy) {\n\tdepartmentModel.initDepartment(departmentModel.response.id);\n\tdepartmentModel.department.action = \"delete\";\n\trequestUnit.sendRequest(strategy, departmentModel.url, departmentModel.department);\n}\n</syntaxhighlight>\nThis method will send a request in the JSON format, which contains all necessary informations to delete a department with a given id. Most of the JSON messages in the web application are simplified versions of the messages in [[101implementation:html5ajax]].\n\n<syntaxhighlight lang=\"text\">\n{\n\t\"id\":1,\n\t\"table\":\"department\",\n\t\"action\":\"delete\"\n}\n</syntaxhighlight>\nThis request is received by the [[:Category:Server|server]] side [[Language:PHP]] script, which deletes the department with the id 1. The cascading delete anchored in the database provides a recursive deletion for all containing subdepartments. Hence, the following shows the simple delete request:\n\n<syntaxhighlight lang=\"php\" source=\"html5tree/server/departmentServer.php\">\n$request = \"DELETE FROM department WHERE id = \" . $id;\nmysql_query($request);\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "JSON"}], "headline": "[[Web programming]] based on the [[Language:HTML5]] ecosystem using [[Ajax]] style and a tree view", "architecture": "The basic architecture is similar to the architecture of [[101implementation:html5ajax]]. It is based on the [[MVC]] [[:Category:Architectural pattern|architectural pattern]] in combination with a [[Client-server architecture|client-server architecture]]. The key difference is the encapsulation of all views within one [[Language:HTML]] file named [this!!client/index.html index.html], controlled by different [[Language:JavaScript]] files, which are located in [this!!client/javascript/view] and the [this!!client/javascript/controller.js].", "usage": "You need a web and [[Technology:MySQL]] server to run this application. In this tutorial both will be taken care of by XAMPP: http://www.apachefriends.org/en/xampp.html\n\nThis tutorial adopts some parts of [[101implementation:mySql]]. The company.sql and sampleCompany.sql are modified for this project. They are located in the \"sqlScripts\" folder.\n\n* Download and install XAMPP\n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"MySQL\"\n* Use the guideline of [[101implementation:mySql]] up to \"Populate tables...\" with the modified sql scripts.\n\nOnce the database is running, follow the next steps:\n\n* To start the application, you need to download all project files except the README\n* Put the files into the htdocs directory of your XAMPP (a new subdirectory in \"htdocs\" is recommended)\n* Run index.html\n\nThe project is provided as a netbeans project. If you want to change the code, you have to:\n\n* Download (http://netbeans.org/) and install [[Technology:NetBeans]]\n* \"Open project\" and select the html5tree folder\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "XAMPP"}, {"type": "Technology", "name": "Apache_HTTP_Server"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Technology", "name": "jQuery"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "Web_application"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Client"}, {"type": "Technology", "name": "DOM"}, {"type": "Technology", "name": "jQuery"}, {"type": "Page", "name": "Library"}, {"type": "Technology", "name": "DOM"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "py3k": {"usage_links": [], "motivation": "Python is a dynamically typed scripting language, mainly focussed on OO-programming but nonetheless offering some tools to also provide basic functional programming capabilities. Python also prides itself on it's \"Batteries included\" philosophy which means that the language's standard library shouldcover all possible basic use cases of the language. This implementation takes the basic OO approach, implementing Company, Dept and Employee as classes, though due to python's dynamic approach, no inheritance hierarchy is needed (we could do this using dictionaries and classes in fact aren't that much more). Using Python's Pickle serialization module, the whole model can be serialized without further adaptation. The model implements structural equality, but only for the purpose of unit testing serialization.", "name": "py3k", "url": "http://101companies.org/index.php/101implementation:py3k", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "Python_3ADOT2"}], "headline": "a basic implementation of the spec in Python 3", "architecture": "All classes and methods are contained in ''Company.py''. Tests are in ''CompanyTest.py''.\nSerialization is implemented by the pickle module.", "usage": "Make sure to grab Python 3 from python.org, then from the project directory execute\n\n <nowiki>python3 CompanyTest.py -v</nowiki>\n\nto run the test cases", "technologies": [{"type": "Technology", "name": "Py3k"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "javaComposition": {"usage_links": [], "motivation": "Basic style of [[:Category:OO programming]] is applied. A simple [[object model]] is provided for [[101feature:Tree structure]]. The object model leverages [[object composition]] to compose companies from (nested) departments and employees. (No [[class inheritance]] is exercised, but see [[101implementation:javaInheritance]] for a variation that indeed leverages class inheritance.) The operations for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] are implemented as [[:Category:instance method]]s on the classes for companies, departments, and employees. [[Closed serialization]] is enabled for all the classes with the help of Java's [[Technology:Object Streams]]. To this end, the [[Marker interface pattern|marker interface]] ''Serializable'' is applied to the classes of the object model for companies. This form of serialization counts as [[closed serialization]] because the serialization format is definitely Java-specific.", "name": "javaComposition", "illustration_links": [{"type": "Concept", "name": "POJO"}, {"type": "Concept", "name": "impure_computation"}], "url": "http://101companies.org/index.php/101implementation:javaComposition", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "The classes for companies, departments, and employees all model [[POJO]]s. It follows a sketch of the class for companies with fields and properties for company name and its list of departments as well as methods for totaling salaries and cutting them in half. Thus:\n\n<syntaxhighlight lang=\"java\">\npublic class Company implements Serializable {\n  private static final long serialVersionUID = ...;\n  private String name;\n  private List<Department> depts;\n  public String getName() { ... }\n  public void setName(String name) { ... }\n  public List<Department> getDepts() { ... }\n  public Double total() { ... }\n  public void cut() { ... }\n}\n</syntaxhighlight>\nHere is the implementation of ''cut''; basically, the operation is delegated to the individual departments, and the operation is implemented as an [[impure computation]] with a void method:\n\n<syntaxhighlight lang=\"java\">\npublic void cut() {\n  for (Department d : getDepts())\n    d.cut();\n}\t\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}], "headline": "basic OO programming in [[Language:Java]]", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]]\nwith the methods for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]]. Some boilerplate\ncode for serialization and testing its correct implementation is to\nbe found in package ''org.softlang.serialization''. Package ''org.softlang.tests'' \nhosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n** Run class ''Serialization'' with JUnit to exercise serialization.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "OO_programming"}, {"type": "Concept", "name": "object_model"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Concept", "name": "object_composition"}, {"type": "Concept", "name": "class_inheritance"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "instance_method"}, {"type": "Concept", "name": "Closed_serialization"}, {"type": "Technology", "name": "Object_Streams"}, {"type": "Concept", "name": "Marker_interface_pattern"}, {"type": "Concept", "name": "closed_serialization"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "clojure": {"motivation": "", "name": "clojure", "url": "http://101companies.org/index.php/101implementation:clojure", "headline_links": [], "languages": [], "headline": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "csharpAspNetMvc": {"usage_links": [], "motivation": "A Web implementation in ASP .NET MVC 3.0; shows the basic features of MVC framework; in particular URL routing mapping to controllers and model/view binding.\nThe implementation also serves as a reference solution for MVC framework for statically typed programming languages (e.g. C#, VB .NET) which also motivates its appearance in the GUI theme.", "name": "csharpAspNetMvc", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:csharpAspNetMvc", "headline_links": [{"type": "Page", "name": "ASP_ADOTNET"}, {"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "ADOTNET"}], "architecture_links": [{"type": "Implementation", "name": "csharp"}], "illustration": "When we speak about MVC Framework for the Web, there are 2 major components are considered:\n\n1. Mapping URIs to handlers (essentially methods) in a source code. In ASP .NET MVC this called \"routing\" (http://msdn.microsoft.com/en-us/library/cc668201.aspx). Reflection plays an important part in the mapping workflow. A good detailed explanation can be found at http://msdn.microsoft.com/en-us/magazine/dd695917.aspx\n\n2. Template engine (ofter they called \"view engines\") which allows using target language inside the \"view\" to generate html parts from the model. ASP .NET MVC, for instance, supports two such engines: aspx and razor (http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx).\nRazor allows using C#/VB.NET inside the template by using special code blocks. This code is used by a framework to dynamically generate HTML by means of runtime code generation.\nAnother important aspect, is how the actual model is binded to such template engine. As soon as the view itself is fully dynamic, traditionally in ASP .NET a dictionary was used to store the model and access it by key from the view code block. When a \"dynamic\" concept (http://msdn.microsoft.com/en-us/library/dd264741.aspx) was introduced in C# 4.0, it enabled an option making a model available for a view bypassing compile-time checking. Runtime code generation is used to execute all code blocks in a view engine and produce the actual HTML code.\n\n'''Route mapping'''\n\nTo set up routes we need to implement class derived from System.Web.HttpApplication\n\n<syntaxhighlight lang=csharp>\npublic class MvcApplication : System.Web.HttpApplication\n</syntaxhighlight>\nThere is a method which is called by the framework when the first resource (such as a page) in an ASP.NET application is requested. (see http://msdn.microsoft.com/en-us/library/ms178473.aspx for the details)\n\n<syntaxhighlight lang=csharp>\nprotected void Application_Start()\n{\n  .....\n  RegisterRoutes(RouteTable.Routes);\n}\n</syntaxhighlight>\n\nUsually there is a need to force MVC to ignore some resources:\n\n<syntaxhighlight lang=csharp>\nroutes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n</syntaxhighlight>\n\nTo map routes on controller's actions, the following method is used:\n<syntaxhighlight lang=csharp>\n routes.MapRoute(\n                \"Default\", // Route name\n                \"{controller}/{action}/{id}\", // URL with parameters\n                new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional } // Parameter defaults\n             );\n</syntaxhighlight>\nThe MVC framework provides a default controller factory (aptly named DefaultControllerFactory) that will search through all the assemblies in an appdomain looking for all types that implement IController and whose name ends with \"Controller.\" Thus, if you tell the factory to look for a \"Home\" controller, the factory can return a newly instantiated instance of a HomeController class regardless of the namespace or assembly it lives in\u2014as long as it implements IController. This behavior is part of the MVC's \"convention over configuration\" style.\nOnce the MvcHandler has an IController reference from the factory, it invokes Execute on the controller and waits for the controller to work its magic. When execution is complete, the MvcHandler will check if the controller implements the IDisposable interface, and if so, will invoke Dispose on the controller to clean up unmanaged resources.\n\nWhen (if) the action index is reached, as a result it can return a view or just a plain HTTP response (e.g. JSON, HTTP Error Code).\nIf the view is returned default engine would search for its tempalte the following locations:\n\n* ~/Views/Home/Index.aspx\n* ~/Views/Home/Index.ascx\n* ~/Views/Shared/Index.aspx\n* ~/Views/Shared/Index.ascx\n* ~/Views/Home/Index.cshtml\n* ~/Views/Home/Index.vbhtml\n* ~/Views/Shared/Index.cshtml\n* ~/Views/Shared/Index.vbhtml\n\n''' Model binding'''\n\nFirst we populate the view by model (in this case by the Company object)\n\n<syntaxhighlight lang=csharp>\npublic class CompanyController : Controller\n {\n    //\n   // GET: /Company/\n   public ActionResult Index()\n   {\n      return View(CompanyRepository.CreateInMemoryModel());\n   }\n }\n</syntaxhighlight>\nThe result of the action above is the view template located at Views/Company/Index.cshtml.\nIn the first line of the template, we need to \"type\" the model by using \n<syntaxhighlight lang=csharp>\n@model csharpBaseline.CompanyModel.Company\n</syntaxhighlight>\nLater on we can refer to the \"Model\" property of the page in the following style\n\n<syntaxhighlight lang=csharp>\n@foreach (var dept in Model.Departments)\n{\n\n    <li>@Html.ActionLink(dept.Name, \"Index\", \"Department\", new {id = dept.Id}, null )</li>   \n}\n</syntaxhighlight>\nHere we see that the \"Model\" property has the type of \"Company\".", "languages": [{"type": "Language", "name": "CSharp"}], "headline": "a simple [[Techology:ASP .NET]] implementation in [[Language:CSharp|C#]] for the [[Technology:.NET]] Framework", "architecture": "An implementation follows the default MVC folder structure provided by Visual Studio.\nIt also reuses an object model AS-IS from the [[101implementation:csharp]] by referencing the project.", "usage": "Compile and run the project from Visual Sturio. Web browser opens automatically and shows the company page.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}, {"type": "Technology", "name": "Visual_Studio"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}]}, "emfReflexive": {"usage_links": [], "motivation": "The implementation demonstrates model transformations with [[Technology:EMF]] for [[Language:Java]]. It relies on the reflexive API of Ecore to implement the features.", "name": "emfReflexive", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:emfReflexive", "headline_links": [], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "The structure of a company can be modeled as a metamodel. By doing so, one can load any company conforming to this metamodel by first loading the metamodel and then loading the actual model:\n<syntaxhighlight lang=\"java\">\n/* Load metamodel */\nResource companyMetamodel = resourceSet.createResource(URI.createFileURI(\"Metamodels/Company.ecore\"));\ncompanyMetamodel.load(null);\nEPackage.Registry.INSTANCE.put(\"http://www.company.com\", companyMetamodel.getContents().get(0));\n\n/* code ommited */\n\n/* Load model */\nResource companySampleModel = resourceSet.createResource(URI.createFileURI(\"Models/sampleCompany.xmi\"));\ncompanySampleModel.load(null);\n</syntaxhighlight>\n\nThen, attributes can be modified using reflexive calls. For example, the Cut operation can be implemented by iterating over all elements of the model, retrieving the value for the salary if the current element is a Employee and then setting the salary attribute for this employee to the half of what was returned earlier:\n<syntaxhighlight lang=\"java\">\nif( currentModelElement.eClass().getName().equals(\"Employee\") ) {\n   EStructuralFeature salaryAttribute = currentModelElement.eClass().getEStructuralFeature(\"salary\");\n   double currentSalary = (Double) currentModelElement.eGet(salaryAttribute);\n   currentModelElement.eSet(salaryAttribute, currentSalary/2);\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Ecore"}, {"type": "Language", "name": "Java"}], "headline": "reflexive implementation of a model transformation with EMF", "architecture": "The metamodel Company implements the data model for [[101feature:Tree structure]]. \nThe model sampleCompany holds the data for the [[101feature:Tree structure]].\nThe metamodel Total is used for the [[101feature:Type-driven transformation]] feature.\n\nThe actual transformations are implemented in the class RunTransfo.", "usage": "Compile and execute the Java class RunTransfo.java to excercise the transformations.", "technologies": [{"type": "Technology", "name": "EMF"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "EMF"}, {"type": "Language", "name": "Java"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "jdbc2": {"usage_links": [{"type": "Implementation", "name": "mySql"}], "motivation": "", "name": "jdbc2", "url": "http://101companies.org/index.php/101implementation:jdbc2", "headline_links": [{"type": "Technology", "name": "JDBC"}], "architecture_links": [], "languages": [{"type": "Language", "name": "SQL"}, {"type": "Language", "name": "Java"}], "headline": "Database programming with [[Technology:JDBC]]", "architecture": "The package ''org.softlang.company'' contains the object model.\nThe ''ObjectFactory'' in ''org.softlang.util'' is used to retrieve objects from the database.\nThe PersistenceTool writes objects back to the database.\nSome minimal effort is made to only commit *changes* to the database.\nThe tests package ''org.softlang.tests'' contains test cases.\n\nPrerequisites (very much like in project \"jdbc\"):", "issues_links": [], "usage": "* You will need a suitable JDBC Driver for MySQL\n**  An appropriate driver is available here: http://dev.mysql.com/downloads/connector/j/\n**  Add the JAR that comes with the download to the build path of this project.\n* Set up a company database.\n** Follow the steps described here [[101implementation:mySql]] to set up the company database. That is, stop after populating the tables. \n* There are JUnit tests available as the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n** Run class ''Persistence'' with JUnit to exercise O/R mapping / persistence.", "technologies": [{"type": "Technology", "name": "JDBC"}, {"type": "Technology", "name": "MySQL"}], "type": "Implementation", "motivation_links": [], "issues": "* Overall, the idea of loading employees one by one may be ill-conceived.\n* Lazy load is triggered upon testing collection items for changes; see Department.isChanged.\n* The load method should not be in the iterator for collections but in the getters (and some of the setters) for items in the collection.\n* Persist methods seem to drill down to leafs even beyond what had been loaded (and could be changed).\n* Clear methods should use information about what has been *added* or *removed*.\n* The id after insertion should be determined in a more robust manner.\n\nCosmetics:\n* Rename ObjectFactory to Loader?\n* Rename PersistenceTool to Saver?\n* Use shorter names pstmt -> stm for example.\n* Use overloading rather than long names such as persistDepartment.", "features": []}, "xmlReader": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "[[:Category:XML processing]] with XmlReader which provides a lower-level abstraction over the XML file structure. This implementation retains more complexity than other solutions (e.g. [[101implementation:csharpLinqToXml]]) but benefits performance.", "name": "xmlReader", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:xmlReader", "headline_links": [{"type": "Concept", "name": "pullADASHbased_XML_parsing"}, {"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "XmlReader"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}], "illustration": "For totaling salaries we read XML file and check for \"Salary\" nodes.\nFor cutting, we go through the source XML file in a streaming fashion (by using Read() method of XmlReader which reads a current line of an input XML stream and goes to the next one) and write the content as-is into an output string. We maintain a valid XML structure, even temporary it is represented as a string type. \n\nEvery time we reach the \"Salary\" node, we read the content (which is the actual salary) as a decimal number, cut it, and write into an output string.\n\nWhen the end of the source file is reached, we use XmlTextWriter to produce a new XML file from the raw XML content in a string variable.", "languages": [{"type": "Language", "name": "CSharp"}], "headline": "[[pull-based XML parsing]] in [[Language:CSharp|C#]] with [[Technology:XmlReader]]", "architecture": "Features.cs contains static methods where [[101feature:Type-driven transformation]] and [[101feature:Type-driven query]] are implemented.\nFeaturesTest.cs contains the relates unit tests.", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project file.\nThe project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).\nNunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "NUnit"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "XML_processing"}, {"type": "Implementation", "name": "csharpLinqToXml"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "antlrAcceptor": {"usage_links": [], "motivation": "A concrete syntax for companies is defined using the grammar notation of ANTLR so that a parser can be generated. The underlying grammar is LL(1). Such parsing of concrete syntax is viewed as an instance of [[101feature:Data import]]. However, the resulting implementation does not provide no further operations on companies. Hence, this is an incomplete implementation.", "name": "antlrAcceptor", "url": "http://101companies.org/index.php/101implementation:antlrAcceptor", "headline_links": [{"type": "Technology", "name": "ANTLR"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "An [[Technology:ANTLR]]-based acceptor for textual syntax ", "usage": "See the the package ''org.softlang.tests'' for JUnit tests.\n\nThe Antlr tool (including parser generator and runtime) is included into the project.\nThere is a Makefile at the top of the project and within the org.softlang.antlr package.\nRun \"make\" at either of these locations to re-generate the parser.\nRefresh the project in Eclipse if you re-generated outside Eclipse.\nIn this manner, the parser is compiled.\n\nYou may also use an ANTLR IDE.\nhttp://antlrv3ide.sourceforge.net/", "technologies": [{"type": "Technology", "name": "ANTLR"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Data_import"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Data_import"}]}, "jena": {"motivation": "", "name": "jena", "url": "http://101companies.org/index.php/101implementation:jena", "headline_links": [], "languages": [], "headline": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "tmvar": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[concurrent programming]] and specifically [[STM]] in [[Language:Haskell]] with Haskell's concept of [[TMVar]]s, i.e., transactional [[MVar]]s. To this end, the computations for the operations for totaling and cutting salaries are organized in multiple threads, in fact, transactions based on [[TMVar]]s. (See [[101implementation:mvar]] for a more basic approach that uses regular thread synchronization variables, i.e., [[MVar]]s.) The TMVars are used to store the progress and intermediate results of computations across multiple threads. The <syntaxhighlight lang=\"haskell\" enclose=\"none\">retry</syntaxhighlight> combinator is leveraged to wait for certain values of transactional variables. Overall, the present implementation serves as a limited illustration of [[STM]] since the operations in question do not obviously benefit from STM.", "name": "tmvar", "url": "http://101companies.org/index.php/101implementation:tmvar", "headline_links": [{"type": "Concept", "name": "Concurrent_programming"}, {"type": "Concept", "name": "STM"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "TMVar"}], "illustration": "In the following we will illustrate both the implementation of totaling and cutting. To explain the code we first introduce a way to store and handle progress of computation, wait for results and enable multi-threaded cutting/totaling.\n\n=== Representing and handling computational progress ===\n\nWe represent positions of interest for the next computation/transaction by using the zipper related term of focus (see the [[101implementation:wxHaskell|wxHaskell implementation]] for more information). A algebraic datatype for progress can therefore be defined as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Types.hs\">\ndata Progress a = Do a | Done  \n\ntype TFocusProgress = TMVar (Progress Focus)\n</syntaxhighlight>\nThe progress of a computation can either be that there is still some work to do or that all work is done. In the first case the corresponding type constructor takes a value providing some information about the computation to be executed. Here we use a value of the <syntaxhighlight lang=\"haskell\" enclose=\"none\">Focus</syntaxhighlight> type. This <syntaxhighlight lang=\"haskell\" enclose=\"none\">TFocusProgress</syntaxhighlight> datatype is defined as an <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> because it should be shared among multiple threads. It is a transactional <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> (<syntaxhighlight lang=\"haskell\" enclose=\"none\">TMVar</syntaxhighlight>) because the manipulation of the progress will be part of the transaction: Each total/cut transaction will call <syntaxhighlight lang=\"haskell\" enclose=\"none\">nextEmployeeFocus</syntaxhighlight> to update the progress. This function is illustrated in the following image:\n\nhttps://github.com/101companies/101repo/raw/master/contributions/haskellSTM/megaTree.png\n\nThe blue arrows illustrate the function. Each time <syntaxhighlight lang=\"haskell\" enclose=\"none\">nextEmployeeFocus :: Company -> Focus -> Maybe Focus</syntaxhighlight> is called to compute a new focus of interest the function either returns a new focus (<syntaxhighlight lang=\"haskell\" enclose=\"none\">Just focus</syntaxhighlight>) or <syntaxhighlight lang=\"haskell\" enclose=\"none\">Nothing</syntaxhighlight> in case all employees are processed. In the following we make use of this function to define a generic transaction function.\n\n=== Generic companies transaction ===\n\nWe can now define a general transaction for both total and cut:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/CompanySTM.hs\" line>\ncompanyTransaction :: Company -> TFocusProgress -> TMVar b -> (Focus -> b -> b) -> STM Bool\ncompanyTransaction c tprogress tb f = do\n    currentProgress <- readTMVar tprogress\n    case currentProgress of\n        (Do currentFocus) -> do\n            currentB <- readTMVar tb\n            let newB = f c currentFocus currentB\n            swapTMVar tb newB\n            case nextEmployeeFocus c currentFocus of\n                Just newFocus -> do\n                    swapTMVar tprogress (Do newFocus)\n                    return False\n                Nothing -> do\n                    swapTMVar tprogress Done\n                    return True\n        Done -> return False\n</syntaxhighlight>\nThis function takes a company, a transactional progress and some other transactional variable which will be used in the concrete transaction. <syntaxhighlight lang=\"haskell\" enclose=\"none\">companyTransaction</syntaxhighlight> also takes a function that transforms the value of the content of the transactional variable based on a given focus.\nThat is, in line 3 <syntaxhighlight lang=\"haskell\" enclose=\"none\">companyTransaction</syntaxhighlight> reads the current progress and matches on the type constructors afterwards. In case all work is done (type constructor <syntaxhighlight lang=\"haskell\" enclose=\"none\">Done</syntaxhighlight>) the function returns <syntaxhighlight lang=\"haskell\" enclose=\"none\">True</syntaxhighlight> in line 16. In case there is still work to do <syntaxhighlight lang=\"haskell\" enclose=\"none\">companyTransaction</syntaxhighlight> reads the current value of the second transactional variable and passes this value and the current focus to the given function <syntaxhighlight lang=\"haskell\" enclose=\"none\">f</syntaxhighlight> in lines 6 - 7. The result of <syntaxhighlight lang=\"haskell\" enclose=\"none\">f</syntaxhighlight> is then written in the transaction variable by swapping the content in line 8. After that the next focus is computed using <syntaxhighlight lang=\"haskell\" enclose=\"none\">nextEmployeeFocus</syntaxhighlight>. Lines 13 and 10 match either on <syntaxhighlight lang=\"haskell\" enclose=\"none\">Just newFocus</syntaxhighlight> or <syntaxhighlight lang=\"haskell\" enclose=\"none\">Nothing</syntaxhighlight>. In case there is a next focus this value is swapped in the progress variable and <syntaxhighlight lang=\"haskell\" enclose=\"none\">False</syntaxhighlight> is returned in line 12. Otherwise <syntaxhighlight lang=\"haskell\" enclose=\"none\">Done</syntaxhighlight> is put in the variable for progress and <syntaxhighlight lang=\"haskell\" enclose=\"none\">True</syntaxhighlight> is returned.\n\n=== Waiting for results ===\n\nWe also provide a generic transaction that waits for a job to be done and returns the result of the job:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/CompanySTM.hs\" line>\ngetResult :: TFocusProgress -> TMVar a -> STM a\ngetResult tprogress ta = do\n    currentProgress <- readTMVar tprogress\n    case currentProgress of\n        (Do _) -> retry\n        Done    -> do\n            result <- readTMVar ta\n            return result\n</syntaxhighlight>\nIn line 3 <syntaxhighlight lang=\"haskell\" enclose=\"none\">getResult</syntaxhighlight> reads the current progress of the transaction. If there is still work to do the function matches on <syntaxhighlight lang=\"haskell\" enclose=\"none\">Do _</syntaxhighlight>. In this case we use the <syntaxhighlight lang=\"haskell\" enclose=\"none\">retry</syntaxhighlight> combinator which blocks the current thread until the content of the transactional variable for progress in modified. In case all transactions are done the function matches on <syntaxhighlight lang=\"haskell\" enclose=\"none\">Done</syntaxhighlight> in line 6. It then reads the result from the transactional variable <syntaxhighlight lang=\"haskell\" enclose=\"none\">ta</syntaxhighlight> and returns the content.\n\n=== Using multiple threads ===\n\nWe make use of <syntaxhighlight lang=\"haskell\" enclose=\"none\">forkIO</syntaxhighlight> to start multiple threads for executing the transactions:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/CompanySTM.hs\" line>\nstartTransactions :: Company -> b -> (TFocusProgress -> TMVar b -> STM Bool) -> IO b\nstartTransactions c initb trans = do\n    case firstEmployeeFocus c of\n        (Just firstFocus) -> do\n            tprogress <- newTMVarIO (Do firstFocus)\n            tb <- newTMVarIO initb\n            forM [1..3] $ \\_ -> \n                forkIO $ repeatTransaction (trans tprogress tb)\n            atomically $ getResult tprogress tb\n        Nothing -> return initb\n</syntaxhighlight>\nThis function takes a company, an initial value for the content of a transactional variable and a transaction function. It returns the result from the transactional variable.\nTo do this it first computes the first focus in question in line 3. In case this focus does not exist <syntaxhighlight lang=\"haskell\" enclose=\"none\">startTransactions</syntaxhighlight> returns the given initial value <syntaxhighlight lang=\"haskell\" enclose=\"none\">b</syntaxhighlight> in line 10. In case such a focus does exist <syntaxhighlight lang=\"haskell\" enclose=\"none\">b</syntaxhighlight> it put into an transactional variable in line 5. The value of <syntaxhighlight lang=\"haskell\" enclose=\"none\">b</syntaxhighlight> is also put in a transactional variable. After that <syntaxhighlight lang=\"haskell\" enclose=\"none\">startTransactions</syntaxhighlight> creates three threads, each one repetitively executing the transaction.\nIn line 9 the function waits for the result of the computation by using <syntaxhighlight lang=\"haskell\" enclose=\"none\">getResult</syntaxhighlight> which was shown above.\n\nTo execute the transaction until the computation is done we define <syntaxhighlight lang=\"haskell\" enclose=\"none\">repeatTransaction</syntaxhighlight> which should be straighforward:\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/CompanySTM.hs\" line>\nrepeatTransaction :: STM Bool -> IO ()\nrepeatTransaction t = do\n\tdone <- atomically t\n\tunless done $ repeatTransaction t\n</syntaxhighlight>\n\nNow that we have defined generic functions for a company transaction, a function for waiting for results and a function for starting multiple threads to execute the transaction, we can define totaling and cutting salaries:\n\n=== Total ===\n\nWe first define a transactional variable for holding the (intermediate) result of totaling:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Total.hs\" line>\ntype TTotal = TMVar Float\n</syntaxhighlight>\nThe actual transaction for one step of totaling all salaries is defined as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Total.hs\" line>\naddSalary :: Company -> TFocusProgress -> TTotal -> STM Bool\naddSalary c tprogress ttotal = companyTransaction c tprogress ttotal (f c) \n    where f c currentFocus currentTotal = currentTotal + (salary (readEM currentFocus c))\n</syntaxhighlight>\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">addSalary</syntaxhighlight> uses the <syntaxhighlight lang=\"haskell\" enclose=\"none\">companyTransaction</syntaxhighlight>.\nThe actual computation is that it reads the employee at the current focus, reads the salary and adds it the current (intermediate) total.\n\nWe  can now use <syntaxhighlight lang=\"haskell\" enclose=\"none\">addSalary</syntaxhighlight> to define <syntaxhighlight lang=\"haskell\" enclose=\"none\">total</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Total.hs\" line>\ntotal :: Company -> IO Float\ntotal c = startTransactions c 0.0 (addSalary c)\n</syntaxhighlight>\n=== Cut ===\n\nCut also uses <syntaxhighlight lang=\"haskell\" enclose=\"none\">companyTransaction</syntaxhighlight> to do the cutting for each focus:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Cut.hs\" line>\ncutSalary :: TFocusProgress -> TCompany -> STM Bool\ncutSalary tprogress tcompany = do\n    currentCompany <- readTMVar tcompany\n    companyTransaction currentCompany tprogress tcompany f \n    where \n        f currentFocus currentCompany = (writeEM currentFocus currentCompany) (cutEmployee $ readEM currentFocus currentCompany)\n        cutEmployee (Employee n a s) = Employee n a (s/2)\n</syntaxhighlight>\nIt reads the employee at the given focus, cuts his/her salary and writes the employee back into the company by making use of <syntaxhighlight lang=\"haskell\" enclose=\"none\">readEM</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">writeEM</syntaxhighlight>.\n\nAnalogously to <syntaxhighlight lang=\"haskell\" enclose=\"none\">total</syntaxhighlight> we define <syntaxhighlight lang=\"haskell\" enclose=\"none\">cut</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Cut.hs\" line>\ncut :: Company -> IO Company\ncut c = startTransactions c c cutSalary\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Concurrent programming]] and [[STM]] in [[Language:Haskell]] with [[TMVar]]s", "illustration_links": [{"type": "Implementation", "name": "wxHaskell"}], "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "concurrent_programming"}, {"type": "Concept", "name": "STM"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "TMVar"}, {"type": "Concept", "name": "MVar"}, {"type": "Concept", "name": "TMVar"}, {"type": "Implementation", "name": "mvar"}, {"type": "Concept", "name": "MVar"}, {"type": "Concept", "name": "STM"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "mvar": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[concurrent programming]] in [[Language:Haskell]] with Haskell's [[MVar]]s, i.e., thread synchronization variables. To this end, [[task parallelism]] is leveraged in a manner that computations for the operations for totaling and cutting salaries are organized in multiple threads. In fact, a new thread is created for each new sub-department as it is encountered along the computation. The result of from each thread is stored in an [[MVar]] and then collected and aggregated with other results by the \"upper\" thread. Clearly, if efficiency rather than illustration was the objective here, then a more resource-aware strategy is needed.", "name": "mvar", "headline_links": [{"type": "Concept", "name": "Concurrent_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "MVar"}], "url": "http://101companies.org/index.php/101implementation:mvar", "illustration_links": [], "architecture_links": [], "illustration": "=== Concurrent cutting ===\n\nWe create new threads using <syntaxhighlight lang=\"haskell\" enclose=\"none\">forkIO :: IO () -> IO ThreadId</syntaxhighlight> provided by Haskell's concurrency library <syntaxhighlight lang=\"haskell\" enclose=\"none\">Control.Concurrent</syntaxhighlight>. This function executes the given IO action in a new thread and returns a <syntaxhighlight lang=\"haskell\" enclose=\"none\">ThreadId</syntaxhighlight> value. On the top company level we do so for every department:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Cut.hs\">\ncutCompany :: Company -> IO Company\ncutCompany (Company n depts) = do\n    mvars <- forM depts $ \\d -> do\n        mvar' <- newEmptyMVar\n        forkIO $ cutDept mvar' d\n        return mvar'\n    cutDepts <- takeAllMVars mvars\n    return $ Company n cutDepts\n</syntaxhighlight>\nWe iterate over the departments by making use of <syntaxhighlight lang=\"haskell\" enclose=\"none\">forM</syntaxhighlight> in line 3. For each department we create a new empty <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> value, which we then pass to the cut function, which we start in a new thread. We collect all <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> values in <syntaxhighlight lang=\"haskell\" enclose=\"none\">mvars</syntaxhighlight>. In line 7 we wait for the results of the computations. The new company is returned in line 8. Similar to this we cut departments:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Cut.hs\">\ncutDept :: MVar Department -> Department -> IO ()\ncutDept mvar (Department n m dus eus) = do\n    mvars <- forM dus $ \\d -> do\n        mvar' <- newEmptyMVar\n        forkIO $ cutDept mvar' d\n        return mvar'\n    cutDus <- takeAllMVars mvars\n    putMVar mvar $ Department n (cutEmployee m) \n                                (cutDus) \n                                (map cutEmployee eus)    \n</syntaxhighlight>\nThe difference to <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutCompany</syntaxhighlight> is that <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutDept</syntaxhighlight> puts the new department in a given <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> value.\n\nThe cutting of direct department employees is not performed in a new thread:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Cut.hs\">\ncutEmployee :: Employee -> Employee\ncutEmployee (Employee name address salary) = Employee name address $ salary / 2\n</syntaxhighlight>\n=== Collecting results ===\n\nBoth functions <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutCompany</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">cutDept</syntaxhighlight> need to wait for the child-threads to terminate. To do so we provide a function <syntaxhighlight lang=\"haskell\" enclose=\"none\">takeAllMVars</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellConcurrent/Utils.hs\">\ntakeAllMVars ::  [MVar a] -> IO [a]\ntakeAllMVars = mapM takeMVar\n</syntaxhighlight> \nThis function takes all <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> values one by one blocking on every empty MVar.", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Concurrent programming]] in [[Language:Haskell]] with [[MVar]]s", "architecture": "[this!!Total.hs] and [this!!Cut.hs] provide functionality for totaling and cutting salaries in a concurrent way. \n[this!!Utils.hs] contains a function to collect content of a list of <syntaxhighlight lang=\"haskell\" enclose=\"none\">MVar</syntaxhighlight> values.\nThe algebraic datatype for companies can be found in [this!!Company.hs]. \n[this!!Main.hs] collects test scenarios for totaling and cutting a sample company hosted by [this!!SampleCompany.hs].", "issues_links": [], "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "concurrent_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "MVar"}, {"type": "Concept", "name": "task_parallelism"}, {"type": "Concept", "name": "MVar"}], "issues": "* The current implementation does not address the problem of a possibly unbalanced department tree.\n* The collection function for MVars blocks on every empty element. We may need a more sophisticated collection function.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "haskellDB": {"usage_links": [{"type": "Implementation", "name": "hdbc"}], "motivation": "The implementation demonstrates schema-aware [[database programming]] in  [[Language:Haskell]] with [[Technology:HaskellDB]]. That is, the [[database schema]] of a [[database]] for companies is mapped to Haskell types. Database queries are expressed as Haskell functions on top of Haskell types that are derived by [[Technology:DBDirect]], which is part of [[Technology:HaskellDB]]. The functions leverage HaskellDB's library for [[relational algebra]] and other [[CRUD]] expressiveness. For comparison, see [[101implementation:hdbc]] for a demonstration of ''schema-unaware'' database programming in Haskell where database queries are expressed in [[Language:SQL]] whose execution is embedded into Haskell. [[Technology:DBDirect]] derives one module per database table. These modules are the basis for accessing the database within the Haskell program in a schema-aware manner. For instance, operations for totaling and cutting salaries are implemented with the module for employees and while leveraging combinators for projection, selection, aggregation, and renaming. With the use of relational algebra and library functions for other CRUD expressiveness, all operations are effectively independent of the underlying [[DBMS]] <cite>bringert2004student</cite>. The connection to the underlining [[Technology:MySQL]] database is achieved by means of a \"HaskellDB-[[Technology:HDBC]]-[[Technology:ODBC]]\" back-end.", "name": "haskellDB", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:haskellDB", "headline_links": [{"type": "Concept", "name": "database_programming"}, {"type": "Technology", "name": "HaskellDB"}], "architecture_links": [], "illustration": "=== Connecting to the database ===\n\nWe provide a function to connect to a database and execute an action:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/MyConnection.hs\">\nexecute :: (Database -> IO a) -> IO a\nexecute = connect driver conf\n  where           \n    conf = [ (\"Driver\",\"MySQL ODBC 5.1 Driver\")\n           , (\"Port\",\"3306\")\n           , (\"Server\", \"localhost\")\n           , (\"User\", \"root\")\n           , (\"Database\", \"101companies\") ]\n</syntaxhighlight>\nWe use <syntaxhighlight lang=\"haskell\" enclose=\"none\">connect</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">driver</syntaxhighlight>, which are both provided by the HDBC-ODBC back-end.\nBy looking at the return type of the function one can see that any database function of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Database -> IO a</syntaxhighlight> can be applied to <syntaxhighlight lang=\"haskell\" enclose=\"none\">execute</syntaxhighlight> resulting in the specified IO action and possibly a result of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">a</syntaxhighlight>. By encapsulating the connection process like this we achieve complete independence from the underling database implementation for all queries and statements. \n\n=== DBDirect ===\n\nWe use the DBDirect command <syntaxhighlight lang=\"make\" enclose=\"none\">dbdirect-hdbc-odbc</syntaxhighlight> (see the usage section for the complete command). This command generates a module describing the database by naming tables and fields. Compiling this module with GHC creates one module per table, each module holding actual variables for tables and fields. These variables are the basis for the following totaling query.\n\n=== Totaling ===\n\nWe import the description modules for the companies and employees tables:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/Total.hs\">\nimport qualified DBDesc.Employee as E\nimport qualified DBDesc.Company as C\n</syntaxhighlight>\nWe define a special field for storing the sum of all salaries:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/Total.hs\">\ndata Ttl = Ttl\n\ninstance FieldTag Ttl where fieldName _ = \"ttl\"\n  \nttl :: Attr Ttl Double\nttl = mkAttr Ttl  \n</syntaxhighlight>\nWe declare <syntaxhighlight lang=\"haskell\" enclose=\"none\">Ttl</syntaxhighlight> to be an instance of the <syntaxhighlight lang=\"haskell\" enclose=\"none\">FieldTag</syntaxhighlight> class by specifying what the name of the field should be. We use this field and HaskellDB's <syntaxhighlight lang=\"haskell\" enclose=\"none\">mkAttr</syntaxhighlight> to define an attribute <syntaxhighlight lang=\"haskell\" enclose=\"none\">ttl</syntaxhighlight> for holding a <syntaxhighlight lang=\"haskell\" enclose=\"none\">Double</syntaxhighlight> value.\nThe actual total query is defined as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/Total.hs\">\ntotal :: String -> Query (Rel (RecCons Ttl (Expr Double) RecNil))\ntotal cname = do \n  es <- table E.employee\n  cs <- table C.company\n\n  restrict $\n    ( fromNull (constant 0) (cs!C.xid) .==. es!E.cid \n      .&&. \n      cs!C.name .==. constant cname )\n\n  project (ttl << _sum (es!E.salary))\n</syntaxhighlight>\nWe are working in the <syntaxhighlight lang=\"haskell\" enclose=\"none\">Query</syntaxhighlight> monad. The <syntaxhighlight lang=\"haskell\" enclose=\"none\">table</syntaxhighlight> functions return all records in the given table. Using two tables gives us the relational cross product of those tables lines 3 and 4. We use HaskellDB's selection function <syntaxhighlight lang=\"haskell\" enclose=\"none\">restrict</syntaxhighlight> in line 6-9 to select only those rows in which the company-id of the employee is equal to the company which has the given name <syntaxhighlight lang=\"haskell\" enclose=\"none\">cname</syntaxhighlight>. By making use of <syntaxhighlight lang=\"haskell\" enclose=\"none\">project</syntaxhighlight> in line 11 we only select the salary column and then use the aggregation function <syntaxhighlight lang=\"haskell\" enclose=\"none\">_sum</syntaxhighlight> to total all salaries. After that we put the total value in <syntaxhighlight lang=\"haskell\" enclose=\"none\">ttl</syntaxhighlight>. \n\n=== Executing the query ===\n\nWe use <syntaxhighlight lang=\"haskell\" enclose=\"none\">query</syntaxhighlight> and <syntaxhighlight lang=\"haskell\" enclose=\"none\">execute</syntaxhighlight> to execute the totaling query:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/Main.hs\">\nlet cname = \"meganalysis\"\n[res] <- execute $ (flip $ query) $ total cname\n</syntaxhighlight>\nThis gives us a list (which we expect to be a singleton list) of records. We can now access the <syntaxhighlight lang=\"haskell\" enclose=\"none\">ttl</syntaxhighlight> attribute of the record <syntaxhighlight lang=\"haskell\" enclose=\"none\">res</syntaxhighlight> by using the <syntaxhighlight lang=\"haskell\" enclose=\"none\">(!)</syntaxhighlight>-operator and print the total value:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellDB/Main.hs\">\nprint $ res!ttl\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "SQL"}], "headline": "Schema-aware [[database programming]] with [[Technology:HaskellDB]]", "architecture": "We provide MySQL-scripts to create (see [this!!Company.sql]) company tables and populate (see [this!!Meganalysis.sql]) these tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using HaskellDB's relational algebra library. [this!!MyConnection.hs] encapsulates the process of connecting to the MySQL database. [this!!Main.hs] collects test scenarios for totaling and cutting.", "usage": "=== Setup ===\n\n* Follow the steps of setting up the database as described in the usage section for the [[101implementation:hdbc|hdbc]] implementation.\n\n=== Generating the database description ===\n\n* Execute the following command in the implementation folder: \n<syntaxhighlight lang=\"make\">\ndbdirect-hdbc-odbc \"DBDesc\" \"DBDesc\" \\\n                \"Driver=MySQL ODBC 5.1 Driver;\\\n\t\tPort=3306;\\\n\t\tServer=localhost;\\\n\t\tUser=root;\\\n\t\tDatabase=101companies\"\n</syntaxhighlight>\n* Compile the ''DBDesc'' module using GHC: <syntaxhighlight lang=\"make\" enclose=\"none\">ghc DBDesc</syntaxhighlight>\n\n=== Testing ===\n\n* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' covering both database descriptions generation and testing.", "technologies": [{"type": "Technology", "name": "HaskellDB"}, {"type": "Technology", "name": "ODBC"}, {"type": "Technology", "name": "HDBC"}, {"type": "Technology", "name": "DBDirect"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "GHC"}, {"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "database_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HaskellDB"}, {"type": "Concept", "name": "database_schema"}, {"type": "Concept", "name": "database"}, {"type": "Technology", "name": "DBDirect"}, {"type": "Technology", "name": "HaskellDB"}, {"type": "Concept", "name": "relational_algebra"}, {"type": "Concept", "name": "CRUD"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Language", "name": "SQL"}, {"type": "Technology", "name": "DBDirect"}, {"type": "Concept", "name": "DBMS"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "HDBC"}, {"type": "Technology", "name": "ODBC"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "html5session": {"motivation": "This implementation provides session [[Technology:Web storage|web storage]]. Apart from that, it is identical to [[101implementation:html5local]]. The illustration, architecture and usage is explained on that implemenation page.\n\n[[Category:Web application]]", "name": "html5session", "url": "http://101companies.org/index.php/101implementation:html5session", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "HTML5"}], "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "JSON"}], "headline": "[[Web programming]] based on the [[Language:HTML5]] ecosystem with session storage", "technologies": [{"type": "Technology", "name": "Web_storage"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "Web_storage"}, {"type": "Implementation", "name": "html5local"}, {"type": "Page", "name": "Web_application"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "hxtPickler": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[XML data binding]] for [[Language:Haskell]] with [[Technology:HXT]]'s [[Technology:XML pickler]]. As a result, companies can be imported from and exported to [[Language:XML]] while using [[algebraic data type]]s for companies in the core functional programming. The mapping between XML and algebraic data type relies on [[Technology:XML pickler]]'s [[type class]] <syntaxhighlight lang=\"haskell\" enclose=\"none\">XMLPickler</syntaxhighlight> for type-specific pickler functions. [[Type-class instance]]s are defined for the types for companies, departments, and employees. These definitions leverage [[Technology:XML pickler]]'s predefined [[arrow]]s for picklers, predefined picklers and pickler combinators.", "name": "hxtPickler", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:hxtPickler", "headline_links": [{"type": "Concept", "name": "XML_data_binding"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HXT"}, {"type": "Technology", "name": "XML_pickler"}], "architecture_links": [], "illustration": "=== A Pickler for Companies ===\n\nTo define a pickler for companies we declare an instance of <syntaxhighlight lang=\"haskell\" enclose=\"none\">XMLPickler</syntaxhighlight>:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxtPickler/Pickler.hs\">\ninstance XmlPickler Company where\n    xpickle = xpCompany\n</syntaxhighlight>\nThe pickler function <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpCompany</syntaxhighlight> is defined as follows:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxtPickler/Pickler.hs\" line>\nxpCompany :: PU Company\nxpCompany \n      = xpElem \"company\" $\n        xpWrap ( uncurry Company\n               , \\c -> ( cname c\n                       , depts c\n                       )\n                ) $\n        xpPair  (xpAttr \"name\" xpText)\n                (xpList xpickle)\n</syntaxhighlight>\nFor implementing <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpCompany</syntaxhighlight> we use <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpElem</syntaxhighlight> in line 3.\nBy using this function we define that a company, represented in XML, should be inside a XML tag labeled \"company\". The pickler for the content of the tag is defined by the second argument of <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpElem</syntaxhighlight>.\n\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">xpWrap</syntaxhighlight> is of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">(a -> b, b -> a) -> PU a -> PU b</syntaxhighlight>. \nIt returns a Pickler (PU) for <syntaxhighlight lang=\"haskell\" enclose=\"none\">b</syntaxhighlight> and expects a pair of functions from <syntaxhighlight lang=\"haskell\" enclose=\"none\">a</syntaxhighlight> to <syntaxhighlight lang=\"haskell\" enclose=\"none\">b</syntaxhighlight> and vice versa and a Pickler for <syntaxhighlight lang=\"haskell\"  enclose=\"none\">a</syntaxhighlight> (<syntaxhighlight lang=\"haskell\" enclose=\"none\">PA a</syntaxhighlight>).\n\nIn lines 4-8 the first part of the first argument of the wrapping pickler is <syntaxhighlight lang=\"haskell\" enclose=\"none\">uncurry Company</syntaxhighlight>. It defines how to construct a <syntaxhighlight lang=\"haskell\" enclose=\"none\">Company</syntaxhighlight> value from a pair of name and departments. The second part of the pair defines the opposite direction: How to disassemble a company into its components.\n\nThe second argument of <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpWrap</syntaxhighlight> in lines 9-10 defines the actual pickler for the (name, departments) pair (this is <syntaxhighlight lang=\"haskell\" enclose=\"none\">PA a</syntaxhighlight> in the type signature of the wrapping pickler). \nWe use the combinator for pairs <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpPair :: PU a -> PU b -> PU (a, b)</syntaxhighlight>. The pickler for the company name is defined by using a pickler for XML attributes and a pickler for text. That is, the company name should be an attribute of the \"company\" tag.\nThe pickler for the list of departments is defined by making use of a combinator for lists and <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpickle</syntaxhighlight>.\nBecause of type inference and because we also declare a <syntaxhighlight lang=\"haskell\" enclose=\"none\">XMLPickler</syntaxhighlight> instance for departments, Haskell will choose the appropriate pickler function for departments.\n\n=== Pickling a Company ===\n\nPickling a company is realized by using arrows:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxtPickler/Main.hs\">\nrunX ( constA company \n       >>>\n       xpickleDocument xpCompany [withIndent yes] $ \n       \"sampleCompanyCut.xml\"\n     )\n</syntaxhighlight>\nA lifted sample company is passed to the arrow for pickling a document. In this case <syntaxhighlight lang=\"haskell\" enclose=\"none\">xpickleDocument</syntaxhighlight> expects a pickler for companies, some writing options and a file name.\n\n=== Unpickling a Company ===\n\nTo unpickle a company the arrow function <syntaxhighlight lang=\"haskell\" enclose=\"none\">xunpickleDocument</syntaxhighlight> is used:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxtPickler/Main.hs\">\n[company1] <- runX ( xunpickleDocument xpCompany $ \n                     [withRemoveWS yes] $ \n                     \"sampleCompany.xml\" )\n</syntaxhighlight>\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">runX</syntaxhighlight> returns a list of arrow results, which we except to be a singleton list. On success <syntaxhighlight lang=\"haskell\" enclose=\"none\">company1</syntaxhighlight> should hold the unpicklered company.", "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "Haskell"}], "headline": "[[XML data binding]] for [[Language:Haskell]] with [[Technology:HXT]]'s [[Technology:XML pickler]]", "architecture": "[this!!Pickler.hs] holds the pickler definitions for companies, departments and employees. The algebraic data type for companies can be found in [this!!Company.hs].[this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality. [this!!sampleCompany.xml] holds a sample company. [this!!Main.hs] collects test scenarios for pickling/unpickling, totaling and cutting companies.", "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "HXT"}, {"type": "Technology", "name": "XML_pickler"}, {"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "XML_data_binding"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HXT"}, {"type": "Technology", "name": "XML_pickler"}, {"type": "Language", "name": "XML"}, {"type": "Concept", "name": "algebraic_data_type"}, {"type": "Technology", "name": "XML_pickler"}, {"type": "Concept", "name": "type_class"}, {"type": "Concept", "name": "TypeADASHclass_instance"}, {"type": "Technology", "name": "XML_pickler"}, {"type": "Concept", "name": "arrow"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}]}, "antlrLexer": {"usage_links": [{"type": "Implementation", "name": "antlrAcceptor"}], "motivation": "A lexer for companies is defined.\nThe lexer is, of course, oblivious to the precise structure of companies.\nSimple queries are expressible nevertheless.\nThat is, [[101feature:Type-driven query]] can be implemented by searching for number tokens.", "name": "antlrLexer", "url": "http://101companies.org/index.php/101implementation:antlrLexer", "headline_links": [{"type": "Technology", "name": "ANTLR"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "Lexer-based processing with [[Technology:ANTLR]]", "usage": "See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.", "technologies": [{"type": "Technology", "name": "ANTLR"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}]}, "html5indexedDatabase": {"usage_links": [{"type": "Page", "name": "Web_browser"}, {"type": "Technology", "name": "Google_Chrome"}, {"type": "Page", "name": "Web_application"}], "motivation": "The [[Technology:IndexedDB]] [[:Category:API]] is a good alternative solution for persisting data on the [[:Category:Client|client]] side of a [[:Category:Web application|web application]]. While the [[Technology:Web storage]] API uses ''key-value pairs'', the IndexedDB API uses indexed tables represented by a ''B''-tree structure for data storage. This is an applicable approach for larger amounts of data. Since the [[Synchronous communication|synchronous]] API is not fully implemented yet, we used the [[Asynchronous communication|asynchronous]] API.", "name": "html5indexedDatabase", "illustration_links": [{"type": "Technology", "name": "IndexedDB"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Implementation", "name": "html5local"}, {"type": "Concept", "name": "GUI"}, {"type": "Concept", "name": "Asynchronous_communication"}], "url": "http://101companies.org/index.php/101implementation:html5indexedDatabase", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Technology", "name": "IndexedDB"}, {"type": "Language", "name": "HTML5"}], "architecture_links": [{"type": "Implementation", "name": "html5local"}, {"type": "Technology", "name": "IndexedDB"}], "illustration": "The communication between the application and the [[Technology:IndexedDB|indexedDB]] is transaction based. But before using any transactions to gain access to the data we have to create the database and the data within. This section will start with the database initialization and data generation and will finish with illustrating a transaction based [[101feature:Type-driven transformation|cut]] request for the whole company. Please visit [[101implementation:html5local]] for the aspect of [[GUI]] generation.\n\n=== Database initialization ===\n\nThe implementation contains an initial open function for the database creation. If the database initialization is successful, the function also generates tables and data.\n\n<syntaxhighlight lang=\"javascript\" source=\"html5indexedDatabase/company.js\">\ncompanies.indexedDB.open = function(f) {\n\t\t\n\t// opens a connection to the 101Companies database\n\t// - if it does not exist, create new database\n\t// - if it exists, use database\n\tvar request = indexedDB.open(\"101Companies\");\n\n\t// the database connection is successfully established\n\trequest.onsuccess = function(e) {\n\n\t\t...\n\n\t};\n\n\t// the database connection is unavailable\n\trequest.onfailure = companies.indexedDB.onerror;\n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"javascript\" enclose=\"none\">indexedDB.open(\"101Companies\");</syntaxhighlight> function opens the connection to an existing database named ''101Companies'' or creates a new database with this name, if it does not exist. It returns a request status object, as well. This object allows an [[Asynchronous communication|asynchronous]] callback for the two possible results of the ''open'' function: success or failure. On failure, the <syntaxhighlight lang=\"javascript\" enclose=\"none\">companies.indexedDB.onerror</syntaxhighlight> function returns some user notification. On success, we are able to continue with the table generation:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5indexedDatabase/company.js\">\n\n...\n\n// creates a data table for Companies\nvar companiesStore = db.createObjectStore(\"Company\", {keyPath: \"id\"});\n\n...\n\n</syntaxhighlight>\nThis simple call creates a table named ''Company'' with the key ''id''. This table is able to store arrays with any fields, except that the field called ''id'' is used as the key for the b-tree of the table. It returns the table object for further use, as well.\n\n=== Data generation ===\n\nData manipulations are handled with transactions. This is why we have to create transactions to generate the table contents. Each data manipulation consists of three steps:\n\n* create transaction\n* retrieve table object\n* put data into the table as an array\n\n<syntaxhighlight lang=\"javascript\" source=\"html5indexedDatabase/company.js\">\ncompanies.indexedDB.addData = function() {\n\n\t// get database\n\tvar db = companies.indexedDB.db;\n\t// create transaction\n\tvar transComp = db.transaction([\"Company\"], IDBTransaction.READ_WRITE, 0);\n\t// get company table\n\tvar compStore = transComp.objectStore(\"Company\");\n\n\t...\n\n\t// create data object with id = 0\n\tvar compData = {\n\t\t\"company\": \"Meganalysis\",\n\t\t\"id\": 0\n\t};\n  \n\t...\n\n\t// store data object\n\tcompStore.put(compData);\n\n\t...\n\t\n};\n</syntaxhighlight>\nWe first retrieve the database using the field <syntaxhighlight lang=\"javascript\" enclose=\"none\">companies.indexedDB.db;</syntaxhighlight>. After that,  a new transaction to the ''Company'' table with <syntaxhighlight lang=\"javascript\" enclose=\"none\">READ_WRITE</syntaxhighlight> access has to be created. The table is retrieved with <syntaxhighlight lang=\"javascript\" enclose=\"none\">transComp.objectStore(\"Company\");</syntaxhighlight>. We now are able to read and write data from and into the table.\n\n=== Feature implementation ===\n\nThe manipulation of data corresponds to its creation except that we need a cursor to get the required arrays out of the b-tree. In case of cutting the company we need all employees:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5indexedDatabase/companyModel.js\">\ncompanies.indexedDB.cut = function() {\n\t// get database\n\tvar db = companies.indexedDB.db;\n\n\t// create transaction\n\tvar transEmp = db.transaction([\"Employee\"], IDBTransaction.READ_WRITE, 0);\n\t// get employee table\n\tvar empStore = transEmp.objectStore(\"Employee\");\n\t\n\t// Key range: Get every single employee in the store\n\tvar keyRange = IDBKeyRange.lowerBound(0);\n\t// create Cursor with key range\n\tvar cursorRequest = empStore.openCursor(keyRange);\n\n\t// cursor runs through the result-set\n\tcursorRequest.onsuccess = function(e) {\n\t\tvar result = e.target.result;\n\t\tif(!!result == false)\n\t\t\treturn;\n\t\t// cut the salary\n\t\tresult.value.salary = result.value.salary / 2;\n\t\t// store the employee\n\t\tempStore.put(result.value);\n\t\t// next employee ...\n\t\tresult.continue();\n\t};\n\n\t// error handling\n\tcursorRequest.onerror = companies.indexedDB.onerror;\n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"javascript\" enclose=\"none\">IDBKeyRange.lowerBound(0);</syntaxhighlight> means, that all keys are greater than 0. That is, in case of employees, every element within the employee b-tree. If the cursor is successfully created (<syntaxhighlight lang=\"javascript\" enclose=\"none\">var cursorRequest = empStore.openCursor(keyRange);</syntaxhighlight>), we are able to run through the results within the <syntaxhighlight lang=\"javascript\" enclose=\"none\">onsuccess</syntaxhighlight> function. The function <syntaxhighlight lang=\"javascript\" enclose=\"none\">e.target.result</syntaxhighlight> delivers the next element. If it exists, we cut the salary and restore it into the database. After that, we continue with the next element at <syntaxhighlight lang=\"javascript\" enclose=\"none\">result.continue();</syntaxhighlight>.", "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}], "headline": "[[Web programming]] with [[Technology:IndexedDB|indexedDB]] based on the [[Language:HTML5]] ecosystem", "architecture": "The architecture is equal to [[101implementation:html5local]], except that the model organizes the connection to the [[Technology:IndexedDB|indexed database]].", "usage": "* Check out all files from the repository.\n* Open the [this!!index.html] with your [[:Category:Web browser]]. This application currently does work only with [[Technology:Google Chrome|google chrome]].\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "IndexedDB"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "IndexedDB"}, {"type": "Page", "name": "API"}, {"type": "Page", "name": "Client"}, {"type": "Page", "name": "Web_application"}, {"type": "Technology", "name": "Web_storage"}, {"type": "Concept", "name": "Synchronous_communication"}, {"type": "Concept", "name": "Asynchronous_communication"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Web_UI"}]}, "stratego": {"motivation": "", "name": "stratego", "url": "http://101companies.org/index.php/101implementation:stratego", "headline_links": [], "languages": [], "headline": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "javaParser": {"usage_links": [], "motivation": "Recursive-descent parsing is used to process a text-based representation of companies.\nThe underlying lexer is custom-made, too.\nBoth lexer and parser use a lookahead of 1.\nThe lexer reports all tokens excluding whitespace.\nThe parser relies on protected handler methods to allow for injection of semantic actions.\nFor instance, [[101feature:Type-driven query]] is implemented by defining the handler for employees to aggregate salaries.\nThe implementation of [[101feature:Type-driven transformation]] requires ad hoc pretty printing.\nSuch a combination of parsing and pretty printing implements [[101feature:Data import]] and [[101feature:Data export]].", "name": "javaParser", "url": "http://101companies.org/index.php/101implementation:javaParser", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Implementation", "name": "javaLexer"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "recursive-descent parsing in [[Language:Java]]", "architecture": "Package ''org.softlang.parser'' hosts all components for parsing: a lexer, an enum type for tokens,\nand a parser that can be customized with semantic actions by class inheritance. (The lexer is essentially c\nopied from [[101implementation:javaLexer]] except that whitespace is skipped.) Package \n''org.softlang.operations'' hosts implementations of [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]].\nPackage ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.\n** Run class ''Noop'' with JUnit to exercise positive and negative test cases for the parser.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "html5ajax": {"usage_links": [{"type": "Implementation", "name": "mySql"}, {"type": "Implementation", "name": "mySql"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "This [[:Category:Web application|web application]] provides an optimized data exchange between the [[client]] and the [[server]]. It is achieved by the use of the [[Ajax]] principle. Optimized data exchange with Ajax means, that only necessary parts of the current page are reloaded and only necessary data are transmitted from the server to the client. This web application uses the [[Technology:XMLHttpRequest]] [[:Category:API]] included in [[Language:HTML5]] and is developed without any supporting [[Language:JavaScript]] [[:Category:Framework|framework]].", "name": "html5ajax", "illustration_links": [{"type": "Concept", "name": "MVC"}, {"type": "Concept", "name": "ClientADASHserver_architecture"}, {"type": "Concept", "name": "client"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "HTML5"}, {"type": "Concept", "name": "method"}, {"type": "Concept", "name": "server"}, {"type": "Language", "name": "JSON"}, {"type": "Language", "name": "XML"}, {"type": "Concept", "name": "OO_programming"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "PHP"}, {"type": "Concept", "name": "client"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Page", "name": "Server"}], "url": "http://101companies.org/index.php/101implementation:html5ajax", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "HTML5"}, {"type": "Concept", "name": "Ajax"}], "architecture_links": [{"type": "Concept", "name": "MVC"}, {"type": "Page", "name": "Client"}, {"type": "Concept", "name": "server"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}, {"type": "Concept", "name": "user_interface"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "JSON"}, {"type": "Page", "name": "Client"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Page", "name": "API"}, {"type": "Concept", "name": "GUI"}], "illustration": "This implementation is [[MVC]] and [[Client-server architecture|client-server]] based. In order to create a reasonable illustration of the different layers of this application, this section is geared to this layers. The view, controller and some parts of the model are located on the [[client]] side.\n\n=== Client ===\n\nThe view is mainly [[Language:HTML]] based, even though there are [[Language:JavaScript]] parts. The following example shows a table row in the [[Language:HTML5]] [this!!client/company.html company.html] document, which creates the textfield for the companies' total output and the cut button:\n\n<syntaxhighlight lang=\"xml\" source=\"html5ajax/client/company.html\">\n<table>\n           \n\t...\n\n\t<tr>\n\t\t<td>Total:</td>\n\t\t<td><input type=\"text\" name=\"total\" class=\"text\" readonly=\"readonly\"/></td>\n\t\t<td><input type=\"button\" class=\"button\" value=\"cut\" onClick=\"controller.cut()\"/></td> \n\t</tr>\n          \n\t...\n\n</table>\n</syntaxhighlight>\nIf the user presses the cut button, the corresponding JavaScript [[method]] located in the client side model [this!!/client/model/companyModel.js companyModel.js] is invoked through the [this!!client/javascript/controller.js controller.js]. The ''initCompany'' method, used in ''cut'', initializes an object with all necessary data to identify the company on the [[server]] side:\n\n<syntaxhighlight lang=\"java\" source=\"html5ajax/client/model/companyModel.js\">\n// cut company\nmodel.cut = function(strategy) {\n\tmodel.initCompany();\n\tmodel.company.action = \"cut\";\n    \n\tmodel.sendRequest(strategy, model.company);\n}\n</syntaxhighlight>\nThe sent request contains a strategy, which defines the reaction after receiving the response. In case of a non error response the strategy refreshes the total field of the company.\n\nThe use of [[Language:JSON]] instead of [[Language:XML]] for request and response messages has a major advantage: The messages are created in an [[OO programming]] style and can easily be transformed into JSON strings. There is no additional effort for creating and interpreting complex [[Language:XML]] messages. The JSON message for the specific cut request contains the necessary information about the action and the entity:\n\n<syntaxhighlight lang=\"text\">\n{\n\t\"id\":1,\n\t\"table\":\"company\",\n\t\"action\":\"cut\"\n}\n</syntaxhighlight>\nThe message is received by the server, which cuts the company with the identifier 1.\n\n=== Server ===\n\nAfter receiving the cut request, the server performs the corresponding action within the [[Language:PHP]] script [this!!server/companyServer.php companyServer.php]. After that, it returns the new information for the company to the [[client]]:\n\n<syntaxhighlight lang=\"php\" source=\"html5ajax/server/companyServer.php\">\n// ---------------------------------------- cut company\nfunction cut($jsonObject) {\n\t$id = $jsonObject->id;\n\t$request = \"UPDATE employee SET salary = salary / 2 WHERE cid = $id\";\n\tmysql_query($request);\n       \n\treturn loadCompany($jsonObject);\n}\n</syntaxhighlight>\nThe answer is a stringified company object containing all necessary information about the company (and nothing more):\n\n<syntaxhighlight lang=\"text\">\n{\n\t\"name\":\"meganalysis\",\n\t\"departments\":[\"Research\",\"Development\"],\n\t\"total\":199873.5\n}\n</syntaxhighlight>\nThis application implements the [[101feature:Attribute editing|attribute editing]] feature. Hence, there is also validation. The client side validation is performed within the client side part of the model, while the [[:Category:Server|server]] side validation is performed within the PHP scripts. If there is a client side input error, no request will be created and the error is displayed directly. If there is a server side error, the PHP script responds with an appropriate JSON message.", "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "JSON"}], "headline": "[[Web programming]] based on the [[Language:HTML5]] ecosystem using [[Ajax]] style ", "architecture": "The architecture is based upon the [[MVC]] pattern. While the view (example: [this!!/client/company.html company.html], [this!!/client/javascript/view/companyView.js companyView.js]) and the controller ([this!!/client/javascript/controller.js controller.js]) are parts of the [[:Category:Client|client]], the model is part of the [[server]] and the client.\n\n* The view is based on pure [[Language:HTML]] (see [this!!client/]) and [[Language:JavaScript]]. The corresponding JavaScript files (see [this!!/client/javascript/views]) are used to fill the fields of the [[user interface]].\n\n* The model on the server side (see [this!!server/]) is a [[Language:PHP]] script and receives the requests and responds in [[Language:JSON]]. The model on the [[:Category:Client|client-side]] (see [this!!client/javascript/model]) receives the JSON message and refreshes its data (example: [this!!/server/companyServer.php companyServer.php], [this!!/client/javascript/requests/companyModel.js companyModel.js]).\n\n* All requests and responses via the [[Technology:XMLHttpRequest]] [[:Category:API]] are handled by the function defined in [this!!client/javascript/model/XMLHttpRequest.js].\n\n* The JavaScript based controller (see [this!!client/javascript/controller.js controller.js]) handles the actions invoked by the user and refreshes the [[GUI]] at the client side.", "usage": "You need a web and sql server to use this application. In this tutorial both will be taken care of by XAMPP: http://www.apachefriends.org/en/xampp.html\n\nThis tutorial adopts some parts of [[101implementation:mySql]]. The company.sql and sampleCompany.sql are modified for this project. They are located in the \"sqlScripts\" folder.\n\n* Download and install XAMPP\n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"MySQL\"\n* Use the guideline of [[101implementation:mySql]] up to \"Populate tables...\" with the modified sql scripts.\n\nOnce the database is running, follow the next steps:\n\n* To start the application, you need to download all project files\n* Put the files into the htdocs directory of your XAMPP (a new sub-directory in \"htdocs\" is recommended)\n* Run index.html\n\nThe project is provided as a netbeans project. If you want to change the code, you have to:\n\n* Download (http://netbeans.org/) and install [[Technology:NetBeans]]\n* \"Open project\" and select the html5ajax folder\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "XAMPP"}, {"type": "Technology", "name": "Apache_HTTP_Server"}, {"type": "Technology", "name": "XMLHttpRequest"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "Web_application"}, {"type": "Concept", "name": "client"}, {"type": "Concept", "name": "server"}, {"type": "Concept", "name": "Ajax"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Page", "name": "API"}, {"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Framework"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "javawsServer": {"usage_links": [], "motivation": "TBD", "name": "javawsServer", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:javawsServer", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [], "illustration": "", "languages": [{"type": "Language", "name": "Java"}], "headline": "Implementing Web services in [[Language:Java]] (server side)", "architecture": "The object model is re-using basic Java implementation.", "usage": "* The implementation is provided as an Eclipse project. \n* To run this service locally you need a JBoss v.5.0 installed", "technologies": [], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "ruby": {"motivation": "We make use of the Ruby Development Tools plug-in for Eclipse:\nhttp://www.ibm.com/developerworks/opensource/library/os-rubyeclipse/\n\nWe use a simple object model for companies.\nThese are plain ruby objects plus instance methods for some of the scenarios.\nSee the tests package for test cases.", "name": "ruby", "url": "http://101companies.org/index.php/101implementation:ruby", "headline_links": [], "languages": [], "headline": "a simple ruby implementation", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "scalaXML": {"usage_links": [], "motivation": "This implementation shows the use of XML literals which are built into Scala at language level. At no point, an object model is generated beyond Scala's internal XML representation.", "name": "scalaXML", "url": "http://101companies.org/index.php/101implementation:scalaXML", "headline_links": [{"type": "Language", "name": "Scala"}], "architecture_links": [], "languages": [{"type": "Language", "name": "Scala"}], "headline": "an implementation of the basic spec in [[Language:Scala]] utilizing Scala's builtin XML handling features.", "architecture": "All relevant code is contained in ''CompanyXMLReader.scala''. The cut and total capabilities are contained in a singleton object by the same name. In ''Validator.scala'', a default XML Schema validator is provided for testing purposes.", "usage": "This implementation uses sbt 0.10 as build tool, available at [http://github.com/harrah/xsbt/]. After installing sbt just change into the project directory and run\n <nowiki>sbt</nowiki>\nto create the project, followed by\n <nowiki>sbt update</nowiki>\nThis should fetch any needed dependencies. After that you can compile the project by typing\n <nowiki>sbt compile</nowiki>\nand then\n <nowiki>sbt test</nowiki>\nto run the tests.", "technologies": [{"type": "Technology", "name": "Scala"}, {"type": "Technology", "name": "sbt"}, {"type": "Technology", "name": "Specs"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "cppMpl": {"motivation": "This is an esoteric implementation in C++ using template metaprogramming. It isn't how you would ''want'' to ever do this, but there are some pretty simple examples of C++ MPL, so it might be a good example for people wanting to learn C++ MPL.", "name": "cppMpl", "url": "http://101companies.org/index.php/101implementation:cppMpl", "headline_links": [], "languages": [{"type": "Language", "name": "CAPLUSAPLUS"}], "headline": "demonstrate template metaprogramming with C++", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "linq2DataSet": {"usage_links": [], "motivation": "", "name": "linq2DataSet", "url": "http://101companies.org/index.php/101implementation:linq2DataSet", "headline_links": [], "architecture_links": [], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "an implementation with O/R mapping using LINQ2DataSet", "architecture": "", "usage": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "javaTemplate": {"usage_links": [], "motivation": "We identify templates for queries and transformations over companies.\nWe instantiate those templates for totaling and cutting salaries.", "name": "javaTemplate", "url": "http://101companies.org/index.php/101implementation:javaTemplate", "headline_links": [], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "illustration of the Template design pattern in Java", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]].\n(These classes were adopted from [[101implementation:javaComposition]] with the\ninstance methods for totaling and cutting removed.)\nPackage ''org.softlang.template'' hosts the templates for queries and transformations.\nPackage ''org.softlang.features'' hosts the features [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]].\nPackage ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n** Run class ''Serialization'' with JUnit to exercise serialization.", "technologies": [], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "jocamlJoinPatterns": {"usage_links": [{"type": "Language", "name": "JoCaml"}, {"type": "Technology", "name": "GNU_make"}, {"type": "Technology", "name": "diff"}], "motivation": "Nowadays, [[event handling]] is a standard technique in GUI programming. However, \nthere is a lot of research going on to use such an [[event handling|event-based]] \napproach for [[concurrency|concurrent programming]]. The idea is to [[Parallelism|parallelize]] \nthe [[event handling|handling of events]] by combining simple [[events]] to \nmore complex ones using so called [[join patterns]]. This project demonstrates \nthe usage of [[concurrency]] by [[event handling]] in JoCaml using such \n[[join patterns]].", "name": "jocamlJoinPatterns", "illustration_links": [{"type": "Concept", "name": "Join_patterns"}, {"type": "Concept", "name": "events"}, {"type": "Concept", "name": "channels"}, {"type": "Concept", "name": "event_handling"}, {"type": "Concept", "name": "channels"}, {"type": "Concept", "name": "channels"}, {"type": "Concept", "name": "state"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "Events"}, {"type": "Concept", "name": "state"}], "url": "http://101companies.org/index.php/101implementation:jocamlJoinPatterns", "headline_links": [{"type": "Language", "name": "JoCaml"}, {"type": "Concept", "name": "join_patterns"}], "architecture_links": [], "illustration": "[[Join patterns]] combine several [[events|event]] [[channels]], which all must be \nserved in order to start the [[event handling|handling]]. If [[channels]]\nrepresent functions on an object-like strucure another [[channels|channel]] is often used\nas a internal [[state]], which is modified by the function.  \n\n <nowiki>\n(* join pattern for cut *) \ndef employeeState (n, a, s) & cut () = \n    employeeState (n, a, s *. 0.5)\n</nowiki>\n\nFor example the internal state ''employeeState (n, a, s)'' describes an employee \nwith name, address and salary. If a [[101feature:Type-driven transformation|Cut]]-[[Events|event]] \noccurs this internal [[state]] is consumed and triggered again with a modified \nsalary.", "languages": [{"type": "Language", "name": "JoCaml"}], "headline": "A [[Language:JoCaml|JoCaml]]-based implementation that uses [[join patterns]]", "architecture": "* ''company.ml'' company structure\n* ''company.mli'' header, company signature\n* ''meganalysis.ml'' sample company\n* ''main.ml'' simple test program", "usage": "You need to install J[[Language:JoCaml|JoCaml]] . \n\nUse the [[Technology:GNU make|makefile]] for some demo:\n* Enter ''make compile'' to compile the code\n* Enter ''make test'' to execute the script contained in ''main.ml'' and to perform a simple [[Technology:diff|diff-based]] test", "technologies": [{"type": "Technology", "name": "jocaml"}, {"type": "Technology", "name": "jocamlc"}, {"type": "Technology", "name": "GNU_make"}, {"type": "Technology", "name": "diff"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "event_handling"}, {"type": "Concept", "name": "event_handling"}, {"type": "Concept", "name": "concurrency"}, {"type": "Concept", "name": "Parallelism"}, {"type": "Concept", "name": "event_handling"}, {"type": "Concept", "name": "events"}, {"type": "Concept", "name": "join_patterns"}, {"type": "Concept", "name": "concurrency"}, {"type": "Concept", "name": "event_handling"}, {"type": "Concept", "name": "join_patterns"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "prolog": {"usage_links": [], "motivation": "We demonstrate the most basic style of logic programming for modeling company structure and basic operations.", "name": "prolog", "url": "http://101companies.org/index.php/101implementation:prolog", "headline_links": [{"type": "Language", "name": "Prolog"}], "architecture_links": [], "languages": [{"type": "Language", "name": "Prolog"}], "headline": "a simple [[Language:Prolog]]-based implementation", "architecture": "There is a predicate total/2 to total all salaries in a company.\nThere is a predicate cut/2 to cut all salaries in half.\nThere is a predicate depth/2 to compute the nesting depth of departments.", "usage": "See the Makefile for running the tests.\n\nThe code has been tested with SWI-Prolog 5.10.1.", "technologies": [{"type": "Technology", "name": "SWIADASHProlog"}], "type": "Implementation", "motivation_links": [], "features": []}, "csharpDryadLinq": {"usage_links": [{"type": "Page", "name": "DataADASHparallelism_theme"}], "motivation": "", "name": "csharpDryadLinq", "url": "http://101companies.org/index.php/101implementation:csharpDryadLinq", "headline_links": [{"type": "Technology", "name": "DryadLINQ"}], "languages": [], "headline": "Parallel processing with [[Technology:DryadLINQ]]", "usage": "* Download and install HPC Pack with SP1 SDK http://www.microsoft.com/download/en/details.aspx?id=9230\n* Download and install HPC Pack 2008 R2 Client Utilities http://www.microsoft.com/download/en/details.aspx?id=17017\n* http://research.microsoft.com/en-us/downloads/03960cab-bb92-4c5c-be23-ce51aee0792c/\n\n[[Category:Data-parallelism theme]]", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "hdbc": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[database programming]] in [[Language:Haskell]] with [[Technology:HDBC]]. That is, [[Technology:HDBC]] is used to access a [[database]] with company data from within Haskell by means of embedded [[Language:SQL]]. In particular, simple [[Prepared statement|(prepared) SQL statements]] for totaling and cutting salaries are implemented in this manner. SQL query results are mapped to HDBC's Haskell data types for results; query results are fetched in a lazy manner. The connection to the [[Technology:MySQL]] database is realized by means of an [[Technology:ODBC]] back-end. Hence, the Haskell code for cutting and totaling salaries is independent from the concrete [[DBMS]]. The implementation is only dynamically typed in the sense that the database schema is not leveraged in any way to statically typecheck the Haskell code. See [[101implementation:haskellDB]] for a schema-ware approach to database programming in Haskell.", "name": "hdbc", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:hdbc", "headline_links": [{"type": "Concept", "name": "Database_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HDBC"}], "architecture_links": [], "illustration": "=== Connecting ===\n\nIn [this!!Main.hs] we connect to the MySQL database by using an ODBC driver and appropriate connection information:\n\n<syntaxhighlight lang=\"haskell\" source=\"hdbc/Main.hs\">\nlet connString = \"Driver={MySQL ODBC 5.1 Driver};\"\n              ++ \"Server=localhost;\"\n              ++ \"Port=3306;\"\n              ++ \"Database=101companies;\"\n              ++ \"User=root;\"\nconn <- connectODBC connString\n</syntaxhighlight>\n=== Totaling ===\n\nThe function <syntaxhighlight lang=\"haskell\" enclose=\"none\">total</syntaxhighlight> defines a statement to total all salaries:\n\n<syntaxhighlight lang=\"haskell\" source=\"hdbc/Total.hs\">\ntotal :: IConnection conn => conn -> String -> IO Double\ntotal conn cName = do\n     stmt <- prepare conn $ \n        \"SELECT salary \" ++ \n        \"FROM employee, company \" ++ \n        \"WHERE company.name = ? and \" ++ \n        \"company.id = employee.cid\"\n     execute stmt [toSql cName]\n     res <- fetchAllRows stmt\n     return $ sum (map (fromSql.head) res)        \n</syntaxhighlight>\nIn lines 3-7 we use a prepared statement in which the company name placeholder is then replaced by the given name <syntaxhighlight lang=\"haskell\" enclose=\"none\">cName</syntaxhighlight>. The statement is executed and we use the lazy HDBC function <syntaxhighlight lang=\"haskell\" enclose=\"none\">fetchAllRows</syntaxhighlight> in line 9 to get all salaries, which we then sum up lazy to a <syntaxhighlight lang=\"haskell\" enclose=\"none\">Double</syntaxhighlight> value and return in line 10. That is, salaries are fetched one by one from the database.\nWe can now use the open connection to total all salaries:\n<syntaxhighlight lang=\"haskell\" source=\"hdbc/Main.hs\">\nlet cName = \"meganalysis\" \noldTotal <- total conn cName\n</syntaxhighlight>\nFunctionality to cut all salaries uses an UPDATE statement instead of SELECT (see [this!!Cut.hs] for details).", "languages": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "SQL"}], "headline": "[[Database programming]] in [[Language:Haskell]] with [[Technology:HDBC]]", "architecture": "[this!!Company.sql] and [this!!Meganalysis.sql] provide SQL-scripts to create and populate company tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using SQL statements. [this!!Main.hs] collects test scenarios for totaling and cutting.", "usage": "=== Setup ===\n\nWe need a local database server.\nIn the following we explain the steps for XAMPP <cite>xampp</cite>.\nWe also need an SQL tool to create and populate tables.\nIn the following we explain the steps for the MySQL Workbench <cite>mysqlworkbench</cite>.\n\n* Download and install XAMPP.\n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"Mysql\".\n* A local MySQL Server is now running:\n** '''Server Host''': localhost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n** '''Port''': 3306\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n** '''Username''': root\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n** '''Password''': (empty password) \n* Connect to the database in MySQL Workbench.\n* Select the \"101companies\" schema or create it.\n* Create company tables: Run the SQL script [this!!Company.sql].\n* Populate company tables: Run the SQL script [this!!Meganalysis.sql].\n\n=== Testing ===\n\n* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "HDBC"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "GHCi"}, {"type": "Technology", "name": "ODBC"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "database_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HDBC"}, {"type": "Technology", "name": "HDBC"}, {"type": "Concept", "name": "database"}, {"type": "Language", "name": "SQL"}, {"type": "Concept", "name": "Prepared_statement"}, {"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "ODBC"}, {"type": "Concept", "name": "DBMS"}, {"type": "Implementation", "name": "haskellDB"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Persistence"}]}, "wp7": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "We show\n\n* 1. Usage of MVC for developing UI.\n* 2. Declarative data binding using XAML (xml-based language), essentially different supported types (One-Way and Two-Way) of binding.\n* 3. Reactive programming model, where the model (in terms of MVC architecture) exposes observable properties.", "name": "wp7", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:wp7", "headline_links": [], "architecture_links": [], "illustration": "* Properties support notification\n* XAML binding\n* Navigation between views", "languages": [{"type": "Language", "name": "CSharp"}], "headline": "A basic Windows Phone 7 implementation", "architecture": "Every entity has a view represented as XAML file with the UI layout and data binding.\n\nThe project also references the company's model created as a Silverlight class library. This is necessary because WP7 projects can't reference regular C# projects -- Silverlight runtime used in WP7 projects is a more limited version of the CLR.", "usage": "In order to run the application Windows Phone 7 tools for Visual Studio 2010 have to be installed. At the time of writing this README, [http://www.microsoft.com/download/en/details.aspx?id=23854 January 2011 Update] is the most recent version.\n\n[[Technology:Visual Studio]] 2010 should be used to open a project file.\n\nThe project should be compiled as a regular VS project and deployed into an emulator by clicking the right mouse button on the project file in VS and selecting \"deploy\" menu item. WP7 emulator will be started automatically with an application deployed.", "technologies": [{"type": "Technology", "name": "cscADOTexe"}, {"type": "Technology", "name": "ADOTNET"}, {"type": "Technology", "name": "Silverlight"}, {"type": "Technology", "name": "Visual_Studio"}, {"type": "Technology", "name": "WP7_SDK"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Exploration"}]}, "zend": {"usage_links": [{"type": "Technology", "name": "MySQL"}, {"type": "Technology", "name": "XAMPP"}, {"type": "Implementation", "name": "mySql"}, {"type": "Technology", "name": "XAMPP"}, {"type": "Implementation", "name": "mySql"}, {"type": "Page", "name": "Web_browser"}, {"type": "Page", "name": "101implementation"}, {"type": "Technology", "name": "NetBeans"}, {"type": "Page", "name": "IDE"}, {"type": "Page", "name": "Web_application"}], "motivation": "[[Language:PHP]] is one of the most commonly used [[:Category:Language|languages]] for [[web programming]]. To get a more structured and valuable [[:Category:101implementation|implementation]], it is reasonable to choose a PHP based [[:Category:web-application framework]]. The [[Technology:Zend framework]] provides a good infrastructure and a large amount of pre-assembled components and supports form-based web development. The use of PHP suggests an [[Language:SQL]] [[:Category:DBMS]] like [[Technology:MySQL]], to allow persistence. The connection to the DBMS is provided by the database adapter included in the Zend framework.", "name": "zend", "illustration_links": [{"type": "Page", "name": "Mapping"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "GUI"}, {"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Feature", "name": "Persistence"}, {"type": "Technology", "name": "MySQL"}, {"type": "Page", "name": "DBMS"}, {"type": "Implementation", "name": "mySql"}, {"type": "Page", "name": "Class"}, {"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "MVC"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "PHP"}, {"type": "Technology", "name": "Zend_framework"}, {"type": "Language", "name": "HTML"}], "url": "http://101companies.org/index.php/101implementation:zend", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "PHP"}, {"type": "Technology", "name": "Zend_framework"}], "architecture_links": [{"type": "Language", "name": "CSS"}, {"type": "Concept", "name": "MVC"}, {"type": "Page", "name": "framework"}], "illustration": "This section is divided into three parts. The first part describes the [[:Category:Mapping|mapping]] of the entities, the second part describes the implementation of [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] and the third part describes the development of the [[GUI]].\n\n=== [[Object/Relational mapping]] ===\n\n[[101feature:Persistence]] is provided by a [[Technology:MySQL]] [[:Category:DBMS]] (see [[101implementation:mySql]]) and the ''zend adapter'' for this specific database. The adapter is generated automatically according to the corresponding entries in the file [this!!application/configs/application.ini application.ini]:\n\n<syntaxhighlight lang=\"php\">\nresources.db.adapter = \"PDO_MYSQL\"\nresources.db.params.host = \"localhost\"\nresources.db.params.username = \"root\"\nresources.db.params.password = \"\"\nresources.db.params.dbname = \"test\"\n</syntaxhighlight>\nThe entities of the company are mapped by specific [[:Category:Class|classes]], which are extended by the class ''Zend_Db_Table_Abstract''.  They create simple associative arrays out of the declared tables. If we assume, that associative arrays are objects, we can call this process [[Object/Relational mapping]]. To map a table, it is only necessary to specify the name of the designated table within the corresponding class. The class <syntaxhighlight lang=\"php\" enclose=\"none\">Application_Model_DbTable_Employee</syntaxhighlight> in [this!!zend/application/models/DbTable/Employee.php Employee.php] illustrates the mapping of the employee table:\n\n<syntaxhighlight lang=\"php\" source=\"zend/application/models/DbTable/Employee.php\">\nclass Application_Model_DbTable_Employee extends Zend_Db_Table_Abstract\n{\n\n    protected $_name = 'employee';\n\n    ...\n\n}\n</syntaxhighlight>\n=== Feature implementation ===\n\nThe features [[101feature:Type-driven query|total]] and [[101feature:Type-driven transformation|cut]] are both implemented in the model [this!!application/models/DbTable/Employee.php Employee.php] in the sense of [[MVC]]. The reason is, that these methods affect only employees, depend on the corresponding company or department. The following example shows the calculation of the [[101feature:Type-driven query|total]] value for a company with a given ''$id''.\n\n<syntaxhighlight lang=\"php\" source=\"zend/application/models/DbTable/Employee.php\">\nclass Application_Model_DbTable_Employee extends Zend_Db_Table_Abstract\n{\n\n    ...\n\n    public function getTotalForCompany($id) {\n        // cast the id to integer\n        $id = (int)$id;\n        // get all employees from the database\n        // - with the given company cid\n        // - as an array composed of associative arrays for each employee\n        $rows = $this->fetchAll('cid = ' . $id);\n\n        $total = 0;\n\n        // walk through the array and add every salary\n        foreach ($rows as $row) {\n            $total += $row->salary;\n        }\n        return $total;\n    }\n\n}\n</syntaxhighlight>\n=== GUI ===\n\nIt is possible to create the GUI using a native [[Language:HTML]]-[[Language:PHP]] web page. The other way is to create simple forms by using the extension <syntaxhighlight lang=\"php\" enclose=\"none\">Zend_Form</syntaxhighlight>. [[Technology:Zend framework]] offers a great support for form based websites. That means, that it is possible to generate forms with almost no [[Language:HTML]] code, because the web-application framework automatically generates the website out of the pre-defined PHP objects. The objects are initialized and added to the specific form in a developer-defined order. The following example shows the company form. The different GUI components are explained in the comments:\n\n<syntaxhighlight lang=\"php\" source=\"zend/application/forms/Company.php\">\nclass Application_Form_Company extends Zend_Form\n{\n    var $departmentList;\n    \n    public function init()\n    {\n        \n        // The field helps to identify the form within the application.\n        $this->setName('company');\n        \n        // The hidden field keeps the company id for further use.\n        $id = new Zend_Form_Element_Hidden('id');\n        $id->addFilter('Int');\n\n        // The name field contains the name of the company.\n        $name = new Zend_Form_Element_Text('name');\n        $name ->setLabel('Name')\n                ->setRequired(true)\n                ->addFilter('StripTags')\n                ->addFilter('StringTrim')\n                ->addValidator('NotEmpty');\n        \n        // The button invokes the function to save a new name.\n        $submit = new Zend_Form_Element_Submit('save');\n        $submit ->setAttrib('id', 'submitbutton')\n                ->setOptions(array('class' => 'button'));\n        \n        // The following list shows all subdepartments of the company.\n        $this->departmentList = new Zend_Form_Element_Select('departments');\n        $this->departmentList ->setLabel('Departments');\n        $this->departmentList->setRegisterInArrayValidator(false);\n        \n        // The button is pressed to select a department out of the list.\n        $select = new Zend_Form_Element_Submit('select');\n        $select ->setAttrib('id', 'submitbutton');\n        \n        // The textfield shows the total value.\n        $total = new Zend_Form_Element_Text('total', array(\"readonly\" => \"readonly\"));\n        $total  ->setLabel('Total');\n        \n        // The button is used to cut the company.\n        $cut = new Zend_Form_Element_Submit('cut');\n        $cut->setAttrib('id', 'submitbutton');\n\n        // There is a block created in the GUI for each array added in the following way:\n        $this->addElements(array($id, $name, $submit));\n        $this->addElements(array($this->departmentList, $select));\n        $this->addElements(array($total, $cut));\n    }\n    ...\n}\n</syntaxhighlight>\nIf the controller wants to fill in some data into the total (<syntaxhighlight lang=\"php\" enclose=\"none\">$total</syntaxhighlight>) field, it must call the method <syntaxhighlight lang=\"php\" enclose=\"none\">populate</syntaxhighlight> of the previously initialized form. If the array parameter of the method contains a field <syntaxhighlight lang=\"php\" enclose=\"none\">total</syntaxhighlight>, the textfield with the identifier \"total\" is filled automatically with the value contained in the array:\n\n<syntaxhighlight lang=\"php\" source=\"zend/application/forms/Company.php\">\n...\n\n$c = $company->getCompany($id);\n$c[total] = $employee->getTotalForCompany($id);\n\n$form->populate($c);\n\n...\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "PHP"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Web programming]] in [[Language:PHP]] with the [[Technology:Zend framework]]", "architecture": "* The entry point for the application is the generated [this!!zend/public/index.php index.php] in the [this!!zend/public] folder. This folder contains the [[Language:CSS|style sheets]], too.\n* All relevant code for the functionality is located in the [this!!zend/application] folder.\n* The architecture is strictly based on the [[MVC]]-pattern. There are different folders for the models ([this!!zend/application/models]), the views ([this!!zend/application/views]) and the controllers ([this!!zend/application/controllers]). This is required, because the [[:Category:framework]] automatically identifies the classes and its concerns with the help of these namespaces.\n* The forms are located in the [this!!zend/application/forms] folder.", "usage": "This project needs a running [[Technology:MySQL]]-database. We recommend [[Technology:XAMPP]].\nYou can use the ''company.sql'' and ''sampleCompany.sql'' of [[101implementation:mySql]] for this project.\n\n* Download and install [[Technology:XAMPP]].\n* Open the \"XAMPP Control Panel\" and start \"Apache\" and \"MySQL\".\n* Use the guideline of [[101implementation:mySql]] up to \"Populate tables...\".\n\nAfter the database has started:\n\n* Download the sources.\n* Copy the complete zend folder to the htdocs-directory of your XAMPP-installation.\n* Start your [[:Category:Web browser]] and go to http://localhost/zend/public/.\n\nIf you want to continue with the development of this [[:Category:101implementation]], please download [[Technology:NetBeans]] and import the project into the [[:Category:IDE]].\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "Zend_framework"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "PHP"}, {"type": "Page", "name": "Language"}, {"type": "Concept", "name": "web_programming"}, {"type": "Page", "name": "101implementation"}, {"type": "Page", "name": "webADASHapplication_framework"}, {"type": "Technology", "name": "Zend_framework"}, {"type": "Language", "name": "SQL"}, {"type": "Page", "name": "DBMS"}, {"type": "Technology", "name": "MySQL"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "groovyDataFlowVariables": {"usage_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "GroovyADASHEclipse"}, {"type": "Technology", "name": "JUnit"}], "motivation": "[[Language:Groovy|Groovy]] is one of the most well-known [[JVM languages]]. \nOne of its strength lies in the [[Technology:GPars|GPars]] [[Category:Framework|framework]], \nwhich offers many different approaches to [[parallel programming]]. An \ninteresting concept is the [[concurrency]] based on [[data flow]]. The overall \nidea is the creation of a temporal order between processes, seeing the availability \nof certain values as [[constraints]]. This project demonstrates the usage of \nthis [[data flow]] [[concurrency]] in [[Language:Groovy|Groovy]] using [[data flow variables]].", "name": "groovyDataFlowVariables", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Concept", "name": "thread"}, {"type": "Concept", "name": "Closure"}, {"type": "Concept", "name": "thread"}, {"type": "Concept", "name": "data_flow_variables"}, {"type": "Concept", "name": "wait"}, {"type": "Concept", "name": "notify_all"}, {"type": "Technology", "name": "GPars"}, {"type": "Concept", "name": "container"}, {"type": "Concept", "name": "bean"}, {"type": "Concept", "name": "data_flow_variables"}, {"type": "Concept", "name": "Lazy_Evaluation"}, {"type": "Concept", "name": "bean"}], "url": "http://101companies.org/index.php/101implementation:groovyDataFlowVariables", "headline_links": [{"type": "Language", "name": "Groovy"}, {"type": "Concept", "name": "data_flow_variables"}], "architecture_links": [], "illustration": "Queries like [[101feature:Type-driven query|Total]] depends on different values (e.g. \nthe [[101feature:Type-driven query|total]] of each department). Because these subqueries \nare independent from each other they can be executed in parallel.\n\nIn general, all subcomputations are outsourced in a new [[thread]]. Therefore, \nthese computations are encapsulated into [[Closure|closures]] and transfered \nto the ''task'' method. If such a [[thread]] needs a value of a [[data flow variables|data flow variable]], \nwhich is not bound (i.e. computed) yet, it is [[wait|suspended]] until its [[notify all|awoken]] \nby the system. For compact programing [[Technology:GPars|GPars]] offers a \n[[container]] like [[bean]], which properties are [[data flow variables]]. \nThese variables are initialized [[Lazy Evaluation|lazily]] the first time they are accessed. \nAn example for such a [[bean]] is ''totals''.\n\n <nowiki>\n// outsourcing total computation for each the department\ndepts.each() { d ->\n    task {\n    // adding dept's total as dataflow variable to the bean\n        totals.putAt d.name, d.total()\n    }\n}\n</nowiki>", "languages": [{"type": "Language", "name": "Groovy"}], "headline": "A [[Language:Groovy|Groovy]]-based implementation that uses [[data flow variables]]", "architecture": "* ''Company.groovy'' everything related to a company\n* ''Department.groovy'' everything related to a department\n* ''Employee.groovy'' everything related to an employee\n* ''Basic.groovy'' basic functionality tests with a sample company", "usage": "You need to install the [[Technology:Eclipse|Eclipse]] plugin [[Technology:Groovy-Eclipse|Groovy-Eclipse]].\nUpdate Site: [http://dist.springsource.org/release/GRECLIPSE/e3.7/]\n\nThen open ''Basic.groovy'' and start the [[Technology:JUnit|JUnit]] test case you like.", "technologies": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "GroovyADASHEclipse"}, {"type": "Technology", "name": "GPars"}, {"type": "Technology", "name": "JUnit"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "Groovy"}, {"type": "Concept", "name": "JVM_languages"}, {"type": "Technology", "name": "GPars"}, {"type": "Page", "name": "Framework"}, {"type": "Concept", "name": "parallel_programming"}, {"type": "Concept", "name": "concurrency"}, {"type": "Concept", "name": "data_flow"}, {"type": "Concept", "name": "constraints"}, {"type": "Concept", "name": "data_flow"}, {"type": "Concept", "name": "concurrency"}, {"type": "Language", "name": "Groovy"}, {"type": "Concept", "name": "data_flow_variables"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "clojureRefs": {"usage_links": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "CounterClockwise"}], "motivation": "[[Language:Clojure|Clojure]] provides a number of interesting approaches to \nthe development with [[concurrency]]. One of these approaches is the use of \nprogrammable [[transactions]], analogous to [[database]] [[transactions]]. \nThis functionality is implemented by means of transaction-specific functions \nand references. To maintain a consistent memory state, \n[[Language:Clojure|Clojure]] relies on a [[Technology:STM|STM]]. This project \nis based on the implementation [[101implementation:clojure]] and changes it \nso that [[Refs]] and [[transactions]] are used.", "name": "clojureRefs", "illustration_links": [{"type": "Concept", "name": "Refs"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "transaction"}, {"type": "Language", "name": "Clojure"}, {"type": "Concept", "name": "Refs"}], "url": "http://101companies.org/index.php/101implementation:clojureRefs", "headline_links": [{"type": "Language", "name": "Clojure"}, {"type": "Concept", "name": "Refs"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Concept", "name": "Refs"}, {"type": "Feature", "name": "Tree_structure"}], "illustration": "Changes to [[Refs]] by a transformation like [[101feature:Type-driven transformation|Cut]] have to be\nencapsulated into a [[transaction]]. In [[Language:Clojure|Clojure]] the \nfunction ''dosync'' starts such a transaction allowing to alter [[Refs]] by \nan update function. \n\n <nowiki>\n(defn cutCompany [c]\n    (dosync\n        ;; alter ref function\n        (alter c #(update-in % [:depts] (partial map cutDept))))\n    ;; returning changed ref\n    c)\n</nowiki>", "languages": [{"type": "Language", "name": "Clojure"}], "headline": "A [[Language:Clojure|Clojure]]-based implementation that uses [[Refs|transactional references]]", "architecture": "* ''company.clj'' definitions of the companies structure using clojure's defrecord\n* ''scenarios.clj'' functionalities: [[101feature:Type-driven transformation|Cut]], [[101feature:Type-driven query|Total]]\n* ''meganalysis.clj'' a sample company (i.e. a [[Refs|Ref]] to a [[101feature:Tree structure|company]])", "usage": "You need to install the [[Technology:Eclipse|Eclipse]] plugin [[Technology:CounterClockwise|CounterClockwise]]. \nUpdate Site: [http://ccw.cgrand.net/updatesite]\n\nThen open ''meganalysis.clj'', hit \"run\" and excute the function you like:\n* ''(totalCompany meganalysis)'' \n* ''(cutCompany meganalysis)''", "technologies": [{"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "CounterClockwise"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "Clojure"}, {"type": "Concept", "name": "concurrency"}, {"type": "Concept", "name": "transactions"}, {"type": "Concept", "name": "database"}, {"type": "Concept", "name": "transactions"}, {"type": "Language", "name": "Clojure"}, {"type": "Technology", "name": "STM"}, {"type": "Implementation", "name": "clojure"}, {"type": "Concept", "name": "Refs"}, {"type": "Concept", "name": "transactions"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Task_parallelism"}]}, "sax": {"usage_links": [], "motivation": "[[:Category:XML processing]]", "name": "sax", "url": "http://101companies.org/index.php/101implementation:sax", "headline_links": [{"type": "Concept", "name": "pushADASHbased_XML_parsing"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "SAX"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Tree_structure"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "Java"}], "headline": "[[push-based XML parsing]] in [[Language:Java]] with [[Technology:SAX]] ", "architecture": "Package ''org.softlang.operations'' hosts implementations of the operations\n[[101feature:Type-driven query]] and [[101feature:Type-driven transformation]]. These operations are implemented\nby SAX handlers; output XML is written with XMLStreamWriter. [[101feature:Tree structure]] \nis implemented by the XML schema Company.xsd. The schema is not needed for the \nbasic operations, but one can perform XML validation with regard to the schema; \nsee the JUnit tests. Package ''org.softlang.sax'' hosts some boilerplate code\nfor SAX: it covers basic functionality for parsing, tracing, and validation.\nPackage ''org.softlang.tests'' hosts various JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.\n** Run class ''Trace'' with JUnit to see the trace of parsing a file with SAX.\n** Run class ''Validate'' with JUnit to validate all XML files against the schema for companies.", "technologies": [{"type": "Technology", "name": "SAX"}, {"type": "Technology", "name": "XMLStreamWriter"}, {"type": "Technology", "name": "JAXP"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "XML_processing"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "cobol": {"usage_links": [], "motivation": "Cobol is a language that readily comes with means of data modeling and\nstorage (persistence). Hence, it provides a good fit for the basic features\nand persistence.", "name": "cobol", "url": "http://101companies.org/index.php/101implementation:cobol", "headline_links": [{"type": "Language", "name": "Cobol"}], "architecture_links": [], "languages": [{"type": "Language", "name": "Cobol_85"}], "headline": "a simple implementation in [[Language:Cobol]]", "architecture": "Directory hierarchy:\n* ''programs'': main Cobol programs for sample data and features\n* ''copybooks'': copybooks reused across the different programs\n* ''data'': location for keyed files\n* ''baselines'': baselines for automated test; see below", "issues_links": [], "usage": "There is a ''Makefile'' that exercises all features in some scripted order.\nAll programs are compiled with the OpenCobol compiler and executed with \nits runtime.", "technologies": [{"type": "Technology", "name": "OpenCOBOL"}], "type": "Implementation", "motivation_links": [], "issues": "It would be interesting to provide a Cobol-like user interface.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Persistence"}]}, "webDSL": {"usage_links": [{"type": "Technology", "name": "Apache_Tomcat"}, {"type": "Page", "name": "Web_application"}], "motivation": "We define pages (company/department/employee view) using the [http://webdsl.org WebDSL] DSL. \nWe also provide a metamodel for companies and scenerios to [[101feature:Type-driven transformation|cut]] and [[101feature:Type-driven query|total]] salaries. \n\n=== Architecture of the project ===\n\n\"webDSL.app\" is the \"main file\", containing the page definitions.\n\"company.app\" holds the company model while meganalysis.app contains \"meganalysis\" as an instance of the model.", "name": "webDSL", "url": "http://101companies.org/index.php/101implementation:webDSL", "headline_links": [], "languages": [{"type": "Language", "name": "JavaScript"}], "headline": "this projects provides a very simple WebDSL WebApp for companies", "usage": "We make use of the WebDSL Plugin. Update Site: http://webdsl.org/page/Download\n\n* Build the project by running the Ant Build file\n* Select the project in the package explorer -> right click -> Run As -> Run on Server\n* Select your preferred server (we made use of [[Technology:Apache Tomcat]] v6.0 Server) and click \"Next\"\n* Click \"Download and Install\" and follow the menu's steps\n* Click \"Finish\"\n* The project will be published on the installed server\n* Visit http://localhost:8080/webDSL/ \n(Eventually you will have to re-build or restart the server)\n\n[[Category:Web application]]", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Distribution"}]}, "prologSyb": {"motivation": "TBD", "name": "prologSyb", "url": "http://101companies.org/index.php/101implementation:prologSyb", "headline_links": [], "languages": [], "headline": "Prolog-based implementation with SYB support", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "jsPrototyping": {"motivation": "", "name": "jsPrototyping", "url": "http://101companies.org/index.php/101implementation:jsPrototyping", "headline_links": [{"type": "Language", "name": "JavaScript"}, {"type": "Concept", "name": "Prototyping"}], "languages": [], "headline": "implementation in [[Language:JavaScript]] using [[Prototyping|prototyping]]", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "parsec": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[parsing]] in [[Language:Haskell]] with the [[Technology:Parsec]] [[library]] of [[parser combinator]]s. A concrete textual syntax for companies is assumed; the parser maps text to values of straightforward [[algebraic data type]] for companies. (These are essentially the same data types as in the most basic style of functional programming; see [[101implementation:haskell]].) The implementation is said to cover [[101feature:Data import]] because the concrete textual syntax enables data import as other software applications may easily adhere to this syntax as well. The parser is a family of Haskell functions with one function per nonterminal of the context-free syntax. There are basic parsers for names, addresses, and salaries. The parsers for companies, departments, and employees are composed by means of appropriate parser combinators for sequence, alternative, and option.  As a side effect, [[applicative functor]]s and functor combinators, as provided by Haskell's module ''Control.Applicative'', are exercised as well.", "name": "parsec", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:parsec", "headline_links": [{"type": "Concept", "name": "Parsing"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "Parsec"}], "architecture_links": [], "illustration": "=== Parser type ===\n\nWe define a type alias of all parsers that are defined in this implementation:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Parser.hs\" line>\ntype P = Parsec String ()\n</syntaxhighlight>\nThat is, we are dealing with parsers of stream type <syntaxhighlight lang=\"haskell\" enclose=\"none\">String</syntaxhighlight> and state type <syntaxhighlight lang=\"haskell\" enclose=\"none\">()</syntaxhighlight> (no state). The return type of running such a parser is explained further below.\n\n=== Primitive parsers ===\n\nIn order to build the company parser we first need some primitive parsers.\nFor parsing a given <syntaxhighlight lang=\"haskell\" enclose=\"none\">String</syntaxhighlight> value we define:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Parser.hs\" line>\npString :: String -> P String\npString s = string s <* spaces\n</syntaxhighlight>\nThis parser also consumes trailing spaces.\nWe also need a parser for literals. <syntaxhighlight lang=\"haskell\" enclose=\"none\">pLit</syntaxhighlight> parses a quoted string:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Parser.hs\" line>\npLit :: P String\npLit = string \"\\\"\" *> many (noneOf \"\\\"\") <* string \"\\\"\" <* spaces\n</syntaxhighlight>\n=== Parsing a department ===\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Parser.hs\" line>\npDepartment :: P Department\npDepartment = Department\n  <$  pString \"department\" <*> pLit \n  <*  pString \"{\" <*> pEmployee \"manager\"\n  <*> many pSubUnit <* pString \"}\"\n</syntaxhighlight>\nWe make use of the <syntaxhighlight lang=\"haskell\" enclose=\"none\">(<$) :: Functor f => a -> f b -> f a </syntaxhighlight> operator in line 3. That is, we pass the department constructor <syntaxhighlight lang=\"haskell\" enclose=\"none\">Department</syntaxhighlight> and a parser for all constructor parameters (for name, manager and for the list of subunits) to receive a parser for departments. \nIn line 3 we parse the keyword for department declaration \"department\". In the next line we parse the department name, followed by an opening curly bracket. We compose a parser for the department's manager using the employee parser <syntaxhighlight lang=\"haskell\" enclose=\"none\">pEmployee</syntaxhighlight>, which should use \"manager\" as the keyword. In the last line <syntaxhighlight lang=\"haskell\" enclose=\"none\">many :: f a -> f [a]</syntaxhighlight> is used to parse the list of subunits using <syntaxhighlight lang=\"haskell\" enclose=\"none\">pSubUnit</syntaxhighlight> as the parser for each subunits. Finally, we define that we expect a closing curly bracket at the end of a department declaration.\n\n=== Running the Parser ===\n\nRunning the company parser is realized by making use of <syntaxhighlight lang=\"haskell\" enclose=\"none\">runP</syntaxhighlight>:\n<syntaxhighlight lang=\"haskell\">\nrunP :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a\n</syntaxhighlight>\nWe illustrated above that we use parsers of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Parsec String ()</syntaxhighlight>, which on the top level parse values of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">Company</syntaxhighlight>. Therefore we can simplify the type signature: \n<syntaxhighlight lang=\"haskell\">\nParsec String () Company -> () -> SourceName -> String -> Either ParseError a\n</syntaxhighlight>\nWhen we choose <syntaxhighlight lang=\"haskell\" enclose=\"none\">\"input\"</syntaxhighlight> as the source name we can define a function to run the company parser:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Parser.hs\" line>\nparseCompany :: String -> Either ParseError Company\nparseCompany = runP (spaces *> pCompany <* eof) () \n               \"input\"\n</syntaxhighlight>\nWe added a parser for possible leading spaces and a parser for the EOF-symbol.\n\n=== Executing the Parser ===\n\nIn [this!!Main.hs] we execute the company parser:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Main.hs\" line>\nparsedCompany <- liftM parseCompany $ \n                 readFile \"sample.Company\"\n</syntaxhighlight>\nThe variable <syntaxhighlight lang=\"haskell\" enclose=\"none\">parsedCompany</syntaxhighlight> either holds a <syntaxhighlight lang=\"haskell\" enclose=\"none\">ParseError</syntaxhighlight> value or a parsed company. \nWe define a function for printing, which handles both cases:\n\n<syntaxhighlight lang=\"haskell\" source=\"haskellParser/Main.hs\" line>\neitherPrint :: Show a => Either ParseError Company -> (Company -> a) -> IO ()\neitherPrint (Right c) f = print $ f c\neitherPrint (Left e) _ = print e\n</syntaxhighlight>\nIn case parsing was successful this function applies a given function to the company and prints the result. In case of a parse error, it prints the error message.\nWe can use this function to print the total salary of <syntaxhighlight lang=\"haskell\" enclose=\"none\">parsedCompany</syntaxhighlight> in case of parsing success:\n\n<syntaxhighlight lang=\"haskell\" line>\neitherPrint parsedCompany total\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Parsing]] in [[Language:Haskell]] with [[Technology:Parsec]] ", "architecture": "[this!!Parser.hs] provides the Parsec-based parser. [this!!Company.hs] holds the algebraic datatype for companies, \nwhile [this!!Total.hs] and [this!!Cut.hs] provide functionality to total and cut companies. [this!!SampleCompany.hs] holds a sample company used to be compared to a parsed sample company (hosted by [this!!sample.Company]). [this!!Main.hs] collects test scenarios.", "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}, {"type": "Technology", "name": "Parsec"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "parsing"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "Parsec"}, {"type": "Concept", "name": "library"}, {"type": "Concept", "name": "parser_combinator"}, {"type": "Concept", "name": "algebraic_data_type"}, {"type": "Implementation", "name": "haskell"}, {"type": "Feature", "name": "Data_import"}, {"type": "Concept", "name": "applicative_functor"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}]}, "strutsAnnotation": {"usage_links": [{"type": "Technology", "name": "Maven"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Page", "name": "Web_server"}, {"type": "Page", "name": "Application_server"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Technology", "name": "Apache_Tomcat"}, {"type": "Technology", "name": "Maven"}, {"type": "Page", "name": "Web_server"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Page", "name": "Web_server"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Page", "name": "Web_browser"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "This [[Language:Java]] [[:Category:Web application|web application]] illustrates the use of the popular [[Technology:Struts]] technology in combination with [[Technology:JSP]] and a [[Technology:Servlet API|servlet]] based [[:Category:Web server|web server]]. It introduces the use of [[Technology:Maven]] as a good advantage for [[Language:Java]] based [[:Category:Application|applications]], as well.", "name": "strutsAnnotation", "illustration_links": [{"type": "Technology", "name": "Struts"}, {"type": "Concept", "name": "MVC"}, {"type": "Technology", "name": "JSP"}, {"type": "Language", "name": "Java"}, {"type": "Page", "name": "Class"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Page", "name": "Class"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Technology", "name": "Struts"}, {"type": "Technology", "name": "JSP"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Page", "name": "Class"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Technology", "name": "JSP"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "Method"}, {"type": "Concept", "name": "Singleton"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Implementation", "name": "javaInheritance"}, {"type": "Language", "name": "Java"}], "url": "http://101companies.org/index.php/101implementation:strutsAnnotation", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Struts"}], "architecture_links": [{"type": "Technology", "name": "JSP"}, {"type": "Language", "name": "CSS"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}, {"type": "Page", "name": "Class"}, {"type": "Language", "name": "Java"}], "illustration": "The [[Technology:Struts]] architecture is based on [[MVC]]. The view is implemented with [[Technology:JSP]], the controller is based on [[Language:Java]] ''action'' [[:Category:Class|classes]] in combination with [[Technology:Servlet API|servlets]] and the model is provided by a service [[:Category:Class|class]] and a class for each company, department and employee. The initial [[101feature:Tree structure|company]] data is stored in a [this!!src/main/resources/sampleCompany.ser serialization file] (compare [[101implementation:javaInheritance]]). We will illustrate the [[Technology:Struts]] implementation with an example of showing and cutting a company.\n\n=== View ===\n\nThe [[Technology:JSP]] [this!!src/main/webapp/WEB-INF/content/list-all-companies.jsp file] for the view of the company offers two textfields and two buttons. One of the textfields shows the name, the other one shows the [[101feature:Type-driven query|total]] value. The buttons allow the user to request for further detailed information like a department list. It also allows her to cut all salaries of the company.\n\n<syntaxhighlight lang=\"xml\" source=\"strutsAnnotation/src/main/webapp/WEB-INF/content/list-all-companies.jsp\">\n...\n\n<s:form action=\"company\">\n\n\t\t...\n\n\t\t<s:iterator value=\"allCompanies\">\n\t\t\t<tr>\n\t\t\t\t<!-- The name and total fields refer\n\t\t\t\t\tto the corresponding getters of \"Company.java\". -->\n\t\t\t\t<td><s:property value=\"name\"/></td>\n\t\t\t\t<td><s:property value=\"total\"/></td>\n\t\t\t\t<td>\n\t\t\t\t\t<!-- These lines create a link,\n\t\t\t\t\t\twhich invokes the cutSalaries-method of \"CompanyAction.java -->\n\t\t\t\t\t<s:url id=\"cutURL\" action=\"company.cutSalaries\">\n\t\t\t\t\t\t<s:param name=\"id\" value=\"%{id}\"/>\n\t\t\t\t\t</s:url>\n\t\t\t\t\t<s:a href=\"%{cutURL}\">Cut</s:a>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<!-- These lines create a link\n\t\t\t\t\t\tto the department list of the company. -->\n\t\t\t\t\t<s:url id=\"detailURL\" action=\"company.details\">\n\t\t\t\t\t\t<s:param name=\"id\" value=\"%{id}\"/>\n\t\t\t\t\t</s:url>\n\t\t\t\t\t<s:a href=\"%{detailURL}\">Detail</s:a>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</s:iterator>\n\n\t\t...\n</syntaxhighlight>\nThe iterator <syntaxhighlight lang=\"xml\" enclose=\"none\"><s:iterator ... /></syntaxhighlight> creates a table row for each company listed in the [this!!src/main/java/org/softlang/actions/ListAllCompaniesAction.java ListAllCompaniesAction.java] instance. The value <syntaxhighlight lang=\"xml\" enclose=\"none\">\"allCompanies\"</syntaxhighlight> refers to the member <syntaxhighlight lang=\"java\" enclose=\"none\">List<Company> allCompanies;</syntaxhighlight> of the [[:Category:Class|class]]. Each company within this list has a getter for its name and another for the [[101feature:Type-driven query|total]] value.\n\n=== Controller ===\n\nThe <syntaxhighlight lang=\"xml\" enclose=\"none\">action=\"company.cutSalaries\"</syntaxhighlight> of the [[101feature:Type-driven transformation|cut]] link invokes the <syntaxhighlight lang=\"java\" enclose=\"none\">cutSalaries()</syntaxhighlight> method of [this!!src/main/java/org/softlang/actions/CompanyAction.java CompanyAction.java], which is, in combination with a [[Technology:Servlet API|servlet]], a controller of the application:\n\n<syntaxhighlight lang=\"java\" source=\"strutsAnnotation/src/main/java/org/softlang/actions/CompanyAction.java\">\n@Action(value = \"company.cutSalaries\",\n\t\t\tresults = { @Result(name = \"listAllCompanies\", type=\"redirectAction\", location=\"list-all-companies\")})\npublic String cutSalaries() {\n\tcompany =  CompanyService.instance().findCompany(Long.parseLong(RequestUtil.getRequestParameter(\"id\")));\n\tcompany.cut();\n\treturn \"listAllCompanies\"; \n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"java\" enclose=\"none\">@Action(value = \"company.cutSalaries\", ...)</syntaxhighlight> maps this method to the action name ''company.cutSalaries''. Whenever this name is called within an action of the [[Technology:JSP]] files, this method is invoked. <syntaxhighlight lang=\"java\" enclose=\"none\">CompanyService.instance()</syntaxhighlight> returns the instance of the model, which returns the necessary entity for the company. This object is used to perform the companies [[101feature:Type-driven transformation|cut]] [[Method|method]]. The <syntaxhighlight lang=\"java\" enclose=\"none\">results</syntaxhighlight> parameter redirects the application to the [this!!src/main/webapp/WEB-INF/content/list-all-companies.jsp list-all-companies.jsp], which simply means, that the page is reloaded. Every result entry refers to a returned ''string'' value of the <syntaxhighlight lang=\"java\" enclose=\"none\">@Action(value = \"company.cutSalaries\", ...)</syntaxhighlight>. In this case, there is only one possible return value.\n\n=== Model ===\n\nAll data are instantiated within the [[Singleton]] [this!!/src/main/java/org/softlang/services/CompanyService.java CompanyService.java], which is considered as a major part of the model. The instance contains lists of the company, its departments and its employees. As we have seen in the controller description, the [[101feature:Type-driven transformation|cut]] method of all of these entities is invokeable. In our case, the cut method for the company simply invokes the cut method of the departments:\n\n<syntaxhighlight lang=\"java\" source=\"strutsAnnotation/src/main/java/org/softlang/basics/Company.java\">\n\tpublic void cut() {\n\t\tfor (Department d : getDepts())\n\t\t\td.cut();\n\t}\n</syntaxhighlight>\nThe lists within this [this!!/src/main/java/org/softlang/services/CompanyService.java CompanyService.java] are initialized by loading a previously serialized company. We strongly recommend to have a look on [[101implementation:javaInheritance]], to get an overview over the serialization and deserialization process in [[Language:Java]].", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Web programming]] in [[Language:Java]] with [[Technology:Struts]] configuring with annotations", "architecture": "* The [[Technology:JSP]] files for the view are located in [this!!src/main/webapp/WEB-INF/content].\n* The [this!!src/main/webapp/index.jsp index.jsp] in the [this!!src/main/webapp] folder represents the initial page, which redirects to the first ''list-all-companies.jsp''. The [this!!src/main/webapp] folder also contains the [[Language:CSS]] files for this application.\n* The [this!!src/main/resources] folder contains two necessary files. The [this!!src/main/resources/sampleCompany.ser] provides the serialized company data. The [this!!src/main/resources/struts.xml] [[Language:XML]] file defines, that the initial page of this application is the [this!!src/main/webapp/index.jsp index.jsp].\n* The main [[Language:Java]] code of the application is located in [this!!src/main/java/org/softlang]. We have four folders for the different concerns. [this!!src/main/java/org/softlang/actions] contains the actions described in the illustration section for the controller. The [this!!src/main/java/org/softlang/basics] folder contains all necessary [[:Category:Class|classes]] for the deserialized company. The [this!!src/main/java/org/softlang/services/CompanyService.java CompanyService.java] is located in the [this!!src/main/java/org/softlang/services] folder. The last folder [this!!src/main/java/org/softlang/util] contains some helpful [[Language:Java]] files for the deserialization.", "usage": "''Requirements:''\n* [[Technology:Maven]] (Version 2.x) as [[Technology:Eclipse]] plugin (http://eclipse.org/m2e/download/) or standalone (http://maven.apache.org/download.html)\n* [[:Category:Web server]] or [[:Category:Application server|application server]] based on the [[Technology:Servlet API|servlet]] technology (We recommend [[Technology:JBoss Application Server|JBoss application server]], but [[Technology:Apache Tomcat]] will also be sufficient).\n\n''Import (Eclipse only):''\nImport the strutsAnnotation implementation into eclipse as [[Technology:Maven]] project:\n* Click the \"File\"-button in the menu bar and \"Import...\".\n* Select the \"Maven\" folder and \"Existing Maven Projects\".\n* Browse to your local \"strutsAnnotation\" folder and \"Finish\".\n\n''Build:''\n* Run \"mvn clean\" and \"mvn install\" in the root directory of the struts 2 implementation or (''Eclipse only'') right click on your imported project and first click \"Run As\" -> \"Maven clean\" and second \"Run As\" -> \"Maven install\".\n* Copy the target/struts2app.war file to the web-application folder of your [[:Category:Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/server/default/deploy).\n\n''Run:''\n* Start your [[:Category:Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/bin/run.bat (Windows) or <JBossHome>/bin/run.sh (Unix)).\n* Start your [[:Category:Web browser]] and go to http://localhost:8080/struts2app.\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "Struts"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Technology", "name": "Maven"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "Java"}, {"type": "Page", "name": "Web_application"}, {"type": "Technology", "name": "Struts"}, {"type": "Technology", "name": "JSP"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Page", "name": "Web_server"}, {"type": "Technology", "name": "Maven"}, {"type": "Language", "name": "Java"}, {"type": "Page", "name": "Application"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Web_UI"}]}, "pyjamas": {"usage_links": [{"type": "Page", "name": "101implementation"}, {"type": "Page", "name": "Web_browser"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Web_browser"}], "motivation": "[[Technology:Pyjamas]] offers the possibility to generate pure [[Language:JavaScript]]-Code out of [[Language:Python]] source code. One advantage of pyjamas is, that it is very simple to understand. Apart from that, there is no need for complicated [[Language:HTML]] or JavaScript programming. [[Technology:Pyjamas]] is combined with [[Language:CSS]]. It also can be considered as a \"spin off\" of [[Technology:GWT]].", "name": "pyjamas", "illustration_links": [{"type": "Language", "name": "Python"}, {"type": "Concept", "name": "GUI"}, {"type": "Language", "name": "JavaScript"}, {"type": "Technology", "name": "Pyjamas"}, {"type": "Page", "name": "Class"}], "url": "http://101companies.org/index.php/101implementation:pyjamas", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Python"}, {"type": "Technology", "name": "Pyjamas"}], "architecture_links": [{"type": "Language", "name": "CSS"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Concept", "name": "GUI"}], "illustration": "Although pyjamas demands no specific architecture, the main parts of the application are located in a simple [[Language:Python]] file [this!!101Companies.py]. Nevertheless, we have devided the code into two concerns encapsulated into different classes. One class contains the [[GUI]], another class contains the company data and manages the major functionalities of the app. There are further classes for each company, department and employee. The complete Python code illustrated in this section is translated directly to [[Language:JavaScript]].\n\n=== GUI implementation ===\n\nThe GUI is implemented with the help of pre defined [[Technology:Pyjamas]] [[:Category:Class|classes]]. There is a grid with all necessary components like labels, textfields, listboxes and buttons. The following method of the class <syntaxhighlight lang=\"python\" enclose=\"none\">101CompaniesAppGUI</syntaxhighlight> shows the initialization of the employee part of the GUI:\n\n<syntaxhighlight lang=\"python\" source=\"pyjamas/101Companies.py\">\n# initializes the GUI for the employee view\ndef initEmployeeGUI(self):\n\tself.grid.clear()\n\tself.grid.resize(4, 3)\n\t\t\n\t# row 1\n\tself.grid.setWidget(0, 0, Label(\"Name:\"))\t# column 1 = name\n\tself.grid.setWidget(1, 0, Label(\"Address:\"))\t# column 2 = address\n\tself.grid.setWidget(2, 0, Label(\"Salary:\"))\t# column 3 = salary\n\t\n\t# row 2\n\tself.grid.setWidget(0, 1, self.name)\n\tself.grid.setWidget(1, 1, self.address)\n\tself.grid.setWidget(2, 1, self.total)\n\t\t\n\t# row 3\n\tself.grid.setWidget(0, 2, self.save)\n\tself.grid.setWidget(2, 2, self.cut)\n\tself.grid.setWidget(3, 2, self.back)\n\n\t# initialize content for current employee\n\tself.name.setText(self.current.name)\n\tself.address.setText(self.current.address)\n\tself.total.setText(self.current.salary)\n</syntaxhighlight>\nThe three textfields <syntaxhighlight lang=\"python\" enclose=\"none\">self.name</syntaxhighlight>, <syntaxhighlight lang=\"python\" enclose=\"none\">self.address</syntaxhighlight> and <syntaxhighlight lang=\"python\" enclose=\"none\">self.total</syntaxhighlight> and the buttons <syntaxhighlight lang=\"python\" enclose=\"none\">self.save</syntaxhighlight>, <syntaxhighlight lang=\"python\" enclose=\"none\">self.cut</syntaxhighlight> and <syntaxhighlight lang=\"python\" enclose=\"none\">self.back</syntaxhighlight> are initialized in the constructor of the class <syntaxhighlight lang=\"python\" enclose=\"none\">101CompaniesAppGUI</syntaxhighlight>. The <syntaxhighlight lang=\"python\" enclose=\"none\">self</syntaxhighlight> parameter represents the current instance of the class.\n\n=== Feature implementation ===\n\nThere is only one handler for each button located in the class \n<syntaxhighlight lang=\"python\" enclose=\"none\">101CompaniesAppGUI</syntaxhighlight>. The handler is implemented by the function <syntaxhighlight lang=\"python\" enclose=\"none\">onClick</syntaxhighlight>. It contains a control structure, which determines the clicked button:\n\n<syntaxhighlight lang=\"python\" source=\"pyjamas/101Companies.py\">\ndef onClick(self, sender):\n\tself.errors.clear()\n\tif sender == self.cut:\n\t\tself.current.cut()\n\t\tself.total.setText(self.current.total())\n\telse if sender == ...\n</syntaxhighlight>\nIn case of cut, this method cuts the current entity and refreshes the the total textfield. Every class, be it the company, department or employee, implements such a cut method. In case of employee, the specific implementation looks like:\n\n<syntaxhighlight lang=\"python\" source=\"pyjamas/101Companies.py\">\nclass Employee:\n\t...\n\n\tdef cut(self):\n\tself.salary = self.salary / 2\n\n\t...\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Python"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "HTML"}], "headline": "[[Web programming]] in [[Language:Python]] with [[Technology:Pyjamas]]", "architecture": "There are three files, which are not generated:\n* The file [this!!101Companies.py] contains the main functionalities of the application.\n* [this!!public/101Companies.html] is the index page for the application.\n* [this!!public/style.css] defines the [[Language:CSS]] attributes for the elements.\n\nThe file [this!!101Companies.py 101Companies.py] is divided into three parts:\n* The [[101feature:Tree structure|company structure]] and most of the [[101feature:Attribute editing|attribute editing]] is provided by the classes ''company'', ''department'' and ''employee''.\n* The [[GUI]] is provided by the class ''101CompaniesAppGUI''.\n* The company initialization and the low-level management of the departments and employees is provided by the class ''101CompaniesApp''.", "usage": "* install pyjamas ([http://pyjs.org/wiki/GettingStarted/ getting started])\n* download the sources\n* open a terminal and move to your local pyjamas [[:Category:101implementation|implementation]]-folder\n* type ''pyjsbuild 101companies.py''\n* open [this!!output/101Companies.html] with your [[:Category:Web browser]]\n\nIf you only want to watch the [[Language:HTML]]/[[Language:JavaScript|javaScript]]-result of the compile process, please:\n\n* download the sources\n* open [this!!output/101Companies.html] with your [[:Category:Web browser]]", "technologies": [{"type": "Technology", "name": "Pyjamas"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "Pyjamas"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "Python"}, {"type": "Language", "name": "HTML"}, {"type": "Technology", "name": "Pyjamas"}, {"type": "Language", "name": "CSS"}, {"type": "Technology", "name": "GWT"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "javaLexer": {"usage_links": [], "motivation": "A simple custom-made lexer is used to process a text-based representation of companies.\nThe lexer uses a lookahead of 1.\nThe lexer reports all tokens including whitespace.\nSuch processing implements [[101feature:Data import]].\n[[101feature:Type-driven query]] is implemented by means of finding token sequences \nconsisting of keyword \"salary\" followed by a number while ignoring whitespace\nin between. (Just looking for a number would be sufficient for the situation at hand\nbecause numbers are used for salaries only, but the extra test makes the\npoint that ad hoc tests may be needed when lexers are used for data processing.)\n[[101feature:Type-driven transformation]] copies lexemes to an output stream while\nmodifying salaries. The lexemes for whitespace token transport layout from \ninput to output. Such processing implements [[101feature:Data export]].", "name": "javaLexer", "url": "http://101companies.org/index.php/101implementation:javaLexer", "headline_links": [{"type": "Page", "name": "lexer"}, {"type": "Language", "name": "Java"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "[[:Category:lexer]]-based text processing in [[Language:Java]]", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.\n** Run class ''Noop'' with JUnit to exercise positive and negative test cases for the lexer.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_export"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "html5XMLHttpRequest": {"usage_links": [{"type": "Language", "name": "HTML5"}, {"type": "Page", "name": "Web_application"}], "motivation": "This implementation provides simple [[:Category:Server|server]] side [[Language:XML]] based data storage. Therefor, it introduces [[Technology:XMLHttpRequest]] in a very simple way of use. This helps to understand the [[Asynchronous communication|asynchronous]] mechanisms of the XMLHttpRequest [[:Category:API]]. In order to keep it simple, there is no greater [[Ajax]] support in this implementation. If you want to see an Ajax based implementation, please visit [[101implementation:html5ajax]].", "name": "html5XMLHttpRequest", "illustration_links": [{"type": "Language", "name": "XML"}, {"type": "Technology", "name": "DOM"}, {"type": "Page", "name": "Web_application"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Implementation", "name": "html5local"}, {"type": "Concept", "name": "GUI"}, {"type": "Language", "name": "XML"}, {"type": "Concept", "name": "Asynchronous_communication"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Technology", "name": "DOM"}, {"type": "Language", "name": "PHP"}, {"type": "Page", "name": "Server"}, {"type": "Language", "name": "PHP"}], "url": "http://101companies.org/index.php/101implementation:html5XMLHttpRequest", "headline_links": [{"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Language", "name": "HTML5"}], "architecture_links": [{"type": "Concept", "name": "MVC"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "XML"}], "illustration": "This section illustrates, how the data moves from an [[Language:XML]] file to a [[Technology:DOM]] based [[:Category:Web application]] and back. The first section shows the structure of the initial XML file, the second part shows the load mechanism with [[Technology:XMLHttpRequest]], the third part shows some data manipulation according to the [[101feature:Type-driven transformation]] and the last part shows the save mechanism with XMLHttpRequest. Please visit [[101implementation:html5local]] for the aspect of [[GUI]] generation.\n\n=== [[Language:XML]] document structure ===\n\nThe [this!!company.xml] file represents the company. It models the company structure in typical XML manner: Each entity is represented by a node, at which its parameters or appended entities are represented by subnodes. Each department and employee contains an aditional parameter node for the ''id''.\n\n<syntaxhighlight lang=\"xml\" source=\"html5XMLHttpRequest/company.xml\">\n<Company>\n\t<name>Meganalysis</name>\n\t<departments>\n\n\t\t...\n\n\t</departments>\n</company>\n</syntaxhighlight>\nThis example shows the <syntaxhighlight lang=\"xml\" enclose=\"none\">company</syntaxhighlight> node with the two subnodes <syntaxhighlight lang=\"xml\" enclose=\"none\">name</syntaxhighlight> and <syntaxhighlight lang=\"xml\" enclose=\"none\">departments</syntaxhighlight>. The <syntaxhighlight lang=\"xml\" enclose=\"none\">departments</syntaxhighlight> node contains all direct subdepartments of the company as a single subnode.\n\n=== Load company ===\n\nWe are able to access this [this!!company.xml] file by using a simple XMLHttpRequest. The request itself needs three informations:\n\n* The request method is ''GET'', because we only want to load the file,\n* the filename is ''company.xml'',\n* and we want to perform an [[Asynchronous communication|asynchronous]] request, announced by the last boolean parameter ''true''.\n\n<syntaxhighlight lang=\"javascript\" source=\"html5XMLHttpRequest/company.js\">\ncompany.loadData = function() {\n\n\tvar xhr = new XMLHttpRequest();\n\t\n\t// This statement creates a new request with the parameters:\n\t// - \"GET\": only load\n\t// - \"company.xml\": filename of the requested xml doc\n\t// - \"true\": asynchronous request\n\txhr.open('GET', 'company.xml', true);\n\n\t// This method is triggered after the response reaches the client.\n\txhr.onload = function(e) {\n\t\tif (this.status == 200) {\n\t\t\t// This line guarantess, that the result has xml format.\n\t\t\tcompany.response = xhr.responseXML;\n\t\t\tcontroller.loadInner();\n\t\t}\n\t};\n\n\t// This call starts the request.\n\txhr.send();\n\n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"javascript\" enclose=\"none\">loadData</syntaxhighlight> function first creates a new XMLHttpRequest object. The three necessary values mentioned before are used as parameters for the <syntaxhighlight lang=\"javascript\" enclose=\"none\">open</syntaxhighlight> function. The <syntaxhighlight lang=\"javascript\" enclose=\"none\">onload</syntaxhighlight> function defines the reaction after finish the file load. Status 200 means, that the file is successfully transfered to the client. The advantage of XML is, that it is extremely easy to load with [[Technology:XMLHttpRequest]]. The <syntaxhighlight lang=\"javascript\" enclose=\"none\">xhr.responseXML</syntaxhighlight> function returns a complete data structure for the company traversable with [[Technology:DOM]].\n\n=== Feature implementation ===\n\nWe use the DOM API to retrieve all salary nodes of the company:\n\n<syntaxhighlight lang=\"javascript\" source=\"html5XMLHttpRequest/companyModel.js\">\nmodel.cut = function() {\n\t// This call retrieves all salary nodes.\n\tvar salaryNodes = company.response.documentElement.getElementsByTagName(\"Salary\");\n\n\t// This loop cuts the salary values by two and saves the value to the specific nodes.\n\tfor (var i = 0; i < salaryNodes.length; i++) {\n\t\tsalaryNodes[i].childNodes[0].nodeValue = parseFloat(salaryNodes[i].childNodes[0].nodeValue) / 2;\n\t}\n\n\t// This function saves the company to the xml file.\n\tcompany.saveData(company.response);\n\t// The new total value has to be determined after the cut.\n\tmodel.total();\n}\n</syntaxhighlight>\nThe <syntaxhighlight lang=\"javascript\" enclose=\"none\">getElementsByTagName(\"Salary\")</syntaxhighlight> returns all salary nodes for the company. The return value is a simple array. The ''for'' loop traverses this array and cuts all the salaries. After cutting the salaries, all new values have to be saved and the new total value has to be determined. In our example we will save the complete company with the new data into the [this!!company.xml] file.\n\n=== Save company ===\n\nThe save mechanism is as simple as the load mechanism. The difference is, that some parameters of the <syntaxhighlight lang=\"javascript\" enclose=\"none\">open</syntaxhighlight> function have to be changed:\n\n* The request method is now ''POST'', because we want to have write access\n* and the filename is ''update.php'', refering to the [[Language:PHP]] script, which accepts the changed content for the [this!!company.xml].\n\n<syntaxhighlight lang=\"javascript\" source=\"html5XMLHttpRequest/company.js\">\ncompany.saveData = function(data) {\n\tvar serializer = new XMLSerializer();\n\tvar xml = serializer.serializeToString(data);\n\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('POST', 'upload.php', true);\n\txhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\txhr.setRequestHeader(\"X-File-Name\", \"company.xml\");\n\txhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n\txhr.send(xml);\n}\n</syntaxhighlight>\nThere are some additional parameters, which are used to define the following proceeding on the [[:Category:Server|server]] sides [[Language:PHP]] script. The three elements of the request header show, that the request is an XMLHttpRequest, that the concerning file has its relative path ''company.xml'' and the content is a stream. The [this!!upload.php] script handles the stream and saves it as XML file with the given name:\n\n<syntaxhighlight lang=\"php\" source=\"html5XMLHttpRequest/upload.php\">\n<?php\n\t$uploaddir = \"\";\n\n\tif($_SERVER['HTTP_X_FILE_NAME']!=\"\") {\n\n\t\t$nomefile=$_SERVER['HTTP_X_FILE_NAME'];\n\n\t\t$fh = fopen($uploaddir.$nomefile, 'w') or die(\"<h1 style='color:red;'>Upload failed</h1>\");\n\n\t\tfwrite($fh, $HTTP_RAW_POST_DATA);\n\n\t\tfclose($fh);\n\n\t\techo \"<h1>success uploaded</h1>.\\n\";\n\t}\n?>\n</syntaxhighlight>\nThe first ''if'' control structure proofs, that the filename is not empty. After that, the script opens the file with the given filename and write access. If it is successfully opened, the stream can be written to the file handled by the function <syntaxhighlight lang=\"php\" enclose=\"none\">fwrite</syntaxhighlight> The parameters for this function are the opened file (<syntaxhighlight lang=\"php\" enclose=\"none\">$fh</syntaxhighlight>) and the delivered content (<syntaxhighlight lang=\"php\" enclose=\"none\">$HTTP_RAW_POST_DATA</syntaxhighlight>).", "languages": [{"type": "Language", "name": "HTML5"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "PHP"}, {"type": "Language", "name": "XML"}], "headline": "basic use of [[Technology:XMLHttpRequest]] with [[Language:HTML5]]", "architecture": "All necessary files are located in the base folder. The architecture is based on [[MVC]]:\n\n* All [[Language:HTML]] files in combination with the [[Language:JavaScript]] (.js) files with the suffix ''View'' represent the view.\n* The controller is implemented within the JavaScript (.js) files with the suffix ''Controller''.\n* The model files have the suffix ''Model''.\n\nThere is an additional [this!!upload.php] file, which is necessary to upload new content for the [[Language:XML]] file.", "usage": "* Please check out all files in the repository.\n* Open the index.html with your web-browser (check [[Language:HTML5|HTML5]] for the HTML5-support of your browser).\n\nThis HTML5-program does not work over file-protocol when using Chrome. In this case, you need access over http. To gain access over http, you can use XAMPP, for example, to create a webserver.\n\n* Download XAMPP from http://www.apachefriends.org/en/xampp.html.\n* Install XAMPP.\n* Deploy all files to your htdocs-directory (for example: E:/xampp/htdocs/xhr/).\n* Start the XAMPP-Control Panel and activate Apache.\n* Start your web-browser.\n* Call http://localhost/xhr/index.html.\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "DOM"}, {"type": "Technology", "name": "XMLHttpRequest"}], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "Server"}, {"type": "Language", "name": "XML"}, {"type": "Technology", "name": "XMLHttpRequest"}, {"type": "Concept", "name": "Asynchronous_communication"}, {"type": "Page", "name": "API"}, {"type": "Concept", "name": "Ajax"}, {"type": "Implementation", "name": "html5ajax"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Web_UI"}]}, "gwt": {"usage_links": [{"type": "Page", "name": "101implementation"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "GWT"}, {"type": "Page", "name": "web_application"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Page", "name": "Web_application"}, {"type": "Page", "name": "Web_theme"}], "motivation": "The present project provides a simple [[Web Application|WebApp]] for companies by making use of the [[Technology:GWT| Google Web Toolkit]] and therefore [[Technology:Ajax]]. \nVia [[asynchronous communication]] the server provides functionality for cutting and totaling salaries.\nThe server allows the client to retrieve instances of [[Serialization|serializable]] classes of the company's [[object model]].\nThe client presents the provided functionality and retrieved data via predefined [[GUI]] components.", "name": "gwt", "illustration_links": [{"type": "Page", "name": "Server"}, {"type": "Technology", "name": "GWT"}, {"type": "Page", "name": "Application"}, {"type": "Page", "name": "Client"}, {"type": "Page", "name": "Client"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Page", "name": "Server"}, {"type": "Concept", "name": "method"}], "url": "http://101companies.org/index.php/101implementation:gwt", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "GWT"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Concept", "name": "closed_serialization"}, {"type": "Feature", "name": "Tree_structure"}, {"type": "Implementation", "name": "java"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "illustration": "The connection to the [[:Category:Server|server]] is provided by the service of this [[Technology:GWT]]-[[:Category:Application|application]]. The pre-requist of this connection is the [[:Category:Client|client-side]] invokation of this service:\n\n<syntaxhighlight lang=\"java\">\n\tprivate final ServiceAsync service = GWT.create(Service.class);\n</syntaxhighlight>\nAfter this initialization, the specific methods of this service are called by simply invoking those methods on the [[:Category:Client|client]]. The [[101feature:Type-driven transformation|cut]]-button, for example, creates a cut-request, with two possible results. If it is successfull, the new [[101feature:Type-driven query|total]]-value is returned and the specific field is set. If not, nothing happens. The following example shows the action for the company-cut button, which should, if successfull, refresh the text-field ''salaryInfoValue'':\n\n<syntaxhighlight lang=\"java\">\n\tcutButton.addClickHandler(new ClickHandler() {\n\n\t\t@Override\n\t\tpublic void onClick(ClickEvent event) {\n\t\t\tservice.cutCompany(new AsyncCallback<Double>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(Double result) {\n\t\t\t\t\tsalaryInfoValue.setText(\"Total salary = \" + result\n\t\t\t\t\t\t\t+ \" $\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailure(Throwable caught) {\n\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n</syntaxhighlight>\nOn the [[:Category:Server|server]] side, the [[method]] is implemented in the following way:\n\n<syntaxhighlight lang=\"java\">\n\t@Override\n\tpublic Double cutCompany() {\n\t\tcompany.cut();\n\t\treturn company.total();\n\t}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "CSS"}], "headline": "[[Web programming]] in [[Language:Java]] with [[Technology:GWT]]", "architecture": "'''Client''': \nClient classes are to be found in the client package. See ''org.softlang.client''.\nThere is the GUI and a special [[101feature:Tree structure]] object model for the client with classes that support [[closed serialization]]. See ''org.softlang.client.company'' for the latter.\nThis object model holds \"shallow\" data for the widgets. The entry point for the client is the [this!!src/org/softlang/client/Gwt.java Gwt.java] class.\nHere we describe the app's client side appearance and functionality.\n\n'''Server''': \nServer classes are to be found in the server package. See ''org.softlang.server''. \nWe use an object model for [[101feature:Tree structure]] very much like in project [[101implementation:java]]\n(We use a cloned object model for the sake of a simple build for this GWT project.)\nThe server maintains an index (see class [this!!src/org/softlang/server/Index.java Index.java]) between shallow and proper objects.\nThat is, departments and employees are identifiable by their ids (say, names).\n \nThe communication between client and server is modeled by the [this!!src/org/softlang/client/Service.java Service] interface. See the client package.\nThere is also the asynchronous version of it: [this!!src/org/softlang/client/ServiceAsync.java ServiceAsync.java]. \nThese services allow the client to load and save data and perform scenarios [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]].", "usage": "The [[:Category:101implementation|implementation]] is created with [[Technology:Eclipse]] (3.6/Helios) and the [[Technology:GWT]]-plugin (Version 2.2). If you want to compile the code, you need these versions to run it safely. You can get them at:\n\n* [http://www.eclipse.org/downloads/ Eclipse]\n* [http://code.google.com/intl/de-DE/eclipse/docs/download.html GWT]\n\nAfter installation and start, simply open this [[:Category:web application]] as project into eclipse:\n\n* Please cleanup (Project -> Clean...) the project before running.\n* Right-click on the project, left-click on \"Run As\" and left-click on \"Web-application\".\n* Visit http://127.0.0.1:8888/GwtTree.html?gwt.codesvr=127.0.0.1:9997\n\nIf you want to recompile it, please end the old server-process by terminating the process in the [[Technology:Eclipse]] console first.\n\n[[Category:Web application]]\n[[Category:Web theme]]", "technologies": [{"type": "Technology", "name": "GWT"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "Web_Application"}, {"type": "Technology", "name": "GWT"}, {"type": "Technology", "name": "Ajax"}, {"type": "Concept", "name": "asynchronous_communication"}, {"type": "Concept", "name": "Serialization"}, {"type": "Concept", "name": "object_model"}, {"type": "Concept", "name": "GUI"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Distribution"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Web_UI"}]}, "sqlServer": {"usage_links": [{"type": "Technology", "name": "Visual_Studio"}], "motivation": "Please note: ''This implementation is prerequisite for\n[[101implementation:ef]].'' A simple relational schema is used to\nmodel the data part of the [[101companies:System]]. In particular,\nthere are tables for companies, departments, employees (and\npersons). Further, there are primary and foreign keys that represent\ndifferent types of relationships. For instance, departments associate\nthemselves with a company by a foreign key. The SQL-based\nimplementation also includes triggers--to represent\nconstrains/cardinality. Finally, there are SQL scripts covering the\noperations for totaling and cutting salaries.  An implementation of\nthe query for the depth of departmental nesting is available as well,\nbut it is strikingly complex because of SQL's known issues with\nrecursion.", "name": "sqlServer", "url": "http://101companies.org/index.php/101implementation:sqlServer", "headline_links": [{"type": "Technology", "name": "SQL_Server"}], "architecture_links": [], "languages": [{"type": "Language", "name": "SQL"}], "headline": "an implementation in a relational database using [[Technology:SQL Server]]", "architecture": "The following artifacts are used to create relational model for\n101companies:\n\n* Tables (TableName.table.sql)\n* Primary keys (Name.pkey.sql)\n* Foreign keys (Name.fkey.sql)\n* Triggers (Name.trigger.sql)\n\nThe scripts/Post-Deployment folder contains script file executed after\nthe database schema was created to fill in the database with actual\n101companies data.", "usage": "[[Technology:Visual Studio]] 2010 should be used to open a project\nfile. The deploy option should be used to create the database. The\ntarget connection (in project properties) should be adjusted for the\nlocal database server.", "technologies": [{"type": "Technology", "name": "SQL_Server"}, {"type": "Technology", "name": "Visual_Studio"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "ef"}, {"type": "Page", "name": "System"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Persistence"}]}, "hadoop": {"usage_links": [], "motivation": "Companies are processed in parallel manner according to the [[MapReduce]] programming \nmodel. To this end, primitive data of companies, departments, and employees can be stored\nin [[file]]s of fixed-size [[record]]s in a [[:Category:distributed file system]].", "name": "hadoop", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:hadoop", "headline_links": [{"type": "Technology", "name": "Hadoop"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "closed_serialization"}], "illustration": "While data is stored in files, the records can be de-serialized into objects\nfor the convenience of MapReduce functionality. For instance, an object type for\nemployees is designed as follows:\n\n<syntaxhighlight lang=\"java\">\nclass Employee\n   implements WritableComparable<Employee> {\n\n\tprivate Text name;\n\tprivate Text address;\n\tprivate DoubleWritable salary;\n\tprivate Text company;\n\n   // getters, setters and omitted\n    \n   public void readFields(DataInput in)\n         throws IOException {\n      name = new Text();\n      name.readFields(in);\n      address = new Text();\n      address.readFields(in);\n      ...\n   }\n}\n</syntaxhighlight>\nThat is, there are properties for name, address, and salary---as usual. In\naddition, there is a property for the the company so that the company of each\nemployee is immediately known without any traversal or state-based effort. \nObjects are populated from records on file through a ''readFields'' method\nthat is required for any deserializable type.\n\nA MapReduce computation consists of a mapper and a reducer. The \nessential methods of these components, i.e., methods ''map'' (extraction)\nand ''reduce'' (aggregation) are shown below:\n\n<syntaxhighlight lang=\"java\">\nprotected void map(\n   Text key, Employee value, Context context)\n   throws ... {\n      context.write(\n         value.getCompany(),\n         value.getSalary());\n}\n</syntaxhighlight>\n<syntaxhighlight lang=\"java\">\nprotected void reduce(\n   Text key, Iterable<...> values, Context context)\n   throws ... {\n      double total = 0;\n      for(DoubleWritable value: values)\n         total += value.get();\n      context.write(key, new DoubleWritable(total));\n}       \n</syntaxhighlight>\nThat is, the ''map'' method constructs an intermediate key-value\npair from each employee such that the company of an employee \n(say, the company name) serves as key and the employee's salary\nserves as value. In this manner, the MapReduce framework will correctly group\ntogether all salaries per company. Hence, the ''reduce'' method\nsimply iterates over all salaries, grouped by key, and sums them \nup by a trivial aggregation loop so that a pair of the company key \nwith the total of salaries is written to the output file.", "languages": [{"type": "Language", "name": "Java"}], "headline": "parallel processing with [[Technology:Hadoop]]", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]].\nPackage ''org.softlang.operations'' hosts designated classes with static methods for\nthe MapReduce jobs [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]]. Some boilerplate code for \n[[closed serialization]] is implemented in the class ''org.softlang.company.Company'' \n(see methods ''readObject'' and ''writeObject''). Package ''org.softlang.tests'' \nhosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project.\n* Hence, open the project with Eclipse; this will also build the project.\n* The default settings runs Hadoop on your local machine. For distributed setup see below.\n* There are JUnit tests available as the package ''org.softlang.tests''.\n** Run class ''Serialization'' with JUnit to create and serialize an example Company.\n** Run class ''Basics'' with JUnit to exercise basic features.", "technologies": [{"type": "Technology", "name": "Hadoop"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "MapReduce"}, {"type": "Concept", "name": "file"}, {"type": "Concept", "name": "record"}, {"type": "Page", "name": "distributed_file_system"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_parallelism"}]}, "javaExorcism": {"usage_links": [], "motivation": "Consider [[101implementation:javaVisitor]] and [[101implementation:javaTemplate]] for simpler \nimplementations that also put to work some design patterns for illustrative purposes. The present\nimplementation is somewhat extreme in that it aims to illustrate a larger number of design patterns\npossibly for the argument's sake, without strong practical incentive. So please be careful about consuming\nthis implementation. Please also observe the name of this implementation, \"...Exorcism\", which is supposed to be a clear\nhint at the common danger of over-engineering a design. One way of going over the top is to prematurely\nweave an additional design pattern into a system without understanding the pros and cons of doing so, \nwithout actually establishing the proper incentive of deploying the pattern. To summarize, the \npresent implementation stands out with its design density in terms of the number of patterns and their\npattern interactions as they are provoked, encountered, and addressed.", "name": "javaExorcism", "url": "http://101companies.org/index.php/101implementation:javaExorcism", "headline_links": [], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Logging"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Access_control"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "excessive illustration of design patterns in Java", "architecture": "Package ''org.softlang.company'' and subpackages hosts two object models for [[101feature:Tree structure]].\nPackage ''org.softlang.features'' hosts feature implementations.\nPackage ''org.softlang.tests'' hosts JUnit tests; see below.\nPackage ''org.softlang.util'' hosts library-like extensions (thereby extending ''java.util'').\nAll the remaining packages host pattern infrastructure and pattern instances.\n\n=== Abstract Factory pattern ===\n\nPackage ''org.softlang.company'' defines the company object model in an interface-oriented manner.\nThere are two alternative implementations of these interfaces. That is, package ''org.softlang.company.impl.pojo'' provide a\nsimple, POJO-like implementation, whereas ''org.softlang.company.impl.bean'' implements objects with observability (in the sense \nof the ''Observable'' class of package ''java.util'') and a parent axis. Client code can be parametric in the implementation on \nthe grounds of factories of package ''org.softlang.company.factory''. For instance, the code for constructing a sample company \nuses a factory parameter; see the ''Basics'' class of package ''org.softlang.tests''. Some client code only works for one of the\ntwo implementations. For instance, the logging feature of package ''org.softlang.features'' relies on objects with observability \nspecifically.\n\n=== Adapter pattern ===\n\nA class adapter is used when deriving the ''DepartmentImpl'' class of package ''org.softlang.company.impl.bean''\nfrom the ''ContainerImpl'' class of the same package such that it implements the ''Department'' class of package ''org.softlang.company''.\nAn object adapter is used when down-grading the ''List'' interface of package ''java.util'' the interface ''SimpleList'' of\npackage ''org.softlang.util'' such that much less methods are exposed for the rest of this projects. For instance, \nthe class ''ObservableSimpleList'' of package ''org.softlang.util'' only implements the narrow interface.\n\n=== Command pattern === \n\nThe cut operation is implemented twice: once in package ''org.softlang.features'' and once in package\n''org.softlang.command''. The later implementation uses command objects to defer the execution of the cut operation. To this\nend, each employee is encapsulated in an command object of class ''CutEmployee'' and the batch of the derived command objects for\nemployees is maintained by a command object of class ''CutCompany''. All command objects provide ''execute'' and ''undo'' actions.\nIn particular, command objects for individual employees back up the salary before they cut.\n\n=== Composite pattern ===\n\nA company is a composite structure that breaks down into departments, employees, and their properties.\nThere is a rooting interface ''Component'' that provides the setter and getter for a name that is equally available on \ncompanies, departments, and employees. In the case of the package ''org.softlang.company.impl.bean'', there are even additional\nshared methods because of the rooting class ''java.util.Observable''. In this case, overriding is also leveraged so that \naddition and removal of observers is pushed into sub-components in the case of composite-like as opposed to leaf-like\ncomponents.\n\n=== Decorator pattern ===\n\nThe ''ObservableSimpleList'' class of package ''org.softlang.util'' effectively decorates a given (simple)\nlist with observability (in the sense of the ''Observable'' class of package ''java.util''). That is, an observable (simple) list\ncombines the interfaces of (simple) lists and ''Observable''. The ''ObservableSimpleList'' class wraps the underlying (simple) \nlist and it also incorporates additional state because it derives from the ''Observable'' class which manages observers (listeners).\nObservable (simple) lists are used in the non-POJO implementation of the company object model. That is, the list of subunits \nfor companies and departments is set up to be observable.\n\n=== Observer pattern ===\n\nThere is clearly value in making company object structure observable (in the sense of the ''Observable'' \nclass of package ''java.util''). For instance, if we were providing a GUI, observability would help with implementing an \nMVC architecture. In this implementation, observability is leveraged for [[101feature:Logging]] and [[101feature:Global invariant]];\nsee the corresponding classes of package ''org.softlang.features''. Objects of the company object model are made observable \nin a way that gives credit to the part-whole structure. That is, registration of an observer with a company object is \npropagated down into all components. To this end, an observable (simple) list type is also used; see the ''ObserableSimpleList'' \nof package ''org.softlang.util''.\n\n=== Proxy pattern === \n\n[[101feature:Access control]] is implemented in a way that access to employee salaries is regulated. Proxy objects are used to \nto enforce the access control policy. By default, read and write access is enabled, but it can be configured even once the proxies\nhave been deployed. All concrete classes of the object model for companies are proxied. That is, employees are proxied because\ntheir get/set salary members must be directly controlled, while departments and companies are proxied so that any added\nsubunit will be transparently proxied. To summarize, company objects are initially and continuously enhanced to provide proxies\nfor every component so that all salary access must go through access control.\n\n=== Singleton pattern ===\n\nWe use functor objects for the sake of parameterizing traversal functionality in monoids; see classes \n''Monoid'' and ''AddDoubles'' of package ''org.softlang.util''. Those functor objects are good candidates for singletons;\nsee the implementation of ''AddDoubles''. There is a static member ''getInstance'' to retrieve the singleton, which is constructed\nupon request, if needed, or fetched from a static field otherwise. The use of a singleton helps here to emphasize the fact that\nno state is associated with monoids.\n\n=== Template pattern ===\n\nThe cut operation can be understood as a \"walk\" over the company structure with a mutation to be applied\nto any employee encountered. Likewise, the total operation can be understood as a \"reduction\" or a \"query\" over the company\nstructure where salaries are extracted from any employee encountered and those salaries are combined systematically. Package\n''org.softlang.template'' captures the general notions of walkers and reducers as template methods. The primitive operations\nof these templates are to be defined by visit methods of an appropriate visitor. The template methods essentially compose\nthe client visitors with traversal behavior. See the implementations of cut and total in package ''org.softlang.features''.\n\n=== Visitor pattern ===\n\nNearly all operations including those for totaling and cutting salaries are implemented as visitors; see package\n''org.softlang.visitor'' for the visitor framework. There are two kinds of visitors: void visitors, i.e., visitors with\nvoid visit methods as well as returning visitors, i.e., visitors with visit methods with some uniform result type. \nThe use of visitors is deeply integrated into the rest of this implementation. In particular, the template methods of\npackage ''org.softlang.template'' also leverage visitors. Arguably, visitors are needed for the chosen object model because\nthere is polymorphism propperly involved due to the abstract ''Subunit'' class with the concrete subclasses \n''Employee'' and ''Department''.", "issues_links": [], "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** For instance, run class ''Basics'' with JUnit to exercise basic features.\n** See the documentation of the other test cases.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "javaVisitor"}, {"type": "Implementation", "name": "javaTemplate"}], "issues": "Additional patterns should be considered:\n* State pattern\n* Memento pattern\n* Strategy pattern\n* ...", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Logging"}, {"type": "Feature", "name": "Access_control"}]}, "strutsXml": {"usage_links": [{"type": "Technology", "name": "Maven"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Page", "name": "Web_server"}, {"type": "Page", "name": "Application_server"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Technology", "name": "Apache_Tomcat"}, {"type": "Technology", "name": "Maven"}, {"type": "Page", "name": "Web_server"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Page", "name": "Web_server"}, {"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Page", "name": "Web_browser"}, {"type": "Page", "name": "Web_application"}], "motivation": "This is a simple Struts-based web implementation of the basic 101companies-features. Java annotations are used for redirection rules. Server-side storage or persistence relies on XML an object streams.  See [[101implementation:strutsAnnotation]] for a similar implementation that uses annotations instead for the redirection rules.", "name": "strutsXml", "url": "http://101companies.org/index.php/101implementation:strutsXml", "headline_links": [{"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Struts"}], "illustration": "The company data is stored in a serialization file. To obtain the stored data, there \nis an auxiliarly method in the Company class.\n\n<syntaxhighlight lang=\"java\">\npublic class Company { \n ...\npublic static Company readObject(String filename) {\n  Object o = null;\n  try {\n\tFileInputStream fis = new FileInputStream(filename);\n\tObjectInputStream in = new ObjectInputStream(fis);\n\to = in.readObject();\n\tin.close();\n  } catch (IOException e) {\n     e.printStackTrace();\n  } catch (ClassNotFoundException e) {\n\t e.printStackTrace();\n  }\n  return (Company) o;\n}\n...\n</syntaxhighlight>\nBased on the struts2 architecture, the controller layer is implemented \nby Java classes (action classes) that extend the class ActionSupport \nand implement the Preparable interface. This approach uses the \n'''xworks''' framework and a simple CRUD design, where only one \naction is necessary to all operations (edit and cut salaries of a \ndepartment, edit and cut salaries of an employee, and so on). CompanyAction \nis the  \nsingle Action class in this project, with the definition: \n\n<syntaxhighlight lang=\"java\">\npublic class CompanyAction extends ActionSupport implements Preparable {\n... \n}\n</syntaxhighlight>\n \n\nThe view layer might be implemented using \nJava Server Pages (JSPs) or other template languages such as Velocity. Here, \nwe use JSPs to implement the view layer. The listing bellow shows \na code fragment of the department.jsp view component. You should notice \nsome special tags such as '''s:form''' and '''s:iterator''', which are declared \nin the Struts tag library. Using theses tags we are able to refer to \nproperties of the action that redirected to the specific view. \n\n<syntaxhighlight lang=\"xml\">\n...\n<h2>Department details</h2>\n\n<s:form action=\"DEP!save.action\" method=\"post\">\n\t<s:textfield name=\"department.name\" value=\"%{department.name}\" label=\"Name\" size=\"30\" />\n\t<s:textfield name=\"department.manager.person.name\" value=\"%{department.manager.person.name}\" label=\"Manager\" size=\"30\" />\n\t<s:textfield name=\"department.manager.salary\" value=\"%{department.manager.salary}\" label=\"Manager salary\" size=\"15\" />\n\t<s:textfield name=\"department.manager.person.address\" value=\"%{department.manager.person.address}\" label=\"Manager address\" size=\"30\" />\n\t<s:textfield value=\"%{department.total()}\" label=\"Total salaries\" readonly=\"true\" size=\"30\" />\n\t<s:hidden name=\"empName\" value=\"%{department.manager.person.name}\" />\n\t<s:hidden name=\"deptName\" value=\"%{department.name}\" />\n\t<s:submit value=\"Save\" />\n\t<s:submit value=\"Cut\" action=\"cutSalaries\"/>\n\t<s:submit value=\"Company details\" action=\"index\" />\n</s:form>\n<br>\n<h2><s:text name=\"Subdepartments\" /></h2>\n<table class=\"outline\" border=\"1\" width=\"50%\">\n\t<tr>\n\t\t<th width=\"70%\"><s:text name=\"Name\" /></th>\n\t\t<th width=\"30%\">Edit department</th>\n\t</tr>\n\t<s:iterator value=\"department.subunits\" status=\"status\">\n\t<tr>\n\t\t<s:if test=\"department\">\n\t\t\t<td class=\"nowrap\"><s:property value=\"name\" /></td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t\t<s:url action=\"DEP!input\" id=\"link\">\n\t\t\t\t\t<s:param name=\"department.name\" value=\"name\" />\n\t\t\t\t</s:url> \n\t\t\t\t<a href=\"<s:property value=\"#link\"/>\">Detail</a>\n\t\t\t</td>\n\t\t</s:if>\n\t</tr>\n\t</s:iterator>\n</table>\n...\n</syntaxhighlight> \t\nAs explained, an XML file declares which view should \nbe displayed as an action response. For instance, if \nthe cutSalaries action was performed, the system should \nredirect to one of two components: department.jsp or \nemployee.jsp. This decision depends on \nthe returned value of the corresponding method (\nimplemented by the CompanyAction class). \n\n<syntaxhighlight lang=\"java>\npublic String cutSalaries() {\n  String redirect = SUCCESS;\n  if(department != null && deptName != null) {\n    service.cutDepartmentSalaries(deptName);\n\tredirect = DEPARTMENT_SAVE;\n  }\n  else if(employee != null && empName != null) {\n\tservice.cutEmployeeSalary(empName);\n\tredirect = EMPLOYEE_SAVE;\n  }\n  return redirect;\n}\n</syntaxhighlight>  \nThe struts.xml file informs the next view that \nshould be displayed, depending on the returned \nvalue of a call to the cutSalaries method.\n \n<syntaxhighlight lang=\"xml\">\n<action name=\"cutSalaries\" class=\"org.softlang.action.CompanyAction\" method=\"cutSalaries\">\n  <result name=\"department.save\">/WEB-INF/jsp/department.jsp</result>\n  <result name=\"employee.save\">/WEB-INF/jsp/employee.jsp</result>\n</action>\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "JavaServer_Pages"}, {"type": "Language", "name": "XML"}], "headline": "[[Web programming]] in [[Language:Java]] with [[Technology:Struts]] configuring with XML", "illustration_links": [], "issues_links": [{"type": "Page", "name": "Web_application"}], "usage": "''Requirements:''\n* [[Technology:Maven]] (Version 2.x) as [[Technology:Eclipse]] plugin (http://eclipse.org/m2e/download/) or standalone (http://maven.apache.org/download.html)\n* [[:Category:Web server]] or [[:Category:Application server|application server]] based on the [[Technology:Servlet API|servlet]] technology (We recommend [[Technology:JBoss Application Server|JBoss application server]], but [[Technology:Apache Tomcat]] will also be sufficient).\n\n''Import (Eclipse only):\"\nImport the strutsAnnotation implementation into eclipse as [[Technology:Maven]] project:\n* Click the \"File\"-button in the menu bar and \"Import...\".\n* Select the \"Maven\" folder and \"Existing Maven Projects\".\n* Browse to your local \"strutsAnnotation\" folder and \"Finish\".\n\n''Build:''\n* Run \"mvn clean\" and \"mvn install\" in the root directory of the struts 2 implementation or (''Eclipse only'') right click on your imported project and first click \"Run As\" -> \"Maven clean\" and second \"Run As\" -> \"Maven install\".\n* Copy the target/struts2app.war file to the web-application folder of your [[:Category:Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/server/default/deploy).\n\n''Run''\n* Start your [[:Category:Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/bin/run.bat (Windows) or <JBossHome>/bin/run.sh (Unix)).\n* Start your [[:Category:Web browser]] and go to http://localhost:8080/struts2app.\n\n[[Category:Web application]]", "technologies": [{"type": "Technology", "name": "Struts"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "strutsAnnotation"}], "issues": "* Potentially simplify Controller/Service; no service object needed\n* Add substantial README/code documentation\n\n[[Category:Web application]]", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Persistence"}]}, "hxt": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[XML processing]] in [[Language:Haskell]] with [[Technology:HXT]]'s combinator [[library]]. Operations for totaling and cutting salaries are accordingly composed from combinators for XML queries and transformations. The concept of [[arrow]]s is demonstrated by the implementation\nas HXT's combinator library essentially relies on arrows.", "name": "hxt", "illustration_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}], "url": "http://101companies.org/index.php/101implementation:hxt", "headline_links": [{"type": "Concept", "name": "InADASHmemory_XML_processing"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HXT"}], "architecture_links": [], "illustration": "In the following we will demonstrate the construction of an arrow for [[101feature:Type-driven query|totaling]] and how one can run this arrow in IO.\n\n=== Total ===\n\nWe define a query for totaling all company salaries:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxt/Total.hs\" line>\ntotal :: ArrowXml a => a XmlTree Float\ntotal = listA (deep $ hasName \"salary\"\n               >>> \n               getChildren  \n               >>> \n               getText)     \n        >>>\n        arr (sum.(map read)) \n</syntaxhighlight>\nIn line 2 we query all salary nodes by using <syntaxhighlight lang=\"haskell\" enclose=\"none\">deep $ hasName \"salary\" :: ArrowXml a => a XmlTree XmlTree</syntaxhighlight>.\nThis is an arrow from <syntaxhighlight lang=\"haskell\" enclose=\"none\">XmlTree</syntaxhighlight> to <syntaxhighlight lang=\"haskell\" enclose=\"none\">XmlTree</syntaxhighlight>, say a filter for all salary nodes. In general  <syntaxhighlight lang=\"haskell\" enclose=\"none\">deep</syntaxhighlight> only finds non-nested results, but because of the fact that we are dealing with text nodes, which can not be nested, this is acceptable in this situation. In lines 2-6 the result of this arrow is then combined with <syntaxhighlight lang=\"haskell\" enclose=\"none\">getChildren >>> getText</syntaxhighlight> by using <syntaxhighlight lang=\"haskell\"  enclose=\"none\">>>></syntaxhighlight>. The new arrow of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">ArrowXml a => a XmlTree String</syntaxhighlight> returns the text of each salary node.\n\nWe then use ''Control.Arrow.ArrowList'''s <syntaxhighlight lang=\"haskell\" enclose=\"none\">listA</syntaxhighlight> in line 2 to collect all results from this arrow in an array, giving us a new arrow of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">ArrowXml a => a XmlTree [String]</syntaxhighlight>. \n\nIn line 7 the result of this arrow is passed to the lifted version of <syntaxhighlight lang=\"haskell\" enclose=\"none\">(sum.(map read)) :: (Read c, Num c) => [String] -> c</syntaxhighlight>, which in this case is of type: <syntaxhighlight lang=\"haskell\" enclose=\"none\">ArrowXml a => a [String] Float</syntaxhighlight>.\n\nThe overall emerging arrow, giving us the total salary, is of type <syntaxhighlight lang=\"haskell\" enclose=\"none\">ArrowXml a => a XmlTree Float</syntaxhighlight>.\n\n=== Running an arrow ===\n\nWhen we combinate the arrow for reading a sample company from a XML file with the totaling arrow we get:\n<syntaxhighlight lang=\"haskell\" source=\"hxt/Main.hs\">\nreadDocument [] \"sampleCompany.xml\" >>> total\n</syntaxhighlight>\nWe use <syntaxhighlight lang=\"haskell\" enclose=\"none\">runX :: IOSArrow XmlTree c -> IO [c]</syntaxhighlight> for running this arrow in IO. The function returns all results of a given arrow in a list. Because we except this list to be a singleton list, we can write:\n\n<syntaxhighlight lang=\"haskell\" source=\"hxt/Main.hs\">\n[ttl] <- runX ( readDocument [] \"sampleCompany.xml\" \n                >>> total )\n</syntaxhighlight>\n<syntaxhighlight lang=\"haskell\" enclose=\"none\">ttl</syntaxhighlight> holds the total salary of a sample company.", "languages": [{"type": "Language", "name": "Haskell"}, {"type": "Language", "name": "XML"}], "headline": "[[In-memory XML processing]] in [[Language:Haskell]] with [[Technology:HXT]] ", "architecture": "[this!!Total.hs] provides the arrow for totaling salaries as described in the illustration section. [this!!Cut.hs] contains a transformation arrow for cutting salaries. [this!!Main.hs] collects test scenarios for totaling and cutting XML data provided by [this!!sampleCompany.xml]", "usage": "* [this!!Main.hs] has to be loaded into GHCi. \n* The <syntaxhighlight lang=\"haskell\" enclose=\"none\">main</syntaxhighlight> function has to be applied.\n* The output should be equal to the content of the file [this!!baseline].\nOne can also use the [this!!Makefile] with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}, {"type": "Technology", "name": "HXT"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "XML_processing"}, {"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "HXT"}, {"type": "Concept", "name": "library"}, {"type": "Concept", "name": "arrow"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "gremlinADASHneo4j": {"usage_links": [], "motivation": "This implementation uses the [[Technology:Neo4j]] [[Technology:Graph database]] to directly map the 101companies [[101feature:Tree structure]] to the database model.", "name": "gremlin-neo4j", "url": "http://101companies.org/index.php/101implementation:gremlin-neo4j", "headline_links": [], "illustration": "Employees and departments both are modelled as nodes with names and addresses as properties. Employment, Management and Subdepartment relations are modelled as the graph's edges. Salaries are considered properties of employment and therefore annotated to the corresponding edges.\n\n* Employment is marked via edges with a \"EMPLOYED\" relation.\n* A department having a subdepartment is shown by an edge with the \"HAS_SUBUNIT\" relation.\n* An employee being manager of a department is noted via the \"MANAGES\" relation.\n\nThe Gremlin language works by chaining operations on the graph that traverse, or select nodes and edges. To total all salaries in a company, the graph just has to be queried for all edges that are of the \"EMPLOYED\" type, take their salary property and sum it up. This is achieved with the line:\n\n<syntaxhighlight lang=\"groovy\">\ng.V.outE('EMPLOYED').collect{it.salary}.flatten().sum()\n</syntaxhighlight>\nTo cut the salaries of employees, Gremlin has to set the value of a property which is treated as a side effect and properly signaled by the use of the sideEffect method:\n\n<syntaxhighlight lang=\"groovy\">\ng.V.out('EMPLOYED').sideEffect{it.salary = (double)it.salary / 2.0}\n</syntaxhighlight>\nNote that there has to be a cast in the division as Groovy treats the results of division as BigDecimal rather than double.\n\nGremlin scripts can be executed on Neo4J via its [[Technology:REST]] API. Example queries can be sent via the UNIX tool curl, either directly as payload to a request to the respective URL at the local database host:\n\n<syntaxhighlight lang=\"bash\">\n$ curl -d \"script=$MYSCRIPT\" http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script\n</syntaxhighlight>\nPlease note that special characters in the script need to be properly escaped.", "languages": [{"type": "Language", "name": "Groovy"}], "headline": "Provide an example of a graph-based implementation of 101companies using Neo4J and the Gremlin graph query DSL.", "illustration_links": [{"type": "Technology", "name": "REST"}], "usage": "There are three shellscripts that send the respective commands to a local running Neo4J database on default port 7474. Please make sure that no other content is hosted on the local database!\nRun rebuild.sh to insert the example information into the database:\n\n<syntaxhighlight lang=\"bash\">\n$ ./rebuild.sh\n</syntaxhighlight>\nThe basic features are demonstrated by running the respective shellscripts such as:\n\n<syntaxhighlight lang=\"bash\">\n$ ./total.js\n</syntaxhighlight>\nEach script will print out the results of the respective computation.", "technologies": [{"type": "Technology", "name": "Neo4j"}, {"type": "Technology", "name": "Gremlin"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "Neo4j"}, {"type": "Technology", "name": "Graph_database"}, {"type": "Feature", "name": "Tree_structure"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "android": {"usage_links": [{"type": "Implementation", "name": "simpleAndroid"}], "motivation": "The implementation demonstrates advanced style of [[Language:Android]] programming using the [[Technology:Android_SDK]] and the [[Technology:ADT]]. It is based on [[101implementation:simpleAndroid]] with more features and functions. The Application is in the position to [[101feature:Exploration | explore]] and [[101feature:Structural_editing | edit]]  the company structure. The [[101feature:Serialization]] can save and load Company objects and it is extended to export and import Profile objects. The [[101feature:Type-driven_query | total]] and [[101feature:Type-driven_transformation | cut]] functionality is also implemented.", "name": "android", "illustration_links": [{"type": "Concept", "name": "Dialog_"}, {"type": "Concept", "name": "Menu_"}], "url": "http://101companies.org/index.php/101implementation:android", "headline_links": [{"type": "Language", "name": "Android"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "Layout_"}, {"type": "Concept", "name": "Activity_"}, {"type": "Concept", "name": "Activity_"}, {"type": "Concept", "name": "Overlay_"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Feature", "name": "Serialization"}], "illustration": "=== [[Dialog | Dialogs]] ===\n\n==== AlertDialog ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\nBuilder build = new Builder(DepartmentClickActivity.this);\n\tbuild.setTitle(R.string.areyousure)\n\t.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t...\n\t})\n\t.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\tdialog.dismiss();\n\t\t}\n\t})\n\t.show();\n</syntaxhighlight>\n==== Custom Dialog ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\nDialog dialog = new Dialog(this);\ndialog.setTitle(R.string.createtheemployee);\ndialog.setContentView(R.layout.newemployee);\n((Button)dialog.findViewById(R.id.bt_Cancel_newemployee)).setOnClickListener(new OnClickListener() {\n\t@Override\n\tpublic void onClick(View arg0) {\n\t\tdialog.dismiss();\n\t}\n});\t\t\t\t\ndialog.show();\n</syntaxhighlight>\n=== [[Menu | Options Menu]] ===\n\n==== Create Menu ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n\tgetMenuInflater().inflate(R.menu.menue, menu);\n\tmenu.getItem(1).setTitle(R.string.addEmployee);\n\tmenu.getItem(0).setTitle(R.string.addDepartment);\n\treturn super.onCreateOptionsMenu(menu);\n}\n</syntaxhighlight>\n==== Give functionality ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n\tswitch (item.getItemId()) {\n\t\tcase R.id.opt_total:{\n\t\t\tToast.makeText(this, dept.total()+\"\", Toast.LENGTH_SHORT).show();\n\t\t\treturn true;\n\t\t}\n\t\tcase R.id.opt_cut:{\n\t\t\tdept.cut();\n\t\t\tToast.makeText(this,R.string.successful, Toast.LENGTH_SHORT).show();\n\t\t\treturn true;\n\t\t}\n\t\t...\n\t}\n\treturn false;\n}\n</syntaxhighlight>\n=== Edittext ===\n<syntaxhighlight lang=\"java\" source=\"\" line>\nEditText ed_name = ((EditText)findViewById(R.id.ed_name));\n...\ned_name.setText(employee.getName());\n...\n((EditText)findViewById(R.id.ed_name)).getText().toString().trim();\n</syntaxhighlight>\n=== Location ===\n\n==== MapView ====\n\n==== Overlays ====\n\n===== Marker Overlay =====\n\n===== Company Overlay =====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\n\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Android"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XML"}], "headline": "Advanced [[Language:Android]] programming", "architecture": "In the package ''org.softlang.company'' we define the Object-Model of the Company.\nThe [[101feature:Type-driven_query]] and [[101feature:Type-driven_transformation]] is in the Object-Model of the Company integrated\nIn [this!!res/values/strings.xml strings.xml] we specify the Strings of the Application.\nIn [this!!res/layout layout] we define various [[Layout | Layouts]] of the different Views.\nWe implement the [[Activity | activities]] in the package ''org.softlang.activities''.\nIn the package ''org.softlang.company.data'' we define the Object-Model of a profile.\nIn the package ''org.softlang.company.location'' we define the GoogleMap [[Activity | activity]] and the [[Overlay | overlays]].\nPackage org.softlang.features provides functionality for the [[101feature:Structural_editing]] and [[101feature:Serialization]].", "usage": "See Usage of [[101implementation:simpleAndroid]]", "technologies": [{"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "Android"}, {"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}, {"type": "Implementation", "name": "simpleAndroid"}, {"type": "Feature", "name": "Exploration_"}, {"type": "Feature", "name": "Structural_editing_"}, {"type": "Feature", "name": "Serialization"}, {"type": "Feature", "name": "TypeADASHdriven_query_"}, {"type": "Feature", "name": "TypeADASHdriven_transformation_"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Touch_control"}, {"type": "Feature", "name": "Exploration"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Structural_editing"}, {"type": "Feature", "name": "Attribute_editing"}, {"type": "Feature", "name": "Serialization"}, {"type": "Feature", "name": "Localization"}]}, "syb": {"usage_links": [{"type": "Concept", "name": "test_automation"}], "motivation": "The implementation demonstrates [[generic programming]] in [[Language:Haskell]] using [[SYB]] style. Generic programming is useful in so far that several operations of the 101companies features involve traversal over  nested data. For instance, totaling all salaries requires the location of salary subterms at all levels in a given company term. Accordingly, operations for totaling and cutting salaries are implemented as [[generic function]]s that traverse over the company structure while type-specific cases detect employees and access their salaries. (It happens that the original publication on [[SYB]] used these generic programming samples for motivation.) The resulting code is considerably more concise, when compared to a conservative style of functional programming; see [[101implementation:haskell]]. Additional operations are implemented to exercise [[SYB]] for different idioms of query or transformation and to address additional structural concerns; see the implementations of [[101feature:Structure-driven query]], [[101feature:Graph structure]], and [[101feature:Structure-driven query]].", "name": "syb", "illustration_links": [{"type": "Concept", "name": "SYB"}], "url": "http://101companies.org/index.php/101implementation:syb", "headline_links": [{"type": "Concept", "name": "Generic_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "SYB"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Type_hierarchy"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Concept", "name": "closed_serialization"}, {"type": "Concept", "name": "SYB"}], "illustration": "The data model for companies uses a data type ''SubUnit'' to have a common base concept for departments and employees; it also uses an optional ''Mentor'' component to associate mentees with mentors \"by name\". In this manner some of non-basic, structure-related features can be exercised:\n\n<syntaxhighlight lang=\"haskell\" source=\"Company.hs\">\ndata Company = Company Name [Department]\ndata Department = Department Name Manager [SubUnit]\ndata Employee = Employee Name Address Salary (Maybe Mentor)\ndata SubUnit = EUnit Employee | DUnit Department\ntype Manager = Employee\ntype Mentor = Name\ntype Name = String\ntype Address = String\ntype Salary = Float\n</syntaxhighlight>\nSeveral of the operations on companies can be implemented in a very concise manner based on the [[SYB]] style of generic programming. For instance, the operation for totaling salaries simply extracts all floats from the given term and reduces them by addition:\n\n<syntaxhighlight lang=\"haskell\" source=\"Total.hs\">\ntotal :: Company -> Float\ntotal = everything (+) (extQ (const 0) id)\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Haskell"}], "headline": "[[Generic programming]] in [[Language:Haskell]] with [[SYB]]", "architecture": "The implementation is highly modular in terms of the mapping of features to modules. \n\nStructure-related features:\n* [[101feature:Tree structure]]: ''Company.hs''\n* [[101feature:Type hierarchy]]: ''Company.hs''\n* [[101feature:Graph structure]]: ''Company.hs'' and ''Mentoring.hs''\n\nBehavior-related features:\n* [[101feature:Type-driven query]]: ''Total.hs''\n* [[101feature:Type-driven transformation]]: ''Cut.hs''\n* [[101feature:Structure-driven query]]: ''Depth.hs''\n* [[101feature:Global invariant]]: ''Precedence.hs''\n\nModule \"Deriving.hs\" hosts \"deriving\" clauses for the type classes \"Eq\", ''Read\", ''Show'', ''Typeable'', and ''Data''\nof the data types for companies. In this manner, structural equality, [[closed serialization]], and [[SYB]] style of generic programming are enabled.\n\nModule ''Main.hs'' collects a few test scenarios.", "usage": "The Haskell module ''Main'' has to be consulted with GHCi, and the ''main'' function has to be applied so that output for the test scenarios is produced. The ''expected'' output is available through the file ''baseline''. There is a ''Makefile'' with a target ''test'' for [[test automation]].", "technologies": [{"type": "Technology", "name": "GHCi"}], "type": "Implementation", "motivation_links": [{"type": "Concept", "name": "generic_programming"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "SYB"}, {"type": "Concept", "name": "generic_function"}, {"type": "Concept", "name": "SYB"}, {"type": "Implementation", "name": "haskell"}, {"type": "Concept", "name": "SYB"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "StructureADASHdriven_query"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Type_hierarchy"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Serialization"}]}, "moose": {"usage_links": [], "motivation": "", "name": "moose", "url": "http://101companies.org/index.php/101implementation:moose", "headline_links": [], "languages": [{"type": "Language", "name": "Smalltalk"}], "headline": "an implementation in a Pharo Smalltalk with the Moose capabilities.", "usage": "1. Download and open Moose:\nhttp://moosetechnology.org/download\n\n2. Drag and drop load-101companies.st into Moose\n\n3. Choose FileIn", "technologies": [{"type": "Technology", "name": "Pharo"}], "type": "Implementation", "motivation_links": [], "features": []}, "javaVisitor": {"usage_links": [{"type": "Implementation", "name": "javaInheritance"}], "motivation": "The present  implementation can be viewed as a variation on [[101implementation:javaInheritance]]. \nThe [[Visitor pattern]] is applied to implement operations modularly. \nTo this end, two visitor interfaces are defined: one for ''void'' visitors (that\ndo not return any values), another one for ''returning'' visitors (with a designated\ntype parameter for the result type). Indeed, [[101feature:Type-driven query]] calls\nfor a returning visitor whereas [[101feature:Type-driven transformation]] can be expressed as\na void visitor---if an [[impure computation]] is assumed.", "name": "javaVisitor", "illustration_links": [{"type": "Page", "name": "System"}], "url": "http://101companies.org/index.php/101implementation:javaVisitor", "headline_links": [{"type": "Concept", "name": "Visitor_pattern"}, {"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "closed_serialization"}], "illustration": "The interface for void visitors looks as follows:\n\n<syntaxhighlight lang=\"java\">\npublic interface VoidVisitor {\n\tvoid visit(Company o);\n\tvoid visit(Department o);\n\tvoid visit(Employee o);\t\t\n}\n</syntaxhighlight>\nFor comparison, here is the interface for returning visitors:\n\n<syntaxhighlight lang=\"java\">\npublic interface ReturningVisitor<R> {\n\tR visit(Company o);\n\tR visit(Department o);\n\tR visit(Employee o);\n}\n</syntaxhighlight>\nThe classes of the object model for companies do not implement\nany operations of the [[101companies:System]], but instead they\nare able to apply a given visitor to an object. For example:\n\n<syntaxhighlight lang=\"java\">\npublic class Department implements Serializable {\n\n\t// fields, getters, and setters omited\n\n\tpublic void accept(VoidVisitor v) { v.visit(this); }\n\tpublic <R> R accept(ReturningVisitor<R> v) { return v.visit(this); }\n}\n</syntaxhighlight>\nHere is the implementation of ''cut'' as a void visitor:\n\n<syntaxhighlight lang=\"java\">\npublic class Cut implements VoidVisitor {\n\n\tpublic void visit(Company o) {\n\t\tfor (Department d : o.getDepts())\n\t\t\td.accept(this);\n\t}\t\n\tpublic void visit(Department o) {\n\t\to.getManager().accept(this);\n\t\tfor (Subunit s : o.getSubunits())\n\t\t\ts.accept(this);\n\t}\n\tpublic void visit(Employee o) {\n\t\to.setSalary(o.getSalary() / 2.0d);\t\t\n\t}\t\n}\n</syntaxhighlight>", "languages": [{"type": "Language", "name": "Java"}], "headline": "modular programming with [[Visitor pattern|visitors]] in [[Language:Java]]", "architecture": "Package ''org.softlang.company'' hosts the object model for [[101feature:Tree structure]]\nand the general interfaces for void and returning visitors on companies, departments,\nand employees. Package ''org.softlang.features'' hosts implementations of the basic \noperations [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] as well as some boilerplate\ncode for [[closed serialization]]. Package ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n\nThe sample data is retrieved from the file ''sampleCompany.ser''.\n\nThe latter file was saved with [[101implementation:javaInheritance]].", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "javaInheritance"}, {"type": "Concept", "name": "Visitor_pattern"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "impure_computation"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "jaxbChoice": {"usage_links": [{"type": "Implementation", "name": "jaxbComposition"}], "motivation": "See [[101implementation:jaxbComposition]] for the overall motivation of exercising \n[[Technology:JAXB]] and arguably a simple baseline for a schema and the \ncorresponding schema-derived classes. The present implementation exercises\nan XSD choice for different kinds of subunits. The schema-derived class\nSubunit encodes the choice in an arguably sub-optimal manner (as a result\nof the lack of a good match for XSD choices in the Java type system).\nOne could expect that XSD choices (of a restricted kind) could be \ntranslated into class inheritance, but this does not happen here (and\nthis may be understandable).", "name": "jaxbChoice", "url": "http://101companies.org/index.php/101implementation:jaxbChoice", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XSD"}, {"type": "Technology", "name": "JAXB"}], "architecture_links": [{"type": "Implementation", "name": "jaxbComposition"}], "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "XSD"}, {"type": "Language", "name": "Java"}], "headline": "[[Object/XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]", "architecture": "See [[101implementation:jaxbComposition]].", "usage": "See [[101implementation:jaxbComposition]].", "technologies": [{"type": "Technology", "name": "JAXB"}, {"type": "Technology", "name": "xjc"}], "type": "Implementation", "motivation_links": [{"type": "Implementation", "name": "jaxbComposition"}, {"type": "Technology", "name": "JAXB"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "TypeADASHbased_mapping"}, {"type": "Feature", "name": "Type_generation"}]}, "javawsClient": {"usage_links": [], "motivation": "", "name": "javawsClient", "illustration_links": [], "url": "http://101companies.org/index.php/101implementation:javawsClient", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [], "illustration": "", "languages": [{"type": "Language", "name": "Java"}], "headline": "Implementing Web services in [[Language:Java]] (client side)", "architecture": "This client consumes Java Web service that provides 101companies features.", "usage": "* The implementation is provided as an Eclipse project.", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "javaScanner": {"usage_links": [], "motivation": "A simple custom-made lexer is used to process a text-based representation of companies.\nThe lexer leverages Java's basic Scanner API.\nHence, it uses a delimiter pattern to chop the input into candidate tokens;\nit then uses regular expressions to recognize specific tokens. \nThe default delimiter pattern is used: whitespace.\nThis also means that whitespace itself is not reported as a token.\n[[101feature:Type-driven query]] is implemented by means of finding token sequences \nconsisting of keyword \"salary\" followed by a number.\n(Just looking for a number would be sufficient for the situation at hand\nbecause numbers are used for salaries only, but the extra test makes the\npoint that ad hoc tests may be needed when lexers are used for data processing.)\n[[101feature:Type-driven transformation]] copies lexemes to an output stream while\nmodifying salaries and performing some ad hoc pretty printing.\nSuch a combination of lexer and pretty printing implements [[101feature:Data import]] and [[101feature:Data export]].\n\n'''Note:''' Because of the issue identified below, this is essentially a \nsuboptimal implementation. See [[101implementation:javaLexer]] for a more\nrobust lexer-based implementation in Java.", "name": "javaScanner", "url": "http://101companies.org/index.php/101implementation:javaScanner", "headline_links": [{"type": "Page", "name": "lexer"}, {"type": "Language", "name": "Java"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "[[:Category:lexer]]-based text processing in [[Language:Java]]", "issues_links": [], "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.\n** Run class ''Noop'' with JUnit to exercise positive and negative test cases for the lexer.", "technologies": [{"type": "Technology", "name": "javaADOTutilADOTScanner"}], "type": "Implementation", "motivation_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Implementation", "name": "javaLexer"}], "issues": "Given java.util.Scanner's approach to scanning with its reliance \non delimiters, it is not straightforward to support proper string literals. The problem\nis that the straightforward token delimiter, whitespace, can also occur inside\n(proper) strings. No other definition of delimiter, not even a dynamically changing\ndefinition seem to be applicable here. Hence, the present implementation simply \ndoes not allow spaces in string literals---which is clearly a major limitation.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "swing": {"usage_links": [], "motivation": "Specifically, the GUI provides the following gestures:\n* Navigate hierarchical structure of departmental nesting.\n* Edit all fields of types string and number.", "name": "swing", "url": "http://101companies.org/index.php/101implementation:swing", "headline_links": [{"type": "Technology", "name": "Swing"}], "architecture_links": [{"type": "Implementation", "name": "javaComposition"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "provide interaction on companies by means of [[Technology:Swing]]", "architecture": "The implementation uses a poorman's MVC architecture.\nIt is based on the object model of [[101implementation:javaComposition]].\nWe do not assume any change-notification services on the model.\nThere are two views: one for departments (and companies) and another for employees.\nThe controller provides services that push effect of gestures into the model.\nThe views delegates event handlers to the controller.\nThe controller calls into the model and the view.", "usage": "Run Interaction.java to start the GUI for the sample company.", "technologies": [{"type": "Technology", "name": "Swing"}, {"type": "Technology", "name": "AWT"}], "type": "Implementation", "motivation_links": [], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Exploration"}]}, "spreadsheet": {"usage_links": [], "motivation": "[[Technology:spreadsheet]] (e.g. [[Technology:MicrosoftExcel]], [[Technology:OpenOfficeCalc]] , or [[Technology:GoogleSpreadsheet]] are very commonly in data management.\n\nThis implementations aims to show \n* how the data model of the 101 companies can be flattened in one table\n* how a trivial formulas can be used to implement the [[101feature:Sum]] and [[101feature:Type-driven transformation]] features.\n* how more sophisticated formulas can be used to deal with tree-based features including the [[101feature:depth]] and the [[101feature: ]] decreasing salary constraint over the hierarchy.\n* how such programs provide for free a rather user interface to edit the data, and to visualize them.", "name": "spreadsheet", "headline_links": [{"type": "Technology", "name": "spreadsheet"}, {"type": "Language", "name": "spreadsheetLanguage"}], "url": "http://101companies.org/index.php/101implementation:spreadsheet", "illustration_links": [], "architecture_links": [], "illustration": "", "languages": [], "headline": "Using a [[Technology:spreadsheet]] with a flat structure and formulas expressed in terms of a [[Language:spreadsheetLanguage]].", "architecture": "", "issues_links": [], "usage": "The file meganalysis.xls can be open either via Microsoft Excel, OpenOffice \nThe file is protected so by default you can only change the data.", "technologies": [{"type": "Technology", "name": "MicrosoftExcel"}, {"type": "Technology", "name": "OpenOfficeCalc"}, {"type": "Technology", "name": "GoogleSpreadsheet"}], "type": "Implementation", "motivation_links": [{"type": "Technology", "name": "spreadsheet"}, {"type": "Technology", "name": "MicrosoftExcel"}, {"type": "Technology", "name": "OpenOfficeCalc"}, {"type": "Technology", "name": "GoogleSpreadsheet"}, {"type": "Feature", "name": "Sum"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "depth"}, {"type": "Feature", "name": "_"}], "issues": "* It is assumed that names of departement (the same for person) are key, that is distinct for each other.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "StructureADASHdriven_query"}, {"type": "Feature", "name": "Data_export"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Global_invariant"}, {"type": "Feature", "name": "Logging"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "AttributeEditing"}, {"type": "Feature", "name": "UndoRedo"}]}, "wpf": {"usage_links": [], "motivation": "", "name": "wpf", "url": "http://101companies.org/index.php/101implementation:wpf", "headline_links": [{"type": "Technology", "name": "WPF"}], "architecture_links": [], "languages": [{"type": "Language", "name": "CSharp"}], "headline": "an implementation with UI in [[Technology:WPF]]", "architecture": "", "usage": "", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "php": {"motivation": "", "name": "php", "url": "http://101companies.org/index.php/101implementation:php", "headline_links": [{"type": "Language", "name": "PHP"}, {"type": "Language", "name": "MySQL"}], "languages": [], "headline": "an implementation in [[Language:PHP]] using [[Language:MySQL]]", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "javaInheritance": {"usage_links": [], "motivation": "Basic style of [[:Category:OO programming]] is applied. A simple [[object model]]\nfor companies is provided with [[method]]s to implement a [[query]] for\ntotaling salaries and a [[:Category:transformation]] for cutting salaries.\nIn fact, [[class inheritance]] is leveraged, but see [[101implementation:javaComposition]] \nfor a variation that uses [[object composition]]. Because of the use of class\ninheritance, the aforementioned methods are actually [[virtual method]]s.\n[[Closed serialization]] in the sense of [[Technology:Object Streams]] \nis enabled by means of the [[Marker interface pattern|marker interface]]\n''Serializable'', which is applied to the [[:Category:class]]es of the object model \nfor companies.", "name": "javaInheritance", "url": "http://101companies.org/index.php/101implementation:javaInheritance", "headline_links": [{"type": "Language", "name": "Java"}], "architecture_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "languages": [{"type": "Language", "name": "Java"}], "headline": "basic OO programming in [[Language:Java]]", "architecture": "Package ''org.softlang.company'' hosts the object model for companies\nwith virtual methods for [[101feature:Type-driven query]] and [[101feature:Type-driven transformation]]. Some \nboilerplate code for serialization is implemented in the class \n''org.softlang.features.Serialization'' (see methods ''readObject'' and ''writeObject'').\nPackage ''org.softlang.tests'' hosts JUnit tests; see below.", "usage": "* The implementation is provided as an Eclipse project.\n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available as the package ''org.softlang.tests''.\n** Run class ''Basics'' with JUnit to exercise basic features.\n** Run class ''Serialization'' with JUnit to exercise serialization.", "technologies": [], "type": "Implementation", "motivation_links": [{"type": "Page", "name": "OO_programming"}, {"type": "Concept", "name": "object_model"}, {"type": "Concept", "name": "method"}, {"type": "Concept", "name": "query"}, {"type": "Page", "name": "transformation"}, {"type": "Concept", "name": "class_inheritance"}, {"type": "Implementation", "name": "javaComposition"}, {"type": "Concept", "name": "object_composition"}, {"type": "Concept", "name": "virtual_method"}, {"type": "Concept", "name": "Closed_serialization"}, {"type": "Technology", "name": "Object_Streams"}, {"type": "Concept", "name": "Marker_interface_pattern"}, {"type": "Page", "name": "class"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}]}, "mobl": {"motivation": "", "name": "mobl", "url": "http://101companies.org/index.php/101implementation:mobl", "headline_links": [], "languages": [], "headline": "Implementation of 101 companies in mobl (http://mobl-lang.org). ", "technologies": [], "type": "Implementation", "motivation_links": [], "features": []}, "dom": {"usage_links": [], "motivation": "Companies are represented in [[Language:XML]] and the object model of [[Technology:DOM]] is used to represent and process XML documents [[In-memory XML processing|in memory]]. In particular,  operations on companies are implemented in Java on top of DOM objects. Such objects are easily queried---as needed for [[101feature:Type-driven query]]. As DOM objects also mutable, [[101feature:Type-driven transformation]] is implemented as an \n[[impure function]].", "name": "dom", "url": "http://101companies.org/index.php/101implementation:dom", "headline_links": [{"type": "Concept", "name": "inADASHmemory_XML_processing"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "DOM"}], "illustration": "Consider the following DOM-based implementation of ''cut'':\n\n<syntaxhighlight lang=\"java\">\npublic class Cut {\n   public static void cut(Document doc) {\n      NodeList nodelist = doc.getElementsByTagName(\"salary\");\n      for (int i=0; i<nodelist.getLength(); i++) {\n         Element elem = (Element)nodelist.item(i);\n         double value = parseDouble(elem.getTextContent());\n         elem.setTextContent(Double.toString(value / 2));\n      }\n   }\n}\n</syntaxhighlight>\nThat is, the method receives an in-memory XML document which it queries with the\ndescendant axis (see ''getElementsByTagName'') so that all salary elements are collected\nin a ''NodeList'' which is processed by a regular loop such that the text content\nof each salary element is modified to reflect a cut in half.", "languages": [{"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}], "headline": "[[in-memory XML processing]] in [[Language:Java]] with [[Technology:DOM]]", "illustration_links": [], "issues_links": [], "usage": "* The implementation is provided as an Eclipse project. \n* Hence, open the project with Eclipse; this will also build the project.\n* There are JUnit tests available in the package ''org.softlang.tests''.\n** Run class ''Operations'' with JUnit to exercise basic operations.", "technologies": [{"type": "Technology", "name": "JAXP"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "XML"}, {"type": "Technology", "name": "DOM"}, {"type": "Concept", "name": "InADASHmemory_XML_processing"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Concept", "name": "impure_function"}], "issues": "* DOM-based validation shall be demonstrated some day.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}]}, "simpleAndroid": {"usage_links": [{"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}, {"type": "Concept", "name": "Android_project_"}], "motivation": "The implementation demonstrates basic style of [[Language:Android]] programming using the [[Technology:Android_SDK]] and the [[Technology:ADT]]. The Application is programmed in a way such that [[101feature:Touch_control]] is used exlusivly to [[101feature:Exploration | explore]] the company structure.", "name": "simpleAndroid", "illustration_links": [{"type": "Concept", "name": "Activity_"}, {"type": "Concept", "name": "Listener_"}, {"type": "Concept", "name": "Intent"}, {"type": "Concept", "name": "Activity"}, {"type": "Concept", "name": "Intent"}, {"type": "Concept", "name": "Activity"}, {"type": "Concept", "name": "Intent"}, {"type": "Concept", "name": "Toast"}, {"type": "Concept", "name": "Adapter_"}, {"type": "Concept", "name": "Adapter_"}, {"type": "Concept", "name": "Adapter_"}, {"type": "Concept", "name": "Activity"}, {"type": "Concept", "name": "Listener_"}], "url": "http://101companies.org/index.php/101implementation:simpleAndroid", "headline_links": [{"type": "Language", "name": "Android"}], "architecture_links": [{"type": "Concept", "name": "Layout_"}, {"type": "Concept", "name": "Activity_"}], "illustration": "=== The Android Manifest ===\n\n<syntaxhighlight lang=\"xml\" source=\"\" line>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.softlang.simpleAndroid\"\n    ...\n    <uses-sdk android:minSdkVersion=\"10\" />\n\n    <application\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\" >\n        <activity\n            android:name=\".SimpleAndroidActivity\" ... >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        \n        <activity android:name=\".CompanyClickActivity\"></activity>\n        ...\n    </application>\n</manifest>\n</syntaxhighlight>\nThe Android Manifest have all [[Activity | activities]], permissions and all other Basic Settings of the Application.\n\n=== Button & ClickListener ===\n\nIn the Following we explain how a Button is designed and how functionality can be assigned.\n\n==== Button ====\n\n<syntaxhighlight lang=\"xml\" source=\"\" line>\n    <Button\n        android:id=\"@+id/bt_loadtestCompany\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"50\"\n        android:text=\"@string/load_test_company\"\n        android:onClick=\"onButtonClick\"\n        android:textSize=\"15dp\" \n        android:padding=\"20dp\" />\n</syntaxhighlight>\nIn line two we assign the ID to the Button. in line seven we define the [[Listener | OnClickListener]] for the Button.\n\n==== ClickListener ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\n    public void onButtonClick(View v) {\n\t\tswitch(v.getId()){\n\t\tcase R.id.bt_Company:\n\t\t\tif (loadedCompany != null){\n\t\t\t\tIntent i = new Intent(this,CompanyClickActivity.class);\n\t\t\t\ti.putExtra(\"Company\",loadedCompany);\n\t\t\t\tstartActivity(i);\n\t\t\t}else {\n\t\t\t\tToast.makeText(this, R.string.company_not_loaded, Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t\tbreak;\n       }\n</syntaxhighlight>\nIf the Button with the ID \"R.id.bt_Company\" is clicked then in line five we create an new [[Intent]] with the name of the [[Activity]] which we want to start. In line six we put the company object into the [[Intent]] with a name (key). In line seven the new [[Activity]] with the informations of the [[Intent]] will be start.\n\nIf the company object is not loaded then the Activity creates a [[Toast]] and display it on the screen.\n\n=== ListView & Adapter ===\n\nIn this section we explain how a ListView is designed and how to use an [[Adapter | ListAdapter]].\n\n==== ListView ====\n\n<syntaxhighlight lang=\"xml\" source=\"\" line>\n    <ListView\n        android:id=\"@+id/android:list\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" >\n    </ListView>\n</syntaxhighlight>\nIn line two we have the standart ID for a ListView in Android.\n\n==== Adapter ====\n\n<syntaxhighlight lang=\"java\" source=\"\" line>\n...\n        adapter = new ArrayAdapter<String>(\tthis,\n\t\t\t\t\t\t\tandroid.R.layout.simple_list_item_1,\n\t\t\t\t\t\t\tDeptsString);\n\tsetListAdapter(adapter);\t\n...\n\t@Override\n\tprotected void onListItemClick(ListView l, View v, int position, long id) {\n\t\tsuper.onListItemClick(l, v, position, id);\n\t\tIntent i = new Intent(this, DepartmentClickActivity.class);\n\t\ti.putExtra(\"Department\", company.getDepts().get(position));\n\t\ti.putExtra(\"Company\", company);\n\t\tstartActivity(i);\n\t}\t\n</syntaxhighlight>\nThe names of the departments are in an Array of String \"DeptsString\". Android.R.layout.simple_list_item_1 is a standard design of Listelements. With these informations we generate an [[Adapter | ArrayAdapter]] and set the [[Adapter | ListAdapter]] of the [[Activity]] with \"setListAdapter(adapter)\".\n\nThe [[Listener | onListItemClick-Listener]] gives each element a functionality.", "languages": [{"type": "Language", "name": "Android"}, {"type": "Language", "name": "Java"}, {"type": "Language", "name": "XML"}], "headline": "Basic [[Language:Android]] programming", "architecture": "In the package ''org.softlang.company'' we define the Object-Model of the Company.\nIn [this!!res/values/strings.xml strings.xml] we specify the Strings of the Application.\nIn [this!!res/layout layout] we define various [[Layout | Layouts]] of the different Views.\nWe implement the [[Activity | activities]] in the package ''org.softlang.simpleAndroid''.", "usage": "* You need the [http://developer.android.com/sdk/index.html Android SDK Manager] to instal the [[Technology:Android_SDK]] (API 10)\n* Instal the [[Technology:ADT]]\n* Import the Project into Eclipse\n* Run the [[Android project | Project]] as Android Application", "technologies": [{"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}], "type": "Implementation", "motivation_links": [{"type": "Language", "name": "Android"}, {"type": "Technology", "name": "Android_SDK"}, {"type": "Technology", "name": "ADT"}, {"type": "Feature", "name": "Touch_control"}, {"type": "Feature", "name": "Exploration_"}], "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "Touch_control"}, {"type": "Feature", "name": "Exploration"}]}, "egl": {"usage_links": [], "motivation": "This implementation makes the contribution of demonstrating symmetric aspects in code generation using Epsilon Generation Language for Ecore to Java code generation such that the basic features can be generated in a modular way.\n\nThis is specifically interesting for a number of reasons:\n\n1. It demonstrates basic code generation using Epsilon Generation Language and Ecore as a modelling language for basic class models.\n\n2. It demonstrates various ways of modularising code-generation templates, including aspect-oriented techniques.\n\n3. It demonstrates how aspect-oriented techniques can be used to introduce variability into the code-generation workflow---specifically, allowing to choose between different realisation of associations in the code generated without affecting any of the other parts of the code generation.", "name": "egl", "headline_links": [], "url": "http://101companies.org/index.php/101implementation:egl", "illustration_links": [], "architecture_links": [], "illustration": "The code generator demonstrated is relatively generic in that it does not contain any information specific to the 101companies example system. All the system-specific information is kept in a separate model model/101companies.ecore. This is essentially a class diagram (expressed in ECore rather than UML) of the key classes and their relationships.\n\nFrom this model, the code generators will produce Java code implementing the classes described. The code generators are kept in directory templates/ and are expressed in the Epsilon Generation Language (EGL). There are two kinds of generation templates present:\n\n* Templates for coordination of generation (e.g., templates/Associations.egl): These do not produce any code themselves, but invoke other templates for each class or association in the model given.\n\n* Templates for generating parts of individual files (e.g., templates/AssociationsOneClass.egl): These are invoked once for each file to be generated and produce all or part of that file.\n\nMore detailed information on EGL can be found at http://www.eclipse.org/epsilon/ The language basically allows generation templates to be expressed from two parts: target-language code, which will be included verbatim in the generation result, and control code, which allows navigating source models and producing text based on source-model information. The latter code can be identified easily because it is always enclosed by [% %]. So, the following code generates a basic class skeleton, assuming a variable cl of type EClass to be passed in as a parameter:\n\n<syntaxhighlight lang=\"java>\npublic class [%=cl.name%] {\n  public [%=cl.name%] () {}\n}\n</syntaxhighlight>\nMore complex code generation is possible by using more complex control structures. For example, the following code generates attributes and setters + getters (simplified from templates/AttributesOneClass.egl):\n\n<syntaxhighlight lang=\"java>\npublic class [%=cl.name%] {\n[%\n  for (attr in cl.eAllAttributes) {\n    %]\n  private [%=attr.type.name%] [%=attr.name%];\n\n  public [%=attr.type.name%] get[%=attr.name.firstToUpperCase()%] () {\n    return [%=attr.name%];\n  }\n  [%if (attr.changeable) {%]\n\n  public void set[%=attr.name.firstToUpperCase()%] ([%=attr.type.name%] [%=attr.name%]) {\n    this.[%=attr.name%] = [%=attr.name%];\n  }\n  [%}%]\n\n    [%\n  }\n%]\n}\n</syntaxhighlight>\nDirectory templates/ contains a number such templates for generating different aspects of a class's structure. In a normal use of EGL, most of these would have to be combined into one template. In this example 101companies implementation we demonstrate some more advanced modularity techniques for code generation templates. Specifically, we show two forms of modularity:\n\n1. Use of a shared library of functions to ensure consistent use of coding conventions across generation templates: CoreOps.eol contains some functions encoding how type names are derived from model information. This is imported from a range of EGL files ensuring consistent generation of types across all files generated.\n\n2. Use of symmetric aspect technology to allow separation of different features of the code generation and enable variability in code generation: We have implemented separate templates for dealing with attributes and associations. In fact, there are two sets of templates for dealing with associations. Depending on which set is used, a different implementation of associations is generated.\n\nWhich set of templates is chosen and how they are combined (where appropriate) is defined in file workflow/build.xml (which is also the file to be executed to test the example). This is a normal ANT build file, using some Epsilon-specific tasks. Notice the use of epsilon.eglRegister to invoke a generation template. This will perform the code generation described in that template and register the result against the file name indicated (in this case, the file names are specified inside the template itself). Note that you could also ask for the generation result to be output to a file directly using the epsilon.egl task instead. The template would not need to be adjusted.\n\nOnce all code has been generated and registered, epsilon.eglMerge is used to merge all code generated for the same file and to output to a file.\n\nNote that the build.xml file contains two alternate top-level targets: generate_all and generate_all_assocclasses. These generate code with different implementations of associations. Note that they both reuse the same templates for generating attribute-related code.\n\nFeature [type-driven transformation] is implemented manually in the java source files in model/src/. These are merged with the generated code by explicitly registering them using the epsilon.eglRegisterFile task.\n\nMore information about symmetric aspects for EGL is available from [1]\n\n[1] Steffen Zschaler and Awais Rashid: Towards Modular Code Generators Using Symmetric Language-Aware Aspects. In Proc. 1st Workshop on Free Composition (FREECO'11).", "languages": [{"type": "Language", "name": "Ecore"}, {"type": "Language", "name": "Java"}], "headline": "Demonstrate modular code generation using symmetric aspects in EGL for generating 101companies attributes, associations, and basic methods.", "architecture": "There are a number of folders including different components of the overall architecture. File workflow/build.xml is the overall configuration binding these components together. It has two main targets demonstrating different compositions of components (producing different implementations of associations, but otherwise identical).\n\n* Folder model/ contains the Ecore model of the 101companies scenario, with each class modelled as an EClass (implementing [Tree structure]). It also contains a number of manually written pieces of source code implementing the [Type-driven transformation] feature (folder model/src). These will be merged with the generated code.\n\n* Folder template contains the EGL templates that specify the generation. Note that some templates only serve to coordinate the invocation of other templates.\n\n* Folder src will contain the generated sources ready to be run.", "issues_links": [], "usage": "* Open Eclipse and ensure Epsilon and the symmetric AO extensions are installed. Epsilon is available as an Eclipse project from [EPSILON]. The symmetric AO extensions are available from [EPSILONLABS] and best run from source (see general documentation on how to run Eclipse plugins from source).\n\n* Import the package provided as an Eclipse project.\n\n* Execute workflow/build.xml as an Ant build file (making sure to run it in the same JRE as the Eclipse workbench). You can choose either of the first two targets; the output will differ in the way in which it handles associations.\n\n* Refresh the project and inspect the src folder. You may need to auto-format the generated files.", "technologies": [{"type": "Technology", "name": "EMF"}, {"type": "Technology", "name": "Java"}, {"type": "Technology", "name": "Epsilon_Generation_Language"}, {"type": "Technology", "name": "Ant"}], "type": "Implementation", "motivation_links": [], "issues": "* The implementation currently only supports a limited number of features. The [Type-driven transformation] feature implementation is not actually generated, but integrated from manually written code. Instead, these files could be generated from a suitable model.\n\n* Other more interesting features could be added, such as generating EJB annotations through a separate EGL template.", "features": [{"type": "Feature", "name": "Tree_structure"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Feature", "name": "Code_generation_demo"}]}}, "Feature": {"Visualization": {"name": "Visualization", "description_links": [{"type": "Page", "name": "System"}, {"type": "Page", "name": "Behavioral_101feature"}], "url": "http://101companies.org/index.php/101feature:Visualization", "headline_links": [], "implementations": [{"type": "Implementation", "name": "emftext"}, {"type": "Implementation", "name": "rascal"}], "headline": "The visualization of company data", "type": "Feature", "description": "Users of the [[101companies:System]] may want to examine the company data to gain certain insights. For instance, employees and managers may find it equally interesting to understand overall the different salaries across the company structure. Hence, the company structure may be essentially visualized as a tree where the size of the employee nodes correlates with the salary. Optionally, the department nodes may also be scaled to convey additional information such that, for example, the node's size correlates with the average salary of employees in the department. Other ideas for visualization are welcome, too.\n\n[[Category:Behavioral 101feature]]"}, "Attribute_editing": {"name": "Attribute editing", "description_links": [{"type": "Page", "name": "System"}, {"type": "Feature", "name": "Structural_editing"}], "url": "http://101companies.org/index.php/101feature:Attribute editing", "headline_links": [], "implementations": [], "headline": "UI support for editing attributes", "type": "Feature", "description": "Users of the [[101companies:System]] expect to be able to edit attributes for names, addresses, and salaries. For instance, the name of an employee may need to be change when the employee gets married. Also, the address of the employee may need to changed when the employee moves to a new house. No structural edits of the company are yet anticipated here, but see [[101feature:Structural editing]]. That is, employees cannot move, for example, from one department to another one. We also consider the status of an employee to be a manager or not as a structural property."}, "ManyADASHtoADASHmany": {"name": "Many-to-many", "description_links": [{"type": "Page", "name": "Structural_101feature"}], "url": "http://101companies.org/index.php/101feature:Many-to-many", "headline_links": [], "implementations": [], "headline": "A friend relationship between employees", "type": "Feature", "description": "TBD\n\n[[Category:Structural 101feature]]"}, "Web_UI": {"name": "Web UI", "description_links": [{"type": "Page", "name": "System"}, {"type": "Concept", "name": "Web_browser"}, {"type": "Concept", "name": "distribution"}, {"type": "Feature", "name": "Distribution"}, {"type": "Page", "name": "UI_101feature"}], "url": "http://101companies.org/index.php/101feature:Web UI", "headline_links": [], "implementations": [], "headline": "A web-based user interface", "type": "Feature", "description": "The feature applies when an implementation of the [[101companies:System]] uses a Web-based user interface subject to execution in a [[Web browser]]. Such a Web-based implementation may be a self-contained local implementation or it may rely on [[distribution]] such that it accesses remote data and operations on an appropriate server; see [[101feature:Distribution]].\n\n[[Category:UI 101feature]]"}, "Intelligent_UI": {"name": "Intelligent UI", "url": "http://101companies.org/index.php/101feature:Intelligent UI", "headline_links": [], "implementations": [], "headline": "Intelligent UI support", "type": "Feature"}, "Data_import": {"name": "Data import", "description_links": [{"type": "Page", "name": "System"}, {"type": "Page", "name": "System"}, {"type": "Feature", "name": "Data_export"}, {"type": "Concept", "name": "open_serialization"}, {"type": "Page", "name": "Behavioral_101feature"}], "url": "http://101companies.org/index.php/101feature:Data import", "headline_links": [{"type": "Concept", "name": "import"}], "implementations": [], "headline": "An [[import]] operation for company data", "type": "Feature", "description": "Users of the [[101companies:System]] may want to import data from another system. Hence, the [[101companies:System]] may need to support such import, e.g., on the grounds of XML, JSON, or a concrete syntax. See also [[101feature:Data export]]. Forms of [[open serialization]] may be used to enable import/export.\n\n[[Category:Behavioral 101feature]]"}, "Data_parallelism": {"name": "Data parallelism", "description_links": [{"type": "Page", "name": "System"}, {"type": "Concept", "name": "data_parallelism"}, {"type": "Feature", "name": "Task_parallelism"}, {"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Data parallelism", "headline_links": [{"type": "Concept", "name": "Data_parallelism"}], "implementations": [], "headline": "[[Data parallelism]] for operations on company data", "type": "Feature", "description": "The [[101companies:System]] may be subject to huge companies with millions of employees and substantial nesting of departments. The present feature applies when the system architecture scales for such company data and [[data parallelism]] is leveraged. See also [[101feature:Task parallelism]].\n\n[[Category:101execution]]"}, "Persistence": {"name": "Persistence", "description_links": [{"type": "Concept", "name": "persistence"}, {"type": "Page", "name": "System"}, {"type": "Page", "name": "101execution"}, {"type": "Feature", "name": "Serialization"}, {"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Persistence", "headline_links": [{"type": "Concept", "name": "Persistence"}], "implementations": [{"type": "Implementation", "name": "cobol"}, {"type": "Implementation", "name": "ef"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "spreadsheet"}, {"type": "Implementation", "name": "sqlServer"}, {"type": "Implementation", "name": "strutsXml"}, {"type": "Implementation", "name": "zend"}], "headline": "[[Persistence]] for company data", "type": "Feature", "description": "This feature covers the capability of [[persistence]] for the [[101companies:System]]. The feature is considered an [[:Category:101execution|execution quality]] in the sense that the system can save and re-load data for use beyond the lifetime of a specific execution instance of the system while also providing the scalability-related aspects of proper persistence. Otherwise, [[101feature:Serialization]] applies. That is, persistence is supposed to make the system specifically scale for large data volume due to lazy loading.\n\n[[Category:101execution]]"}, "Software_metrics_demo": {"name": "Software metrics demo", "description_links": [], "url": "http://101companies.org/index.php/101feature:Software metrics demo", "headline_links": [], "implementations": [], "headline": "Development of a software metrics tool", "type": "Feature", "description": "This is a software analysis-related feature for the development and demonstration of a tool for complexity metrics. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of complexity metrics, e.g., metrics based on structural properties such as number of modules, classes, or functions. Of course, the choice also depends on the programming paradigm that is chosen as a target for tool development."}, "Localization": {"name": "Localization", "url": "http://101companies.org/index.php/101feature:Localization", "headline_links": [], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}], "headline": "UI support for different languages", "type": "Feature"}, "Data_export": {"name": "Data export", "description_links": [{"type": "Page", "name": "System"}, {"type": "Page", "name": "System"}, {"type": "Feature", "name": "Data_import"}, {"type": "Concept", "name": "open_serialization"}, {"type": "Page", "name": "Behavioral_101feature"}], "url": "http://101companies.org/index.php/101feature:Data export", "headline_links": [{"type": "Concept", "name": "export"}], "implementations": [], "headline": "An [[export]] operation for company data", "type": "Feature", "description": "Users of the [[101companies:System]] may want to export data to another system. Hence, the [[101companies:System]] may need to support such export, e.g., on the grounds of XML, JSON, or a concrete syntax. See also [[101feature:Data import]]. Forms of [[open serialization]] may be used to enable import/export.\n\n[[Category:Behavioral 101feature]]"}, "Code_generation_demo": {"name": "Code generation demo", "description_links": [{"type": "Page", "name": "Mapping"}, {"type": "Page", "name": "System"}, {"type": "Feature", "name": "Type_generation"}], "url": "http://101companies.org/index.php/101feature:Code generation demo", "headline_links": [], "implementations": [], "headline": "Development of a code generation tool", "type": "Feature", "description": "This is a generative programming-related feature for the development and demonstration of a code-generation tool. The developed tool may support technological space travel (see the capability of [[:Category:Mapping]]) or some form of model-driven engineering. The tool is to be demonstrated by applying it to a suitable implementation of the [[101companies:System]] so that the [[101feature:Type generation]] is covered in this manner."}, "Wiki_analysis_demo": {"name": "Wiki analysis demo", "description_links": [], "url": "http://101companies.org/index.php/101feature:Wiki analysis demo", "headline_links": [], "implementations": [], "headline": "Demonstration of analyzing the 101wiki", "type": "Feature", "description": "TBD; see the other meta-level features for inspiration."}, "Serialization": {"name": "Serialization", "description_links": [{"type": "Page", "name": "serialization"}, {"type": "Concept", "name": "closed_serialization"}, {"type": "Page", "name": "System"}, {"type": "Page", "name": "101execution"}, {"type": "Feature", "name": "Persistence"}, {"type": "Feature", "name": "Data_import"}, {"type": "Feature", "name": "Data_export"}, {"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Serialization", "headline_links": [{"type": "Concept", "name": "Serialization"}], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "csharp"}, {"type": "Implementation", "name": "emftext"}, {"type": "Implementation", "name": "haskell"}, {"type": "Implementation", "name": "syb"}], "headline": "[[Serialization]] for company data", "type": "Feature", "description": "This feature covers the capability of [[:Category:serialization]], in fact, typically, [[closed serialization]] for the [[101companies:System]]. The feature is considered an [[:Category:101execution|execution quality]] in the sense that the system can save and re-load data for use beyond the lifetime of a specific execution instance of the system. There is the related feature [[101feature:Persistence]] which takes into account scalability-related aspects of proper persistence. Further, serialization also overlaps with the features [[101feature:Data import]] and [[101feature:Data export]] which relate more to the user perspective of being able to import external data into the system and extract data from the system for external use.\n\n[[Category:101execution]]"}, "Program_comprehension_demo": {"name": "Program comprehension demo", "description_links": [{"type": "Page", "name": "API"}], "url": "http://101companies.org/index.php/101feature:Program comprehension demo", "headline_links": [], "implementations": [], "headline": "Development of a tool for program comprehension", "type": "Feature", "description": "This is a reverse engineering-related feature for the development and demonstration of a tool for API-related program comprehension. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of [[:Category:API]] usage, i.e., the usage of API elements such as types and methods. Of course, the exact analysis also depends on the underlying programming paradigm and platform."}, "Reusability": {"name": "Reusability", "description_links": [{"type": "Page", "name": "101design"}, {"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "Reusability"}], "url": "http://101companies.org/index.php/101feature:Reusability", "headline_links": [], "implementations": [], "headline": "Reusability for some behavior", "type": "Feature", "description": "This is a loosely defined [[:Category:101design|design quality]] of the system to support reusability for some provided features. For instance, consider a typical OO implementation of [[101feature:Type-driven query]]. Arguably, the feature is likely to be implemented in a reusable manner because other components may easily invoke the corresponding operation on a given object graph. Hence, we only speak of proper coverage of [[101feature:Reusability]] if reuse is supported through distinguished means of packaging or deployment as in the case of an implementation which is usable through SOA or as a plugin."}, "Logging": {"name": "Logging", "description_links": [{"type": "Concept", "name": "logging"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}, {"type": "Page", "name": "Behavioral_101feature"}], "url": "http://101companies.org/index.php/101feature:Logging", "headline_links": [{"type": "Concept", "name": "Logging"}], "implementations": [{"type": "Implementation", "name": "aspectJ"}, {"type": "Implementation", "name": "javaExorcism"}, {"type": "Implementation", "name": "spreadsheet"}, {"type": "Implementation", "name": "writerMonad"}], "headline": "[[Logging]] of salary changes", "type": "Feature", "description": "Users of the system may be interested in [[logging]] modifications of company data. Consider [[101feature:Type-driven transformation]] for cutting the salaries of all employees. Logging should record salary changes. Different formats of logging are conceivable. One option is track salary changes only at the lowest level of modifying individual employees. Another option is to track salary changes along with the traversal of the company tree such that sub-totals of salaries are reported before and after visiting each node in the tree. The resulting log should be written to a text file.\n\n[[Category:Behavioral 101feature]]"}, "Software_analysis_demo": {"name": "Software analysis demo", "description_links": [], "url": "http://101companies.org/index.php/101feature:Software analysis demo", "headline_links": [], "implementations": [], "headline": "Demonstration of software analysis", "type": "Feature", "description": "TBD; see the other meta-level features for inspiration."}, "Software_transformation_demo": {"name": "Software transformation demo", "description_links": [], "url": "http://101companies.org/index.php/101feature:Software transformation demo", "headline_links": [], "implementations": [], "headline": "Development of a software transformation tool", "type": "Feature", "description": "This is a reverse engineering-related feature for the development and demonstration of a tool for API-related program comprehension. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of API usage, i.e., the usage of API elements such as types and methods. Of course, the exact analysis also depends on the underlying programming paradigm and platform.\n\nThis is a reengineering-related feature for the development and demonstration of a tool for coupled software transformation to help with software evolution. The developed tool serves the automated transformation of an implementation's sources or other artifacts with the specific challenge of dealing with coupled artifacts. That is, there are various conceivable reengineering scenarios, but we are interested here specifically in a scenario such that multiple, related artifacts of different kinds must be modified in a consistent manner by a so-called coupled transformation. Of course, the exact transformation also depends on the underlying programming paradigm and platform."}, "Tree_structure": {"name": "Tree structure", "description_links": [{"type": "Page", "name": "inheritance"}, {"type": "Concept", "name": "containment_relationship"}, {"type": "Concept", "name": "reference_relationship"}, {"type": "Feature", "name": "Graph_structure"}, {"type": "Concept", "name": "Composite_pattern"}], "url": "http://101companies.org/index.php/101feature:Tree structure", "headline_links": [{"type": "Concept", "name": "Tree"}], "illustration": "Here is an illustrative description of a company called \"meganalysis\".\n\nWe use some concrete syntax to render the structure.\n\nSome [[101companies:Implementations]] support (a variant of) this concrete syntax.\n\nSee [[101implementation:antlrAcceptor]] for example.\n\n<pre>\ncompany \"meganalysis\" {\n  department \"Research\" {\n    manager \"Craig\" {\n      address \"Redmond\"\n      salary 123456\n    }\n    employee \"Erik\" {\n      address \"Utrecht\"\n      salary 12345\n    }\n    ...\n  }\n  department \"Development\" {\n    manager \"Ray\" {\n      address \"Redmond\"\n      salary 234567\n    }\n    department \"Dev1\" { ... }\n    department \"Dev2\" { ... }\n  }\n}\n</pre>\n\nHence, there are two top-level departments \"Research\" and \"Development\". The \"Development\" department further breaks down into two sub-departments \"Dev1\" and \"Dev2\" (and possibly further). All departments have a manager. Some departments have employees. All employees have salaries. It happens that salaries decrease with the nesting level.\n\n[[Category:Structural 101feature]]", "headline": "[[Tree]]-like structure of companies and departments", "implementations": [], "illustration_links": [{"type": "Page", "name": "Implementations"}, {"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Page", "name": "Structural_101feature"}], "type": "Feature", "description": "The system must support the human resources domain in the following manner.\n\nThere are companies, departments, and employees.\n\n* Each company has a unique ''name''.\n* Each company aggregates a possibly empty list of  ''departments''.\n* Each department has a unique ''name'' across the company.\n* Each department must have a manager.\n* Each department aggregates possibly empty lists of ''employees'' and ''sub-departments''.\n* Each employee has a ''name''.\n* Employees have additional properties for ''salary'' and ''address''.\n* Each employee serves only in one position in one company.\n* Managers are employees, too.\n* All properties (names, addresses, salaries) must be not null.\n\nThis data model is interesting in so far that it immediately exercises various facets of data modeling such as properties, cardinalities, recursion, and containment. Concrete implementations may easily assume refinements of the specification, if additional facets should be covered. For instance, [[:Category:inheritance]] can be exercised by deriving managers from employees through specialization. Further, the basic model at hand essentially suggests [[containment relationship]]s (i.e., tree shape), but it is easy to involve [[reference relationship]]s; see, for example, [[101feature:Graph structure]]. Finally, the basic model and straightforward refinements are suitable for the illustration of major programming techniques and design patterns. For instance, the basic structure at hand may suggest application of the [[Composite pattern]].\n\nAdd comments:\n- 1 company versus many\n- uniqueness of employees"}, "Type_hierarchy": {"name": "Type hierarchy", "description_links": [{"type": "Page", "name": "Structural_101feature"}], "url": "http://101companies.org/index.php/101feature:Type hierarchy", "headline_links": [], "implementations": [], "headline": "A common base type for departments and employees", "type": "Feature", "description": "TBD\n\n[[Category:Structural 101feature]]"}, "Structural_editing": {"name": "Structural editing", "description_links": [], "url": "http://101companies.org/index.php/101feature:Structural editing", "headline_links": [], "implementations": [], "headline": "UI support for structural editing", "type": "Feature", "description": "=== CRUD operations ===\n\n==== Create ====\n\n* Create a department either as top-level department the company or as a sub-department of another department.\n* Create an employee in a department.\n\n==== Move ====\n\n* Move a department within the company to another parent, which is either the company or another department, \n* Move an employee to another department.\n* Change the manager of a department.\n\n==== Delete ====\n\n* Delete a department including all its direct and indirect employees and sub-departments.\n* Delete an employee.\n\n=== Miscellaneous ===\n\nSome implementations may also provide an undo capability."}, "Voice_control": {"name": "Voice control", "url": "http://101companies.org/index.php/101feature:Voice control", "headline_links": [], "implementations": [], "headline": "UI support for voice control", "type": "Feature"}, "Touch_control": {"name": "Touch control", "url": "http://101companies.org/index.php/101feature:Touch control", "headline_links": [], "implementations": [], "headline": "UI support for touch control", "type": "Feature"}, "Exploration": {"name": "Exploration", "description_links": [{"type": "Feature", "name": "TypeADASHdriven_query"}, {"type": "Feature", "name": "TypeADASHdriven_transformation"}], "url": "http://101companies.org/index.php/101feature:Exploration", "headline_links": [{"type": "Concept", "name": "GUI"}], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5indexedDatabase"}, {"type": "Implementation", "name": "html5local"}, {"type": "Implementation", "name": "html5session"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "javaTree"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "pyjamas"}, {"type": "Implementation", "name": "qt"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "simpleAndroid"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "swing"}, {"type": "Implementation", "name": "webDSL"}, {"type": "Implementation", "name": "wp7"}, {"type": "Implementation", "name": "wxHaskell"}, {"type": "Implementation", "name": "zend"}], "headline": "A basic [[GUI]] for the exploration of company data", "type": "Feature", "description": "The following description applies well to classic GUI as well as web-based GUI approaches.\n\n=== Data binding for the layer-based approach ===\n\nLabels are shown in ''italics'' in the sequel.\n\nOrder of bindings per view suggest order in the actual layout.\n\n* The Company view:\n** A labeled, read-only text field for the ''Name'' of the company.\n** A labeled, listbox for the ''Departments'' of the company.\n* The Department view:\n** A labeled, read-only text field for the ''Name'' of the department.\n** A labeled, read-only text field for the name of the department's ''Manager''.\n** A labeled, listbox for the ''Employees'' of the company.\n** A labeled, listbox for the ''Sub-departments'' of the company.\n* The Employee view:\n** A labeled, read-only text field for the ''Name'' of the employee.\n** A labeled, read-only text field for the ''Address'' of the employee.\n** A labeled, read-only text field for the ''Salary'' of the employee.\n\n=== Navigation for the layer-based approach ===\n\nNavigation in the GUI is to be supported as follows:\n\n* The Company view:\n** The ''Close Window'' handler terminates the application. \n** When selecting a department from the ''Departments'' listbox, the corresponding Department view is invoked.\n* The Department view:\n** There is a ''Back'' button that navigates back to the previous view.\n** The ''Close Window'' handler copies the action of the ''Back'' button. \n** The ''Close Window'' terminates the application. \n** When selecting an employee from the ''Employees'' listbox, the corresponding Employee view is invoked.\n** When selecting a department from the ''Sub-departments'' listbox, the corresponding Department view is invoked.\n* The Employee view:\n** There is a ''Back'' button that navigates back to the previous view.\n** The ''Close Window'' handler copies the action of the ''Back'' button. \n\nAt any point, it should be possible to ''quit'' the application in a way that is in alignment with the OS/GUI technology at hand.\n\n=== Operations ===\n\n[[101feature:Type-driven query]] and [[101feature:Type-driven transformation]] are to be supported by the GUI.\n\nFor instance, the layer-based approach may support these operations as follows:\n\n* The Company view:\n** There is a labeled, read-only text field for the company's ''Total''.\n** A ''Cut'' button is attached to the ''Total'' field.\n* The Department view:\n** There is a labeled, read-only text field for the department's ''Total''.\n** A ''Cut'' button is attached to the ''Total'' field.\n* The Employee view:\n** A ''Cut'' button is attached to the ''Salary'' field."}, "Distribution": {"name": "Distribution", "description_links": [{"type": "Concept", "name": "ClientADASHserver_architecture"}, {"type": "Concept", "name": "REST"}, {"type": "Concept", "name": "SOA"}, {"type": "Concept", "name": "RMI"}, {"type": "Page", "name": "101execution"}, {"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Distribution", "headline_links": [], "implementations": [{"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "javaRmi"}, {"type": "Implementation", "name": "jsf"}, {"type": "Implementation", "name": "rubyonrails"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "wcf"}, {"type": "Implementation", "name": "wcfRest"}, {"type": "Implementation", "name": "webDSL"}, {"type": "Implementation", "name": "zend"}], "headline": "Distribution of company data and operations", "type": "Feature", "description": "Distribution may be explained with the help of the [[Client-server architecture]]. The server is assumed to maintain company data and provide services for data access and behaviors such as totaling or cutting salaries. The client may be, for example, a GUI- or browser-based component through which the data is accessed and the services are invoked by the user. Different kinds of protocols and technologies are conceivable for setting up such a client-server architecture. For instance, client and server could communicate in a request/response manner using, for example, [[REST]]. Also, the server may be a [[SOA]]-based Web service implying calls to service on the client side. Further, server and client may use [[RMI]] to communicate with each other. The feature is considered an [[:Category:101execution|execution quality]] in the sense that the system is observably or knowingly distributed such that the system user interacts with the client whereas some of the operations and some of the data management resides on a different server side.\n\n[[Category:101execution]]"}, "TypeADASHdriven_query": {"name": "Type-driven query", "description_links": [{"type": "Concept", "name": "query"}], "url": "http://101companies.org/index.php/101feature:Type-driven query", "headline_links": [{"type": "Concept", "name": "query"}], "illustration": "Let us illustrate the feature with a SQL query to be applied to an instance of a straightforward relational schema for companies.\nThe following query uses an inner SELECT statement to determine the company ''id'' from the company ''name'' \"meganalysis\",\nwith which, in turn, it selects all employees of the company and sums up their salaries. \n\n<syntaxhighlight lang=\"sql\">\nSELECT SUM(salary) FROM employee\n WHERE cid = \n  (SELECT id FROM company\n   WHERE name = \"meganalysis\");\n</syntaxhighlight>\nThe snippet originates from [[101implementation:mySql]].\n\n[[Category:Behavioral 101feature]]", "headline": "A [[query]] for totaling the salaries of all employees", "implementations": [], "illustration_links": [{"type": "Implementation", "name": "mySql"}, {"type": "Page", "name": "Behavioral_101feature"}], "type": "Feature", "description": "The operation for totaling salaries serves as a simple example of a [[query]] on company data such that all salaries are aggregated."}, "Task_parallelism": {"name": "Task parallelism", "description_links": [{"type": "Page", "name": "System"}, {"type": "Concept", "name": "task_parallelism"}, {"type": "Concept", "name": "concurrency"}, {"type": "Feature", "name": "Data_parallelism"}, {"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Task parallelism", "headline_links": [{"type": "Concept", "name": "Task_parallelism"}], "implementations": [], "headline": "[[Task parallelism]] for operations on company data", "type": "Feature", "description": "The [[101companies:System]] may be subject to huge companies with millions of employees and substantial nesting of departments. The present feature applies when the system architecture scales for such company data and [[task parallelism]] including means of [[concurrency]] are leveraged. See also [[101feature:Data parallelism]].\n\n[[Category:101execution]]"}, "StructureADASHdriven_query": {"name": "Structure-driven query", "description_links": [{"type": "Page", "name": "Behavioral_101feature"}], "url": "http://101companies.org/index.php/101feature:Structure-driven query", "headline_links": [{"type": "Concept", "name": "query"}], "implementations": [], "headline": "A [[query]] for the depth of department nesting", "type": "Feature", "description": "* The depth of a department is 1 + the maximum of the depths of its sub-departments.\n* In particular, the depth of a department without sub-departments is 1.\n* The depth of a company is the maximum of the depths of its (immediate) departments.\n\nThis operation may be interesting in so far that it could benefit from the use of programming techniques for traversal. That is, it may be possible to implement the feature in a way that nesting of departments is determined in a structure-shy manner as opposed to an implementation that traverses the data structure intimately.\n\n[[Category:Behavioral 101feature]]"}, "Access_control": {"name": "Access control", "description_links": [{"type": "Page", "name": "101execution"}], "url": "http://101companies.org/index.php/101feature:Access control", "headline_links": [], "implementations": [], "headline": "Access control for company data", "type": "Feature", "description": "Users may differ in what data they can access in read or write mode. Basic authorization may be needed to read the company structure including names but excluding addresses and salaries. Manager-level authorization may be needed to read and write salary data of heads under a manager. Yet extra authorization may be needed to read data of all employees.\n\n[[Category:101execution]]"}, "Global_invariant": {"name": "Global invariant", "description_links": [{"type": "Page", "name": "Structural_101feature"}], "url": "http://101companies.org/index.php/101feature:Global invariant", "headline_links": [], "implementations": [], "headline": "A constraint on salaries within the company hierarchy", "type": "Feature", "description": "A manager of any department or sub-department is required to receive a salary that is higher than the salaries of all employees of the department and all sub-departments. (It is clear that this constraint is not universally adopted by companies in practice.) The constraint is interesting in so far that many type systems will not be able to model this constraint directly, but instead the constraint may need to be implemented explicitly by traversing the company structure.\n\n[[Category:Structural 101feature]]"}, "Graph_structure": {"name": "Graph structure", "description_links": [{"type": "Page", "name": "Structural_101feature"}], "url": "http://101companies.org/index.php/101feature:Graph structure", "headline_links": [], "implementations": [], "headline": "An association between mentees and mentors", "type": "Feature", "description": "* Each employee may have one associated mentor.\n* Each employee may have any number of associated mentees.\n* Mentors and mentees are employees (managers or not).\n* ''A'' is mentor of ''B'' if and only iff ''B'' is mentee of ''A''.\n* An employee cannot be a mentor of him- or herself.\n* Optional: If ''A'' is mentor of ''B'', then ''B'' must not be mentor of ''A''. \n\nThe mentoring feature is potentially interesting in so far that it implies a conceptual schema of companies that goes beyond tree shape. That is, while companies and department are decomposed in a tree-like manner, mentoring links may reach across the organizational structure. In some type systems, mentoring can be easily modeled. For instance, when composition and association relationships are distinguished (such as in UML-class diagrams), then mentees and mentors are modeled by associations. Also, in a programming language with references, mentor/mentee relationships are easily modeled. It is usually sufficient to enable mentoring in a uni-directional manner such that only the direction from mentee to mentor is navigable. The mentoring feature is also interesting in so far that it involves specific constraints on the associated employees; they constraints need to be addressed by a sufficiently expressive constraint or type system or programmatically otherwise.\n\n[[Category:Structural 101feature]]"}, "TypeADASHbased_mapping": {"name": "Type-based mapping", "description_links": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "XMLware"}, {"type": "Concept", "name": "Relationalware"}, {"type": "Concept", "name": "TypeADASHbased_mapping"}, {"type": "Concept", "name": "generic_mapping"}, {"type": "Feature", "name": "Type_generation"}, {"type": "Page", "name": "101design"}], "url": "http://101companies.org/index.php/101feature:Type-based mapping", "headline_links": [{"type": "Concept", "name": "TypeADASHbased_mapping"}], "implementations": [], "headline": "[[Type-based mapping]] for company data", "type": "Feature", "description": "It is assumed that two technological spaces are involved: the space of the programming context (e.g., [[Language:Java]] or [[Language:Haskell]]) as well as the space of external data representation (e.g., [[XMLware]] or [[Relationalware]]). [[Type-based mapping]], as opposed to [[generic mapping]], is required such that data may be mapped between both spaces in a typeful manner. The programming language types may be authored explicitly or generated automatically from a schema or a grammar. In the latter case, [[101feature:Type generation]] applies additionally.\n\n[[Category:101design]]"}, "Type_generation": {"name": "Type generation", "description_links": [{"type": "Page", "name": "101design"}, {"type": "Page", "name": "101design"}], "url": "http://101companies.org/index.php/101feature:Type generation", "headline_links": [], "implementations": [], "headline": "Generation of the types for company data", "type": "Feature", "description": "This is a [[:Category:101design|design quality]] which constrains the construction of an implementation in such a way that program generation is to be used for the derivation of the types for companies, departments, and employees from appropriate artifacts such as XML schemas, relational schemas, or grammars.\n\n[[Category:101design]]"}, "UndoASLASHredo": {"name": "Undo/redo", "description_links": [{"type": "Page", "name": "UI_101feature"}], "url": "http://101companies.org/index.php/101feature:Undo/redo", "headline_links": [], "implementations": [], "headline": "Undo/redo capability in the UI", "type": "Feature", "description": "Modifications of salaries and modifications of other attributes can be undone or redone.\n\n[[Category:UI 101feature]]"}, "Reliability": {"name": "Reliability", "description_links": [{"type": "Page", "name": "101execution"}, {"type": "Feature", "name": "Distribution"}], "url": "http://101companies.org/index.php/101feature:Reliability", "headline_links": [], "implementations": [{"type": "Implementation", "name": "erlang"}], "headline": "Reliability of the system services", "type": "Feature", "description": "This is a loosely defined [[:Category:101execution|execution quality]] of the system to be reliable or fault-tolerant in some way. For instance, suppose that [[101feature:Distribution]] is used for system architecture, then we could require that the system should function even if a server component is terminated such that the server component is automatically restarted."}, "TypeADASHdriven_transformation": {"name": "Type-driven transformation", "description_links": [{"type": "Concept", "name": "endogenous_transformation"}, {"type": "Concept", "name": "pure_function"}, {"type": "Concept", "name": "impure_function"}], "url": "http://101companies.org/index.php/101feature:Type-driven transformation", "headline_links": [{"type": "Concept", "name": "transformation"}], "illustration": "Let us illustrate the feature with a SQL query to be applied to an instance of a straightforward relational schema for companies.\nThe following statement uses an inner SELECT query to determine the company id from the company name \"meganalysis\", \nwith which, in turn, it identifies the employee records whose salaries are to be updated.\n\n<syntaxhighlight lang=\"sql\">\nUPDATE employee\n SET salary = salary / 2\n WHERE cid =\n  (SELECT id FROM company\n   WHERE name = \"meganalysis\");\n</syntaxhighlight>\nThe snippet originates from [[101implementation:mySql]].\n\n[[Category:Behavioral 101feature]]", "headline": "A [[transformation]] for a salary cut", "implementations": [], "illustration_links": [{"type": "Implementation", "name": "mySql"}, {"type": "Page", "name": "Behavioral_101feature"}], "type": "Feature", "description": "The operation for cutting salaries serves a simple example of an [[endogenous transformation]] on company data. The overall shape of a company (in terms of employees and departments at all levels) remains unchanged. The transformation is solely focused on employees, in fact, their salaries. Depending on programming language and technology, the transformation will be implemented as a [[pure function]] or an [[impure function]]. One can also vary the basic behavior of cutting the salaries of all employees, if the resulting variations are suited to demonstrate some programming techniques or characteristics of specific software technologies. For instance, more selective schemes of cutting salaries may be to only cut salaries of managers or only of those employees who are (not) directly associated with the leaf companies in the structure."}}, "Technology": {"SQL_Server": {"name": "SQL Server", "description_links": [], "url": "http://101companies.org/index.php/Technology:SQL Server", "headline_links": [], "implementations": [], "headline": "a relational model database server from Microsoft", "type": "Technology", "description": "Full name is \"Microsoft SQL Server\""}, "megalib": {"name": "megalib", "url": "http://101companies.org/index.php/Technology:megalib", "headline_links": [], "implementations": [], "headline": "megalib - php library to deal with strings, graphs, patterns, rdf, source code, etc.", "type": "Technology"}, "fcsADOTexe": {"name": "fcs.exe", "url": "http://101companies.org/index.php/Technology:fcs.exe", "headline_links": [{"type": "Language", "name": "FSharp"}, {"type": "Technology", "name": "ADOTNET"}], "implementations": [], "headline": "The [[:Language:FSharp|F#]] compiler as part of the [[:Technology:.NET|.NET]] Framework", "type": "Technology"}, "basename": {"name": "basename", "url": "http://101companies.org/index.php/Technology:basename", "headline_links": [], "implementations": [], "headline": "A standard UNIX program for filename processing", "type": "Technology"}, "MediaWikiRefactorer": {"name": "MediaWikiRefactorer", "description_links": [], "url": "http://101companies.org/index.php/Technology:MediaWikiRefactorer", "headline_links": [{"type": "Technology", "name": "MediaWiki"}], "implementations": [], "headline": "a refactoring tool for [[Technology:MediaWiki]] content", "type": "Technology", "description": "The tool currently supports advanced forms of renaming.\n\nSee the technical documentation for details."}, "Hadoop": {"name": "Hadoop", "url": "http://101companies.org/index.php/Technology:Hadoop", "headline_links": [{"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "hadoop"}], "headline": "a framework for parallel programming in [[Language:Java]]", "type": "Technology"}, "LINQ": {"name": "LINQ", "url": "http://101companies.org/index.php/Technology:LINQ", "headline_links": [], "implementations": [], "headline": ".NET Language-Integrated Query", "type": "Technology"}, "JNDI": {"name": "JNDI", "description_links": [], "url": "http://101companies.org/index.php/Technology:JNDI", "headline_links": [], "implementations": [], "headline": "support for naming and directory services in Java applications", "type": "Technology", "description": "JNDI stands for \"Java Naming and Directory Interface\"."}, "CSharpValidator": {"name": "CSharpValidator", "description_links": [{"type": "Concept", "name": "101technology"}], "url": "http://101companies.org/index.php/Technology:CSharpValidator", "headline_links": [{"type": "Language", "name": "CSharp"}], "implementations": [], "headline": "A validator for [[Language:CSharp]]", "type": "Technology", "description": "CSharpValidator is a [[101technology]]; it is a C#-specific validator. CSharpValidator essentially parses the source code; it does not attempt compilation; it does not enforce any static semantics rules. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure."}, "xsdADOTexe": {"name": "xsd.exe", "description_links": [{"type": "Technology", "name": "CLR"}, {"type": "Page", "name": "runtime"}, {"type": "Concept", "name": "ObjectASLASHXML_mapping"}], "url": "http://101companies.org/index.php/Technology:xsd.exe", "headline_links": [], "implementations": [], "headline": "", "type": "Technology", "description": "xsd.exe is a tool that generates XML schemas or [[Technology:CLR]] classes from XDR, XML, and XSD files, or from classes in a [[:Category:runtime]] assembly. The tool can be used in different reasons; one is for classes for strongly typed DataSet objects; another is plain old C# classes for  [[Object/XML mapping]] (say, XML data binding)."}, "QTCreator": {"name": "QTCreator", "url": "http://101companies.org/index.php/Technology:QTCreator", "headline_links": [{"type": "Technology", "name": "QT"}, {"type": "Language", "name": "CAPLUSAPLUS"}], "implementations": [{"type": "Implementation", "name": "qt"}], "headline": "IDE for [[Technology:QT]] and [[Language:C++]]", "type": "Technology"}, "Mozilla_Firefox": {"name": "Mozilla Firefox", "url": "http://101companies.org/index.php/Technology:Mozilla Firefox", "headline_links": [], "implementations": [], "headline": "An open source Web browser", "type": "Technology"}, "GHC": {"name": "GHC", "url": "http://101companies.org/index.php/Technology:GHC", "headline_links": [{"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "compiler"}], "implementations": [{"type": "Implementation", "name": "dph"}, {"type": "Implementation", "name": "happstack"}, {"type": "Implementation", "name": "haskellCGI"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "wxHaskell"}], "headline": "A [[Language:Haskell]] [[compiler]]", "type": "Technology"}, "GNU_make": {"name": "GNU make", "url": "http://101companies.org/index.php/Technology:GNU make", "headline_links": [], "implementations": [], "headline": "a popular build automation tool", "type": "Technology"}, "Java_collections": {"name": "Java collections", "description_links": [{"type": "Page", "name": "javaADOTutil"}], "url": "http://101companies.org/index.php/Technology:Java collections", "headline_links": [], "implementations": [], "headline": "Java's collection framework", "type": "Technology", "description": "The framework is hosted by the [[Java:java.util]] package.\n\nThe following list of types does not separate modern versus legacy types.\n\n=== Interfaces ===\n\n* Collection\t\n* Deque\n* Enumeration\n* Iterator\t\n* List\n* ListIterator\t\n* Map\n* Map.Entry\n* NavigableMap\n* NavigableSet\n* Queue\n* RandomAccess\t\n* Set\n* SortedMap\n* SortedSet\n\n=== Classes ===\n\n* AbstractCollection\n* AbstractList\n* AbstractMap\n* AbstractMap.SimpleEntry\n* AbstractMap.SimpleImmutableEntry\t\n* AbstractQueue\n* AbstractSequentialList\t\n* AbstractSet\n* ArrayDeque\n* ArrayList\n* Arrays\t\n* BitSet\t\n* Collections\t\n* Dictionary\n* EnumMap\t\n* EnumSet\n* HashMap\n* HashSet\n* Hashtable\t\n* IdentityHashMap\n* LinkedHashMap\t\n* LinkedHashSet\t\n* LinkedList\n* PriorityQueue\t\n* Properties\n* Stack\n* TreeMap\n* TreeSet\t\n* Vector\n* WeakHashMap\n\n=== Exceptions ===\n\n* ConcurrentModificationException\t\n* EmptyStackException\t\n* NoSuchElementException"}, "XmlReader": {"name": "XmlReader", "url": "http://101companies.org/index.php/Technology:XmlReader", "headline_links": [{"type": "Technology", "name": "ADOTNET"}], "implementations": [], "headline": "XmlReader is an API for [[Technology:.NET]] provides forward-only, read-only access to a stream of XML data.", "type": "Technology"}, "HDBC": {"name": "HDBC", "url": "http://101companies.org/index.php/Technology:HDBC", "headline_links": [{"type": "Concept", "name": "library"}, {"type": "Language", "name": "SQL"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}], "headline": "A [[library]] for embedded [[Language:SQL]] programming in [[Language:Haskell]]", "type": "Technology"}, "W3CValidator": {"name": "W3CValidator", "description_links": [{"type": "Concept", "name": "101technology"}], "url": "http://101companies.org/index.php/Technology:W3CValidator", "headline_links": [], "implementations": [], "headline": "A validator for multiple W3C languages", "type": "Technology", "description": "W3CValidator is a [[101technology]]; it uses the online validators that are provided by the W3C to validate several languages. The online validators can validate CSS, HTML, XHTML, SVG and MathML. The W3CValidator distinguishes the different languages by the language extension of the input file and calls the corresponding online validator. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure."}, "Dropsbox": {"name": "Dropsbox", "url": "http://101companies.org/index.php/Technology:Dropsbox", "headline_links": [], "implementations": [], "headline": "DropsBox (Dresden Open Software Toolbox)", "type": "Technology"}, "wxHaskell": {"name": "wxHaskell", "url": "http://101companies.org/index.php/Technology:wxHaskell", "headline_links": [{"type": "Technology", "name": "wxWidgets"}, {"type": "Concept", "name": "GUI"}, {"type": "Concept", "name": "library"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "wxHaskell"}], "headline": "A [[Technology:wxWidgets]]-based [[GUI]] [[library]] for [[Language:Haskell]] ", "type": "Technology"}, "XalanADASHJava": {"name": "Xalan-Java", "url": "http://101companies.org/index.php/Technology:Xalan-Java", "headline_links": [{"type": "Language", "name": "XPath"}, {"type": "Language", "name": "XSLT"}, {"type": "Technology", "name": "JAXP"}], "implementations": [], "headline": "implementations of [[Language:XPath]] and [[Language:XSLT]] languages and [[Technology:JAXP]] interfaces", "type": "Technology"}, "AWT": {"name": "AWT", "url": "http://101companies.org/index.php/Technology:AWT", "headline_links": [], "implementations": [{"type": "Implementation", "name": "swing"}], "headline": "Java framework for windowing, graphics, and GUIs", "type": "Technology"}, "Sqlite": {"name": "Sqlite", "url": "http://101companies.org/index.php/Technology:Sqlite", "headline_links": [], "implementations": [], "headline": "a library, implementing a relational model database server ", "type": "Technology"}, "Ruby_on_Rails": {"name": "Ruby on Rails", "url": "http://101companies.org/index.php/Technology:Ruby on Rails", "headline_links": [{"type": "Language", "name": "Ruby"}, {"type": "Page", "name": "WebADASHapplication_framework"}], "implementations": [], "headline": "a [[Language:Ruby]] based [[Category:Web-application framework]]", "type": "Technology"}, "SAX": {"name": "SAX", "url": "http://101companies.org/index.php/Technology:SAX", "headline_links": [{"type": "Concept", "name": "pushADASHbased_XML_parsing"}], "implementations": [{"type": "Implementation", "name": "sax"}], "headline": "a simple API for [[push-based XML parsing]]", "type": "Technology"}, "JGoodies": {"name": "JGoodies", "url": "http://101companies.org/index.php/Technology:JGoodies", "headline_links": [{"type": "Technology", "name": "Swing"}], "implementations": [], "headline": "JGoodies open source libraries for [[Technology:Swing]]", "type": "Technology"}, "HTML_Parser": {"name": "HTML Parser", "url": "http://101companies.org/index.php/Technology:HTML Parser", "headline_links": [], "implementations": [], "headline": "a Java library used to parse HTML", "type": "Technology"}, "Java_Bean": {"name": "Java Bean", "url": "http://101companies.org/index.php/Technology:Java Bean", "headline_links": [{"type": "Page", "name": "Library"}, {"type": "Language", "name": "Java"}], "implementations": [], "headline": "a [[:Category:Library|library]] for creating reusable software components in [[Language:Java]]", "type": "Technology"}, "Silverlight": {"name": "Silverlight", "url": "http://101companies.org/index.php/Technology:Silverlight", "headline_links": [{"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Page", "name": "Web_browser"}, {"type": "Page", "name": "Plugin"}, {"type": "Concept", "name": "user_interface"}], "implementations": [{"type": "Implementation", "name": "silverlight"}, {"type": "Implementation", "name": "wp7"}], "headline": "A [[:Category:Web-application framework]] and a [[:Category:Web browser|web browser]] [[:Category:Plugin|plugin]] for interactive [[user interface]]s", "type": "Technology"}, "JAXB": {"name": "JAXB", "description_links": [{"type": "Technology", "name": "xjc"}, {"type": "Concept", "name": "schemaADASHfirst_mapping"}, {"type": "Language", "name": "XSD"}, {"type": "Concept", "name": "Open_serialization"}, {"type": "Language", "name": "XML"}], "url": "http://101companies.org/index.php/Technology:JAXB", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}], "headline": "an [[Object/XML mapping]] technology for [[Language:Java]]", "type": "Technology", "description": "JAXB consists of the schema compiler [[Technology:xjc]] and a library that supports un-/marshaling. \nJAXB is typically used for [[schema-first mapping]] so that one generates Java classes and interfaces\nfrom an XML schema (i.e., an element of the [[Language:XSD]] language. Arguably, JAXB can also be said to provide the capability of [[Open serialization|(open) serialization]] based on [[Language:XML]] as serialization format."}, "Heist": {"name": "Heist", "url": "http://101companies.org/index.php/Technology:Heist", "headline_links": [{"type": "Language", "name": "XHTML"}, {"type": "Concept", "name": "template_engine"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "happstack"}], "headline": "An [[Language:XHTML]] [[template engine]] for [[Language:Haskell]]", "type": "Technology"}, "Apache_Commons": {"name": "Apache Commons", "url": "http://101companies.org/index.php/Technology:Apache Commons", "headline_links": [], "implementations": [], "headline": "an Apache project on reusable Java components", "type": "Technology"}, "Eclipse": {"name": "Eclipse", "url": "http://101companies.org/index.php/Technology:Eclipse", "headline_links": [], "implementations": [{"type": "Implementation", "name": "clojureRefs"}, {"type": "Implementation", "name": "groovyDataFlowVariables"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jdom"}, {"type": "Implementation", "name": "seam"}, {"type": "Implementation", "name": "template"}, {"type": "Implementation", "name": "xtext"}], "headline": "a popular IDE for Java with many available plugins", "type": "Technology"}, "Jetty": {"name": "Jetty", "url": "http://101companies.org/index.php/Technology:Jetty", "headline_links": [], "implementations": [], "headline": "an HTTP server, an HTTP client, and javax.servlet container", "type": "Technology"}, "Servlet_API": {"name": "Servlet API", "url": "http://101companies.org/index.php/Technology:Servlet API", "headline_links": [{"type": "Technology", "name": "Java_EE"}, {"type": "Page", "name": "API"}, {"type": "Technology", "name": "HTTP"}], "implementations": [], "headline": "A [[Technology:Java EE]] [[:Category:API]] for responding ([[Technology:HTTP]]-)requests", "type": "Technology"}, "JFactExtractor": {"name": "JFactExtractor", "description_links": [{"type": "Concept", "name": "101technology"}, {"type": "Concept", "name": "fact_extractor"}, {"type": "Page", "name": "Explorer"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Language", "name": "101meta"}, {"type": "Page", "name": "Explorer"}, {"type": "Page", "name": "Explorer"}, {"type": "Language", "name": "101meta"}, {"type": "Page", "name": "Explorer"}], "url": "http://101companies.org/index.php/Technology:JFactExtractor", "headline_links": [{"type": "Concept", "name": "fact_extractor"}], "implementations": [], "headline": "A [[fact extractor]] for Java", "type": "Technology", "description": "JFactExtractor is a [[101technology]]; it is a Java-specific [[fact extractor]]. JFactExtractor extracts facts from Java source code, as it is useful, specifically, for the operation of the [[101companies:Explorer]]. At this point, facts of interest are concerned with imports and names of declarations. JFactExtractor is a simple command line tool that is applied to two arguments: a source file and a target file for storing the extracted facts in JSON.\n\nFact extraction will be explained by means of an example: the module for serialization as part of the [[101implementation:jaxbComposition]]; see [https://github.com/101companies/101repo/blob/master/contributions/jaxbComposition/org/softlang/qualities/Serialization.java] for the source code.\n\n<syntaxhighlight lang=\"javascript\">\n{\n  \"comment\" : \"\",\n  \"package\" : \"org.softlang.qualities\",\n  \"imports\" : [ \n    \"org.softlang.model\",\n    \"java.io\",\n    \"javax.xml.bind\",\n    \"javax.xml.stream\"\n  ],\n  \"declarations\" : [\n    {\n      \"class\" : \"Serialization\",\n      \"methods\" : [\n        \"initializeJaxbContext\",\n        \"serializeCompany\",\n        \"deserializeCompany\"\n      ],\n      \"attributes\": [\n      ] \n    }\n  ]\n}\n</syntaxhighlight>\nThe \"comment\" key is bound to the heading comment of the file, if any. The idea is here that code generators often leave some signature in that heading comment and hence the comment could be efficiently checked for the signature if needed, e.g., in the context of [[Language:101meta]] rules that determine files that are the output of certain technologies.\n\nThe \"package\" key is bound to the package of the file. The idea is here that packages of source files should be known so that imports can be subdivided into source and non-source imports. Source imports basically relate to the architecture of a contribution whereas non-source imports relate to the reuse within a contribution. The [[101companies:Explorer]] uses this distinction in handling packages.\n\nThe \"imports\" key is bound to a list of packages used in imports of the file. Arguably, the precise list of imports may also be useful, but this is currently not needed and served. The idea is that non-source imports should be resolved in terms of links of package names to technologies (such as APIs). The [[101companies:Explorer]] provides such links.\n\nThe \"declarations\" key is bound to a list of declarations of the file. In the case of Java, these are typically classes or interfaces. The values for these entries further break down into entries for methods declared. The idea is that such information can be conveniently used for fragment-scope tagging with features, terms, phrases, and concepts in the sense of [[Language:101meta]]. That is, the [[101companies:Explorer]] may use such information to guide interactive tagging.\n\nThe \"attributes\" key is bound to a list of annotations of the file. The values are a set of used Annotations without their qualifiers. In the case of [https://github.com/101companies/101repo/blob/master/contributions/jaxbComposition/org/softlang/model/Employee.java], the attributes would look like\n\n<syntaxhighlight lang=\"javascript\">\n{\n ...\n      \"attributes\": [\n        \"XmlType\",\n        \"XmlAccessorType\",\n        \"XmlElement\"\n      ] \n ...\n}\n</syntaxhighlight>"}, "Google_Chrome": {"name": "Google Chrome", "url": "http://101companies.org/index.php/Technology:Google Chrome", "headline_links": [], "implementations": [], "headline": "Google's Web browser", "type": "Technology"}, "JAF": {"name": "JAF", "description_links": [], "url": "http://101companies.org/index.php/Technology:JAF", "headline_links": [], "implementations": [], "headline": "a library for MIME handling and related problems", "type": "Technology", "description": "JAF stands for \"JavaBeans Activation Framework\"."}, "JAXP": {"name": "JAXP", "description_links": [{"type": "Technology", "name": "DOM"}, {"type": "Page", "name": "API_implementation"}], "url": "http://101companies.org/index.php/Technology:JAXP", "headline_links": [{"type": "Page", "name": "API"}, {"type": "Technology", "name": "Java_SE"}], "implementations": [{"type": "Implementation", "name": "dom"}, {"type": "Implementation", "name": "sax"}, {"type": "Implementation", "name": "xpathAPI"}], "headline": "a collection of XML [[:Category:API|APIs]] as part of [[Technology:Java SE]]", "type": "Technology", "description": "Among others, JAXP contains a Java binding for the platform- and language-neutral [[Technology:DOM]] API and a specific implementation.\n\nStrictly speaking, JAXP provides [[:Category:API implementation]]s."}, "Apache_Tomcat": {"name": "Apache Tomcat", "url": "http://101companies.org/index.php/Technology:Apache Tomcat", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Page", "name": "Web_server"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Servlet_API"}], "implementations": [], "headline": "A [[Language:Java]] based [[:Category:Web server|web server]] and container for [[Language:Java]] [[Technology:Servlet API|Servlets]]", "type": "Technology"}, "Zend_framework": {"name": "Zend framework", "description_links": [{"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Language", "name": "PHP"}, {"type": "Concept", "name": "MVC"}, {"type": "Page", "name": "Web_application"}], "url": "http://101companies.org/index.php/Technology:Zend framework", "headline_links": [{"type": "Concept", "name": "MVC"}, {"type": "Concept", "name": "web_programming"}, {"type": "Language", "name": "PHP"}], "implementations": [], "headline": "An [[MVC]] framework for [[web programming]] with [[Language:PHP]]", "type": "Technology", "description": "Zend framework is one of the most popular [[:Category:Web-application framework|web-application frameworks]] for [[Language:PHP]]. It offers a good infrastructure based on the [[MVC]] pattern and an amount of component libraries supporting [[:Category:Web application|web application]] development <cite>Zend2012official, FC2011ZendArcBlog</cite>."}, "JGraph": {"name": "JGraph", "url": "http://101companies.org/index.php/Technology:JGraph", "headline_links": [], "implementations": [], "headline": "a library for diagramming software", "type": "Technology"}, "log4j": {"name": "log4j", "url": "http://101companies.org/index.php/Technology:log4j", "headline_links": [], "implementations": [], "headline": "the Apache framework for logging in Java", "type": "Technology"}, "Pharo": {"name": "Pharo", "url": "http://101companies.org/index.php/Technology:Pharo", "headline_links": [{"type": "Language", "name": "Smalltalk"}], "implementations": [{"type": "Implementation", "name": "moose"}, {"type": "Implementation", "name": "seaside"}], "headline": "An open-source [[Language:Smalltalk]] environment", "type": "Technology"}, "jEdit": {"name": "jEdit", "url": "http://101companies.org/index.php/Technology:jEdit", "headline_links": [], "implementations": [], "headline": "a syntax highlighting JavaBean", "type": "Technology"}, "MongoDB": {"name": "MongoDB", "description_links": [{"type": "Language", "name": "BSON"}, {"type": "Language", "name": "BSON"}, {"type": "Technology", "name": "Data_Aggregation"}, {"type": "Language", "name": "JavaScript"}], "url": "http://101companies.org/index.php/Technology:MongoDB", "headline_links": [{"type": "Technology", "name": "DocumentADASHoriented_database"}], "implementations": [{"type": "Implementation", "name": "mongodb"}], "headline": "MongoDB is an open-source [[Technology:Document-oriented database]].", "type": "Technology", "description": "MongoDB is a database which holds documents in the JSON-like [[Language:BSON]] format.\nA single database may consist of several collections in which documents are organized.\n\nTo query a database collection, [[Language:BSON]] objects are passed which are matched against collection entries. Certain object keys may also have a special use as operators. A typical query may look like this:\n\n<syntaxhighlight lang=\"javascript\">\n> db.employees.find({\"salary\" : {\"$lt\" : 2000}});\n</syntaxhighlight>\nMongoDB also realizes [[Technology:Data Aggregation]] using an internal MapReduce implementation based on [[Language:JavaScript]]. This works on collection level by passing JavaScript functions for map and reduce steps to the database.\n\nA simple example of aggregating statistical data may be the counting of tags attributed to a blog post or product in a database collection. If the collection contains documents of the form\n\n<syntaxhighlight lang=\"javascript\">\n{..., tags: [\"foo\", \"bar\", ...], ...}\n</syntaxhighlight>\nA map function that emits a count for each tag might look like this:\n\n<syntaxhighlight lang=\"javascript\">\n> var mapfun = function() {\n  this.tags.forEach(function(tag) {\n    this.emit(tag, {\"count\" : 1});\n  });\n}\n</syntaxhighlight>\nAnd a corresponding reduce function that emits the summed up tags will look like this:\n\n<syntaxhighlight lang=\"javascript\">\n> var reducefun = function(key, values) {\n  var total = 0;\n  values.forEach(function(value) {\n    total += value.count;\n  });\n  return total;\n} \n</syntaxhighlight>\nTo run everything a MapReduce query is formulated:\n\n<syntaxhighlight lang=\"javascript\">\n> db.blogposts.mapReduce(mapfun, reducefun {\"out\" : \"output\"});\n</syntaxhighlight>\nThis will return an object containing data about the processed request and save all results to the new collection \"output\"."}, "Java_Media_APIs": {"name": "Java Media APIs", "description_links": [{"type": "Page", "name": "comADOTsunADOTimageADOTcodecADOTjpeg"}], "url": "http://101companies.org/index.php/Technology:Java Media APIs", "headline_links": [], "implementations": [], "headline": "support for advanced media capabilities on the Java platform", "type": "Technology", "description": "For instance, the package [[Java:com.sun.image.codec.jpeg]] is part of the API(s)."}, "Haskell_platform": {"name": "Haskell platform", "url": "http://101companies.org/index.php/Technology:Haskell platform", "headline_links": [], "implementations": [], "headline": "a collection of tools of libraries for program development with Haskell", "type": "Technology"}, "JUnit": {"name": "JUnit", "url": "http://101companies.org/index.php/Technology:JUnit", "headline_links": [], "implementations": [{"type": "Implementation", "name": "groovyDataFlowVariables"}], "headline": "a toolkit for unit testing for Java", "type": "Technology"}, "Visual_Studio": {"name": "Visual Studio", "url": "http://101companies.org/index.php/Technology:Visual Studio", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "EMF": {"name": "EMF", "description_links": [], "url": "http://101companies.org/index.php/Technology:EMF", "headline_links": [{"type": "Page", "name": "toolkit"}, {"type": "Concept", "name": "modelware"}], "implementations": [{"type": "Implementation", "name": "atl"}, {"type": "Implementation", "name": "egl"}, {"type": "Implementation", "name": "emfGenerative"}, {"type": "Implementation", "name": "emfReflexive"}, {"type": "Implementation", "name": "gra2mol"}], "headline": "a [[:Category:toolkit]] for [[modelware]] for the Java platform", "type": "Technology", "description": "TBD"}, "HTTP": {"name": "HTTP", "description_links": [{"type": "Page", "name": "Application_layer"}, {"type": "Page", "name": "Communications_protocol"}, {"type": "Page", "name": "Communications_protocol"}], "url": "http://101companies.org/index.php/Technology:HTTP", "headline_links": [{"type": "Page", "name": "Communications_protocol"}], "implementations": [], "headline": "a [[:Category:Communications protocol]] for message exchange in network communication", "type": "Technology", "description": "HTTP is the major [[Term:Application layer|application layer]] [[:Category:Communications protocol|protocol]] for internet communication.\n\n[[Category:Communications protocol]]"}, "Saxon": {"name": "Saxon", "url": "http://101companies.org/index.php/Technology:Saxon", "headline_links": [{"type": "Language", "name": "XSLT"}, {"type": "Language", "name": "XQuery"}], "implementations": [{"type": "Implementation", "name": "xquery"}, {"type": "Implementation", "name": "xslt"}], "headline": "an implementation of [[Language:XSLT]] and [[Language:XQuery]]", "type": "Technology"}, "JDK": {"name": "JDK", "url": "http://101companies.org/index.php/Technology:JDK", "headline_links": [], "implementations": [], "headline": "the Java Development Kit", "type": "Technology"}, "NUnit": {"name": "NUnit", "url": "http://101companies.org/index.php/Technology:NUnit", "headline_links": [], "implementations": [{"type": "Implementation", "name": "csharp"}, {"type": "Implementation", "name": "csharpAspNetMvc"}, {"type": "Implementation", "name": "csharpLinqToXml"}, {"type": "Implementation", "name": "ef"}, {"type": "Implementation", "name": "fsharp"}, {"type": "Implementation", "name": "xmlReader"}, {"type": "Implementation", "name": "xsdClasses"}, {"type": "Implementation", "name": "xsdDataSet"}], "headline": "", "type": "Technology"}, "XMLValidator": {"name": "XMLValidator", "description_links": [{"type": "Concept", "name": "101technology"}], "url": "http://101companies.org/index.php/Technology:XMLValidator", "headline_links": [{"type": "Language", "name": "XML"}], "implementations": [], "headline": "A validator for [[Language:XML]]", "type": "Technology", "description": "XMLValidator is a [[101technology]]; it is a XML-specific validator. XMLValidator relies on System.Xml API to report errors in the XML document. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure."}, "MySQL": {"name": "MySQL", "url": "http://101companies.org/index.php/Technology:MySQL", "headline_links": [], "implementations": [{"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "jdbc"}, {"type": "Implementation", "name": "jdbc2"}, {"type": "Implementation", "name": "mySql"}], "headline": "A relational database management system", "type": "Technology"}, "GraphViz": {"name": "GraphViz", "url": "http://101companies.org/index.php/Technology:GraphViz", "headline_links": [], "implementations": [{"type": "Implementation", "name": "jgralab"}], "headline": "A toolkit for graph visualization", "type": "Technology"}, "JDT": {"name": "JDT", "description_links": [], "url": "http://101companies.org/index.php/Technology:JDT", "headline_links": [], "implementations": [], "headline": "(an Eclipse project providing) Java development tools for Eclipse", "type": "Technology", "description": "JDT stands for Java Development Tools."}, "Internet_Explorer": {"name": "Internet Explorer", "url": "http://101companies.org/index.php/Technology:Internet Explorer", "headline_links": [], "implementations": [], "headline": "Microsoft's Web browser", "type": "Technology"}, "dirname": {"name": "dirname", "url": "http://101companies.org/index.php/Technology:dirname", "headline_links": [], "implementations": [], "headline": "A standard UNIX program for filename processing", "type": "Technology"}, "Hamcrest": {"name": "Hamcrest", "url": "http://101companies.org/index.php/Technology:Hamcrest", "headline_links": [], "implementations": [], "headline": "a library for building test expressions", "type": "Technology"}, "Hibernate": {"name": "Hibernate", "url": "http://101companies.org/index.php/Technology:Hibernate", "headline_links": [{"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}, {"type": "Implementation", "name": "jsf"}], "headline": "an [[Object/Relational mapping]] technology for [[Language:Java]]", "type": "Technology"}, "LINQ_to_SQL": {"name": "LINQ to SQL", "url": "http://101companies.org/index.php/Technology:LINQ to SQL", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "ORO": {"name": "ORO", "url": "http://101companies.org/index.php/Technology:ORO", "headline_links": [], "implementations": [], "headline": "(a retired Jakarta project for) a text processing library for Java", "type": "Technology"}, "ASP_ADOTNET_MVC": {"name": "ASP .NET MVC", "url": "http://101companies.org/index.php/Technology:ASP .NET MVC", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "TCP": {"name": "TCP", "description_links": [{"type": "Page", "name": "Transport_layer"}, {"type": "Page", "name": "Communications_protocol"}, {"type": "Page", "name": "Network"}], "url": "http://101companies.org/index.php/Technology:TCP", "headline_links": [{"type": "Page", "name": "Communications_protocol"}], "implementations": [], "headline": "a [[:Category:Communications protocol]] for message exchange in network communication", "type": "Technology", "description": "The Transmission Control Protocol is the major [[Term:Transport layer|transport layer]] [[:Category:Communications protocol|protocol]] for data transfer in computer [[Term:Network|networks]]."}, "GeSHi": {"name": "GeSHi", "url": "http://101companies.org/index.php/Technology:GeSHi", "headline_links": [], "implementations": [], "headline": "GeSHi - Generic Syntax Highlighter", "type": "Technology"}, "Maven": {"name": "Maven", "url": "http://101companies.org/index.php/Technology:Maven", "headline_links": [{"type": "Page", "name": "Build_tool"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "strutsAnnotation"}], "headline": "A [[:Category:Build tool|build tool]] for [[Language:Java]] with enhanced dependency management", "type": "Technology"}, "JAMA": {"name": "JAMA", "url": "http://101companies.org/index.php/Technology:JAMA", "headline_links": [], "implementations": [], "headline": "a basic linear algebra library for Java", "type": "Technology"}, "Safari": {"name": "Safari", "url": "http://101companies.org/index.php/Technology:Safari", "headline_links": [], "implementations": [], "headline": "Apple's Web browser", "type": "Technology"}, "XmlFragmentLocator": {"name": "XmlFragmentLocator", "description_links": [{"type": "Page", "name": "Explorer"}], "url": "http://101companies.org/index.php/Technology:XmlFragmentLocator", "headline_links": [], "implementations": [], "headline": "an XPath-based fragment locator for XML", "type": "Technology", "description": "XmlFragmentLocator is a part of the [[101companies:Explorer]]; it is a XPath-based, XML-specific tool for fragment location. That is, the technology supports the XPath-based location of a fragment in an XML document. The input/output behavior of XmlFragmentLocator is the following:\n\n* Input:\n** an XML document\n** an XPath-based fragment description\n* Output:\n** the line range of the located XML fragment\n\nXmlFragmentLocator leverages XPath for the description of fragments and it uses JSON for representing the derived line ranges. Consider, for example, the following XML document (which is, in fact, an XML schema):\n\n<pre>\n<xs:schema xmlns=\"http://www.softlang.org/company.xsd\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\" targetNamespace=\"http://www.softlang.org/company.xsd\">\n\n <xs:element name=\"company\">\n  <xs:complexType>\n   <xs:sequence>\n    <xs:element ref=\"name\"/>\n    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" ref=\"department\"/>\n   </xs:sequence>\n  </xs:complexType>\n </xs:element>\n\n <xs:element name=\"department\">\n  <xs:complexType>\n   <xs:sequence>\n    <xs:element ref=\"name\"/>\n    <xs:element name=\"manager\" type=\"employee\"/>\n    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" ref=\"department\"/>\n    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"employee\" type=\"employee\"/>\n   </xs:sequence>\n  </xs:complexType>\n </xs:element>   \n\n <xs:complexType name=\"employee\">\n  <xs:sequence>\n   <xs:element ref=\"name\"/>\n   <xs:element ref=\"address\"/>\n   <xs:element ref=\"salary\"/>\n  </xs:sequence>\n </xs:complexType>\n\n <xs:element name=\"name\" type=\"xs:string\"/>\n <xs:element name=\"address\" type=\"xs:string\"/>\n <xs:element name=\"salary\" type=\"xs:double\"/>\n</xs:schema>\n</pre>\n\nThe following XPath expression locates the element declaration with name \"department\":\n\n<pre>\n/xs:schema/xs:element[@name='department']\n</pre>\n\nThe line range for the located fragment is this:\n\n<pre>\n{\"from\":13,\"to\":22}\n</pre>\n\nXPath expressions for fragment descriptions are supposed to make proper use of namespace-qualified names; see \"xs:schema\" and \"xs:element\". To simplify the use of XML namespaces, the top-level prefix declarations of the input document are extracted and made available during the evaluation of the XPath expression. In this manner, in practice, no namespaces need to be specified, but instead the prefixes of the underlying document are to be used; see \"xs\" in the example.\n\nThe following situations may be encountered in fragment location:\n\n* The XPath expression evaluates to a single XML element node. In this case, the \"from\" line should be the line of the start tag of the identified element; the \"to\" line should be the line of the end tag of the identified element. \n* The XPath expression evaluates to a non-empty sequence of XML elements. For simplicity, it is assumed here that the sequence is readily in document order. (Without this assumption, the following convention is less useful.) In this case, the \"from\" line should be the line of the start tag of the first element in the sequence; the \"to\" line should be the line of the end tag of the last element in the sequence.\n* In all other cases, fragment location is defined to be unsuccessful."}, "ajc": {"name": "ajc", "url": "http://101companies.org/index.php/Technology:ajc", "headline_links": [{"type": "Language", "name": "AspectJ"}, {"type": "Technology", "name": "AJDT"}], "implementations": [{"type": "Implementation", "name": "aspectJ"}], "headline": "the [[Language:AspectJ]] compiler as part of [[Technology:AJDT]]", "type": "Technology"}, "JMF": {"name": "JMF", "url": "http://101companies.org/index.php/Technology:JMF", "headline_links": [], "implementations": [], "headline": "a Java library for handling audio, video and other time-based media", "type": "Technology"}, "OSCache": {"name": "OSCache", "url": "http://101companies.org/index.php/Technology:OSCache", "headline_links": [], "implementations": [], "headline": "a framework for caching content in web applications", "type": "Technology"}, "DBDirect": {"name": "DBDirect", "url": "http://101companies.org/index.php/Technology:DBDirect", "headline_links": [{"type": "Concept", "name": "program_generator"}, {"type": "Language", "name": "Haskell"}, {"type": "Concept", "name": "database"}], "implementations": [{"type": "Implementation", "name": "haskellDB"}], "headline": "A [[program generator]] that derives [[Language:Haskell]] types from [[database]] schemas", "type": "Technology"}, "JFragmentLocator": {"name": "JFragmentLocator", "description_links": [{"type": "Page", "name": "Explorer"}], "url": "http://101companies.org/index.php/Technology:JFragmentLocator", "headline_links": [], "implementations": [], "headline": "a fragment locator for Java", "type": "Technology", "description": "JFragmentLocator is a part of the [[101companies:Explorer]]; it is a Java-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in Java compilation unit. The input/output behavior of JFragmentLocator is the following:\n\n* Input:\n** a Java compilation unit\n** a fragment description\n* Output:\n** the line range of the located fragment\n\nJFragmentLocator leverages JSON for the description of fragments and the derived line ranges. Consider, for example, the following Java compilation unit:\n\n<pre>\npackage org.softlang.trivia;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World\");\n    }\n\n}\n</pre>\n\nThe following fragment description locates the main method of the class:\n\n<pre>\n{ \n \"method\" : \"main\"\n}\n</pre>\n\nIf we wanted to make explicit the hosting class (which may be necessary in case there are multiple classes in the same compilation unit), then the description may take the following form instead:\n\n<pre>\n{\n \"class\" : \"HelloWorld\", \n \"method\" : \"main\"\n}\n</pre>\n\nThe class name is unqualified in this example. It may also be desirable to explicitly specify the package qualifier of the class. Hence, the fragment description may also take the following form:\n\n<pre>\n{\n \"package\" : \"org.softlang.trivia\",\n \"class\" : \"HelloWorld\", \n \"method\" : \"main\"\n}\n</pre>\n\nFurther, the method of interest may be overloaded. In this case, some sort of overloading resolution is needed. A simple, position-oriented approach is assumed here. That is, the 0-based index of the intended overload can be defined. In the example, the main method is not overloaded, but we can still demonstrate the extra description element at hand:\n\n<pre>\n{\n \"package\" : \"org.softlang.trivia\",\n \"class\" : \"HelloWorld\", \n \"method\" : \"main\",\n \"overload\" : \"0\"\n}\n</pre>\n\nAll fragment descriptions locate the same fragment: the line range 3-5. Thus:\n\n<pre>\n{\"to\": 3, \"from\": 5}\n</pre>\n\nIt may also be necessary to deal with fields, nested classes, anonymous classes, enum types, interfaces, statement sequences, expressions, and yet other language elements. The description of such fragments is not described here, but we refer to the implementation."}, "GReTL": {"name": "GReTL", "url": "http://101companies.org/index.php/Technology:GReTL", "headline_links": [{"type": "Language", "name": "GReTL"}], "implementations": [{"type": "Implementation", "name": "jgralab"}], "headline": "an implementation of the [[Language:GReTL]] language", "type": "Technology"}, "DLL": {"name": "DLL", "url": "http://101companies.org/index.php/Technology:DLL", "headline_links": [{"type": "Concept", "name": "shared_library"}], "implementations": [], "headline": "Microsoft's implementation of the [[shared library]] concept", "type": "Technology"}, "Lucene": {"name": "Lucene", "url": "http://101companies.org/index.php/Technology:Lucene", "headline_links": [], "implementations": [], "headline": "(an Apache project for) the development of open-source search software", "type": "Technology"}, "javaADOTutilADOTScanner": {"name": "java.util.Scanner", "url": "http://101companies.org/index.php/Technology:java.util.Scanner", "headline_links": [{"type": "Language", "name": "Java"}], "implementations": [], "headline": "a library for scanning text in [[Language:Java]]", "type": "Technology"}, "JSP": {"name": "JSP", "description_links": [{"type": "Language", "name": "HTML"}, {"type": "Language", "name": "XML"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Page", "name": "Template_engine"}], "url": "http://101companies.org/index.php/Technology:JSP", "headline_links": [{"type": "Page", "name": "template_engine"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "XML"}], "implementations": [], "headline": "a [[:Category:template engine]] for dynamically generated [[Language:HTML]]/[[Language:XML]] pages", "type": "Technology", "description": "JavaServer Pages (JSP) offer the possibility to dynamically generate web pages based on [[Language:HTML]] and [[Language:XML]] in combination with [[Language:Java]] [[Technology:Servlet API|Servlets]] <cite>Wiki2012JSP</cite>.\n\n[[Category:Template engine]]"}, "LINQ_to_XML": {"name": "LINQ to XML", "url": "http://101companies.org/index.php/Technology:LINQ to XML", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "Glade": {"name": "Glade", "url": "http://101companies.org/index.php/Technology:Glade", "headline_links": [{"type": "Concept", "name": "user_interface"}], "implementations": [], "headline": "a [[user interface]] designer", "type": "Technology"}, "Swing": {"name": "Swing", "description_links": [{"type": "Page", "name": "javaxADOTswing"}], "url": "http://101companies.org/index.php/Technology:Swing", "headline_links": [], "implementations": [{"type": "Implementation", "name": "javaTree"}, {"type": "Implementation", "name": "swing"}], "headline": "Java's primary primary GUI library", "type": "Technology", "description": "See also the major package [[Java:javax.swing]] of the library.\n\nNote that [http://www.iam.ubc.ca/guides/javatut99/uiswing/start/_packagename.html package naming] varies considerably for Swing versions."}, "JBoss_Application_Server": {"name": "JBoss Application Server", "url": "http://101companies.org/index.php/Technology:JBoss Application Server", "headline_links": [{"type": "Technology", "name": "Java_EE"}, {"type": "Page", "name": "Application_server"}], "implementations": [], "headline": "A [[Technology:Java EE]] [[:Category:Application server]]", "type": "Technology"}, "JTA": {"name": "JTA", "url": "http://101companies.org/index.php/Technology:JTA", "headline_links": [{"type": "Technology", "name": "XA"}], "implementations": [], "headline": "an API for distributed transactions across [[Technology:XA]] resources in a Java environment", "type": "Technology"}, "RMIADASHIIOP": {"name": "RMI-IIOP", "url": "http://101companies.org/index.php/Technology:RMI-IIOP", "headline_links": [], "implementations": [], "headline": "an API for providing CORBA capabilities in a Java environment", "type": "Technology"}, "HackageDB": {"name": "HackageDB", "url": "http://101companies.org/index.php/Technology:HackageDB", "headline_links": [], "implementations": [], "headline": "a collection of releases of Haskell packages", "type": "Technology"}, "Apache_XMLADASHRPC": {"name": "Apache XML-RPC", "url": "http://101companies.org/index.php/Technology:Apache XML-RPC", "headline_links": [], "implementations": [], "headline": "a Java implementation of XML-RPC", "type": "Technology"}, "DocumentADASHoriented_database": {"name": "Document-oriented database", "description_links": [{"type": "Language", "name": "JSON"}, {"type": "Language", "name": "BSON"}, {"type": "Language", "name": "XML"}], "url": "http://101companies.org/index.php/Technology:Document-oriented database", "headline_links": [], "implementations": [], "headline": "A document-oriented database is a form of storage software that stores semi-structured data.", "type": "Technology", "description": "A document-oriented database stores semi-structured data in the form of documents. A document can be seen as record-like data, encoded in some standard format like [[Language:JSON]], [[Language:BSON]] or [[Language:XML]]."}, "JDBC": {"name": "JDBC", "url": "http://101companies.org/index.php/Technology:JDBC", "headline_links": [], "implementations": [{"type": "Implementation", "name": "jdbc"}, {"type": "Implementation", "name": "jdbc2"}], "headline": "An API for embedded SQL programming in Java", "type": "Technology"}, "MoDisco": {"name": "MoDisco", "description_links": [], "url": "http://101companies.org/index.php/Technology:MoDisco", "headline_links": [], "implementations": [], "headline": "a framework for software modernization", "type": "Technology", "description": ""}, "ANTLR": {"name": "ANTLR", "url": "http://101companies.org/index.php/Technology:ANTLR", "headline_links": [], "implementations": [{"type": "Implementation", "name": "antlrAcceptor"}, {"type": "Implementation", "name": "antlrLexer"}, {"type": "Implementation", "name": "antlrObjects"}, {"type": "Implementation", "name": "antlrParser"}, {"type": "Implementation", "name": "antlrTrees"}, {"type": "Implementation", "name": "gra2mol"}], "headline": "A parser generator for advanced top-down parsing", "type": "Technology"}, "ErlangASLASHOTP": {"name": "Erlang/OTP", "url": "http://101companies.org/index.php/Technology:Erlang/OTP", "headline_links": [{"type": "Language", "name": "Erlang"}], "implementations": [], "headline": "an implementation of the [[Language:Erlang]] programming language with libraries", "type": "Technology"}, "Android_SDK": {"name": "Android SDK", "description_links": [], "url": "http://101companies.org/index.php/Technology:Android SDK", "headline_links": [{"type": "Page", "name": "toolkit"}, {"type": "Language", "name": "Android"}], "implementations": [], "headline": "The libraries and [[:Category:toolkit]]s for [[Language:Android]] programming", "type": "Technology", "description": "The Android SDK provides the tools and libraries necessary to begin developing applications that run on Android-powered devices."}, "iText": {"name": "iText", "description_links": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "CSharp"}], "url": "http://101companies.org/index.php/Technology:iText", "headline_links": [], "implementations": [], "headline": "a library for creation and manipulation of PDF documents", "type": "Technology", "description": "iText is available in [[Language:Java]] as well as in [[Language:CSharp|C#]]."}, "Kiama": {"name": "Kiama", "url": "http://101companies.org/index.php/Technology:Kiama", "headline_links": [{"type": "Language", "name": "Scala"}, {"type": "Page", "name": "library"}], "implementations": [{"type": "Implementation", "name": "kiama"}], "headline": "a [[Language:Scala]] [[:Category:library]] for language processing", "type": "Technology"}, "Parsec": {"name": "Parsec", "url": "http://101companies.org/index.php/Technology:Parsec", "headline_links": [{"type": "Concept", "name": "parser_combinator"}, {"type": "Page", "name": "Library"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "parsec"}], "headline": "A [[parser combinator]] [[:Category:Library|library]] in [[Language:Haskell|Haskell]]", "type": "Technology"}, "Guava": {"name": "Guava", "url": "http://101companies.org/index.php/Technology:Guava", "headline_links": [], "implementations": [], "headline": "Google Core Libraries for Java latest API", "type": "Technology"}, "MOF": {"name": "MOF", "url": "http://101companies.org/index.php/Technology:MOF", "headline_links": [], "implementations": [], "headline": "an OMG standard for model-driven engineering ", "type": "Technology"}, "jQuery": {"name": "jQuery", "url": "http://101companies.org/index.php/Technology:jQuery", "headline_links": [{"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Library"}, {"type": "Technology", "name": "DOM"}], "implementations": [{"type": "Implementation", "name": "html5tree"}], "headline": "a free open-source [[Language:JavaScript|javaScript]] [[:Category:Library|library]] for [[Technology:DOM]] manipulation", "type": "Technology"}, "cscADOTexe": {"name": "csc.exe", "url": "http://101companies.org/index.php/Technology:csc.exe", "headline_links": [{"type": "Language", "name": "CSharp"}, {"type": "Technology", "name": "ADOTNET"}], "implementations": [], "headline": "The [[:Language:CSharp|C#]] compiler as part of the [[:Technology:.NET|.NET]] Framework", "type": "Technology"}, "Microsoft_Excel": {"name": "Microsoft Excel", "url": "http://101companies.org/index.php/Technology:Microsoft Excel", "headline_links": [], "implementations": [], "headline": "A spreadsheet application", "type": "Technology"}, "ADOTNET_XML_Serialization": {"name": ".NET XML Serialization", "description_links": [{"type": "Concept", "name": "open_serialization"}, {"type": "Language", "name": "XML"}, {"type": "Page", "name": "SystemADOTXmlADOTSerialization"}, {"type": "Technology", "name": "xsdADOTexe"}, {"type": "Technology", "name": "xsdADOTexe"}, {"type": "Language", "name": "XSD"}], "url": "http://101companies.org/index.php/Technology:.NET XML Serialization", "headline_links": [{"type": "Concept", "name": "ObjectASLASHXML_mapping"}], "implementations": [], "headline": ".NET's approach to [[Object/XML mapping]]", "type": "Technology", "description": "This technology supports [[open serialization]] with [[Language:XML]] for .NET. It relies on the .NET namespace [[dotnet:System.Xml.Serialization]] and the class generator tool [[Technology:xsd.exe]]. Plain-old .NET classes can be annotated so that their serialization properties are defined in terms of element names, fields or properties to be included, and others. Such classes can also be generated with the [[Technology:xsd.exe]] tool from an [[Language:XSD|XML schema]]."}, "javac": {"name": "javac", "url": "http://101companies.org/index.php/Technology:javac", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Technology", "name": "JDK"}], "implementations": [], "headline": "the [[Language:Java]] compiler as part of [[Technology:JDK]]", "type": "Technology"}, "DOM": {"name": "DOM", "description_links": [], "url": "http://101companies.org/index.php/Technology:DOM", "headline_links": [{"type": "Page", "name": "API"}], "implementations": [{"type": "Implementation", "name": "html5XMLHttpRequest"}], "headline": "a platform- and language-neutral [[:Category:API|API]] for tree-based XML processing", "type": "Technology", "description": "TBD"}, "Java_EE": {"name": "Java EE", "url": "http://101companies.org/index.php/Technology:Java EE", "headline_links": [{"type": "Page", "name": "Platform"}, {"type": "Page", "name": "Server"}, {"type": "Language", "name": "Java"}], "implementations": [], "headline": "the Java Enterprise Edition is a [[:Category:Platform]] for [[:Category:Server]] programming in [[Language:Java]]", "type": "Technology"}, "WCF": {"name": "WCF", "url": "http://101companies.org/index.php/Technology:WCF", "headline_links": [{"type": "Page", "name": "Framework"}, {"type": "Concept", "name": "asynchronous_communication"}, {"type": "Page", "name": "Web_service"}], "implementations": [{"type": "Implementation", "name": "wcf"}, {"type": "Implementation", "name": "wcfRest"}], "headline": "A [[:Category:Framework|framework]] for [[asynchronous communication]] between [[:Category:Web service|web service]] endpoints", "type": "Technology"}, "AJDT": {"name": "AJDT", "url": "http://101companies.org/index.php/Technology:AJDT", "headline_links": [{"type": "Language", "name": "AspectJ"}], "implementations": [{"type": "Implementation", "name": "aspectJ"}], "headline": "[[Language:AspectJ]] Development Tools (AJDT)", "type": "Technology"}, "Happstack": {"name": "Happstack", "url": "http://101companies.org/index.php/Technology:Happstack", "headline_links": [{"type": "Page", "name": "Framework"}, {"type": "Concept", "name": "Web_programming"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "happstack"}], "headline": "A [[:Category:Framework|framework]] for [[Web programming|web programming]] in [[Language:Haskell|Haskell]] ", "type": "Technology"}, "GWT": {"name": "GWT", "description_links": [{"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Web_application"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Pyjamas"}, {"type": "Technology", "name": "DOM"}, {"type": "Concept", "name": "Ajax"}, {"type": "Concept", "name": "Web_programming"}], "url": "http://101companies.org/index.php/Technology:GWT", "headline_links": [{"type": "Page", "name": "Toolkit"}, {"type": "Concept", "name": "web_programming"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "gwt"}, {"type": "Implementation", "name": "gwtTree"}], "headline": "A [[:Category:Toolkit]] for [[web programming]] in [[Language:Java]]", "type": "Technology", "description": "GWT is a [[:Category:Web-application framework|web-application framework]] for developing [[Language:JavaScript]] [[:Category:Web application|web applications]] in [[Language:Java]]. It provides a Java-to-JavaScript compiler (see also: [[Technology:Pyjamas]]) as well as [[Technology:DOM]] and [[Ajax]] support in combination, and other useful components for [[Web programming|web programming]] <cite>GWT2012official</cite>."}, "Java_platform": {"name": "Java platform", "url": "http://101companies.org/index.php/Technology:Java platform", "headline_links": [], "implementations": [], "headline": "a collection of software and specifications for developing and deploying Java software", "type": "Technology"}, "JValidator": {"name": "JValidator", "description_links": [{"type": "Concept", "name": "101technology"}], "url": "http://101companies.org/index.php/Technology:JValidator", "headline_links": [], "implementations": [], "headline": "A validator for Java", "type": "Technology", "description": "JValidator is a [[101technology]]; it is a Java-specific validator. JValidator essentially parses the source code; it does not attempt compilation; it does not enforce any static semantics rules. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure."}, "Pyjamas": {"name": "Pyjamas", "description_links": [{"type": "Language", "name": "Python"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Compiler"}, {"type": "Concept", "name": "Ajax"}, {"type": "Technology", "name": "GWT"}], "url": "http://101companies.org/index.php/Technology:Pyjamas", "headline_links": [{"type": "Language", "name": "Python"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "Web_application"}], "implementations": [{"type": "Implementation", "name": "pyjamas"}], "headline": "A [[Language:Python]]-[[:Category:Web-application framework]] for [[Language:JavaScript]]-[[:Category:Web application|web applications]]", "type": "Technology", "description": "Pyjamas provides a [[Language:Python]]-to-[[Language:JavaScript]] [[:Category:Compiler|compiler]], and many other components including [[Ajax]] and a widget-set library. It is based on the idea of the [[Technology:GWT]], which is creating JavaScript web applications without programming JavaScript code <cite>Pyjamas2012official</cite>."}, "Entity_Framework": {"name": "Entity Framework", "description_links": [{"type": "Page", "name": "framework"}], "url": "http://101companies.org/index.php/Technology:Entity Framework", "headline_links": [{"type": "Concept", "name": "ObjectASLASHRelational_mapping"}, {"type": "Technology", "name": "ADOTNET"}], "implementations": [], "headline": "an [[Object/Relational mapping]] technology for the [[Technology:.NET]] Framework.", "type": "Technology", "description": "Entity Framework is consiedered to be a toolkit in our ontology as soon as [[:Category:framework]] has different properties. Even that an official name of the technology contains a \"framework\" part."}, "wxWidgets": {"name": "wxWidgets", "url": "http://101companies.org/index.php/Technology:wxWidgets", "headline_links": [{"type": "Language", "name": "CAPLUSAPLUS"}, {"type": "Concept", "name": "GUI"}, {"type": "Page", "name": "Library"}], "implementations": [], "headline": "a [[Language:C++|C++]] [[GUI]] [[:Category:Library|library]] supporting all major operating systems", "type": "Technology"}, "CGI": {"name": "CGI", "url": "http://101companies.org/index.php/Technology:CGI", "headline_links": [{"type": "Concept", "name": "standard"}, {"type": "Concept", "name": "web_server"}], "implementations": [{"type": "Implementation", "name": "haskellCGI"}], "headline": "A [[standard]] for website generation on a [[web server]]", "type": "Technology"}, "JSF": {"name": "JSF", "description_links": [{"type": "Language", "name": "Java"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Concept", "name": "user_interface"}, {"type": "Page", "name": "Web_application"}, {"type": "Concept", "name": "MVC"}, {"type": "Technology", "name": "JSP"}, {"type": "Technology", "name": "Facelets"}, {"type": "Technology", "name": "Java_Bean"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Concept", "name": "Ajax"}], "url": "http://101companies.org/index.php/Technology:JSF", "headline_links": [{"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Concept", "name": "user_interface"}, {"type": "Technology", "name": "Java_EE"}], "implementations": [{"type": "Implementation", "name": "jsf"}], "headline": "[[:Category:Web-application framework]] for web-based [[user interface]]s with [[Technology:Java EE]]", "type": "Technology", "description": "\"''JavaServer Faces'' (JSF) is a standard [[Language:Java]] [[:Category:Web-application framework|web-application framework]] for building [[user interface]]s for [[:Category:Web application|web applications]]\" <cite>schalk2007javaserver</cite>. In terms of [[MVC]] it is focused on the view ([[Technology:JSP]], [[Technology:Facelets]]), the model ([[Technology:Java Bean]]) and the controller (provided by the [[Technology:Servlet API]]). [[Ajax]] is included from version 2.0. ''JavaServer Faces'' controls the navigation between different pages and connects the pages to Java components implemented as Java Bean <cite>schalk2007javaserver, JSF2012official</cite>."}, "XOM": {"name": "XOM", "url": "http://101companies.org/index.php/Technology:XOM", "headline_links": [{"type": "Page", "name": "API"}, {"type": "Page", "name": "API_implementation"}], "implementations": [{"type": "Implementation", "name": "xom"}], "headline": "an [[:Category:API|API]] ([[:Category:API implementation|implementation]]) for tree-based XML processing", "type": "Technology"}, "xsltproc": {"name": "xsltproc", "url": "http://101companies.org/index.php/Technology:xsltproc", "headline_links": [{"type": "Language", "name": "XSLT"}], "implementations": [{"type": "Implementation", "name": "xslt"}], "headline": "a popular implementation of [[Language:XSLT]]", "type": "Technology"}, "Smack": {"name": "Smack", "url": "http://101companies.org/index.php/Technology:Smack", "headline_links": [], "implementations": [], "headline": "an Open Source, Java-based XMPP (Jabber) client library for instant messaging and presence", "type": "Technology"}, "ArgoUML": {"name": "ArgoUML", "url": "http://101companies.org/index.php/Technology:ArgoUML", "headline_links": [], "implementations": [], "headline": "An UML diagramming application", "type": "Technology"}, "ASP_ADOTNET": {"name": "ASP .NET", "url": "http://101companies.org/index.php/Technology:ASP .NET", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "Seaside": {"name": "Seaside", "url": "http://101companies.org/index.php/Technology:Seaside", "headline_links": [{"type": "Language", "name": "Smalltalk"}], "implementations": [{"type": "Implementation", "name": "seaside"}], "headline": "A framework for building web-applications in [[Language:Smalltalk]]", "type": "Technology"}, "Web_storage": {"name": "Web storage", "url": "http://101companies.org/index.php/Technology:Web storage", "headline_links": [{"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "API"}, {"type": "Page", "name": "Client"}, {"type": "Language", "name": "HTML5"}], "implementations": [], "headline": "A [[Language:JavaScript]] [[:Category:API]] for [[:Category:Client|client]] side data storage in the [[Language:HTML5]] ecosystem", "type": "Technology"}, "ECS": {"name": "ECS", "description_links": [], "url": "http://101companies.org/index.php/Technology:ECS", "headline_links": [], "implementations": [], "headline": "(a retired Jakarta project for) a markup construction for Java", "type": "Technology", "description": "ECS stands for Element Construction Set."}, "HSQLDB": {"name": "HSQLDB", "url": "http://101companies.org/index.php/Technology:HSQLDB", "headline_links": [], "implementations": [{"type": "Implementation", "name": "hibernate"}, {"type": "Implementation", "name": "hibernate2"}], "headline": "a relational database management system", "type": "Technology"}, "BSF": {"name": "BSF", "description_links": [], "url": "http://101companies.org/index.php/Technology:BSF", "headline_links": [{"type": "Page", "name": "Scripting_language"}], "implementations": [], "headline": "a framework for [[:Category:Scripting language]] support", "type": "Technology", "description": "BSF stands for Bean Scripting Framework."}, "Java_events": {"name": "Java events", "description_links": [{"type": "Page", "name": "javaADOTutil"}], "url": "http://101companies.org/index.php/Technology:Java events", "headline_links": [], "implementations": [], "headline": "Java's event framework", "type": "Technology", "description": "The framework is hosted by the [[Java:java.util]] package.\n\n=== Interfaces ===\n\n* EventListener\n* Observer\n\n=== Classes ===\n\n* EventListenerProxy\n* EventObject\n* Observable\n\n=== Exceptions ===\n\n* TooManyListenersException"}, "ASM": {"name": "ASM", "url": "http://101companies.org/index.php/Technology:ASM", "headline_links": [], "implementations": [], "headline": "a Java bytecode engineering framework", "type": "Technology"}, "GeFLo": {"name": "GeFLo", "description_links": [{"type": "Page", "name": "Explorer"}, {"type": "Technology", "name": "GeSHi"}], "url": "http://101companies.org/index.php/Technology:GeFLo", "headline_links": [{"type": "Technology", "name": "GeSHi"}], "implementations": [], "headline": "a generic fragment locator based on [[Technology:GeSHi]]", "type": "Technology", "description": "GeFLo is a part of the [[101companies:Explorer]]; it is a generic tool for fragment location. The technology supports the token-aware, and regular expression-based location of fragments for all languages that are supported by [[Technology:GeSHi]]. The input/output behavior of GeFLo is the following:\n\n* Input:\n** a source file\n** a fragment description using regexp-like syntax on tokens\n* Output:\n** the line range of the located fragment\n\nSuppose we are in need of fragment location for Ruby. Consider the following code [https://github.com/101companies/101repo/blob/master/contributions/ruby/company/company.rb]:\n\n<pre>\nclass Company\n  \n  attr_accessor :name, :topDepts\n  \n  def total\n    ttl = 0.0\n    topDepts.each do |topDept|\n      ttl += topDept.total\n    end\n    ttl\n  end\n  \n  def cut\n    topDepts.each do |topDept|\n      topDept.cut\n    end\n  end\nend\n</pre>\n\nA GeFLo-based fragment description for the function \"total\" takes this form:\n\n<pre>\ndef total ^[def]*\n</pre>\n\nThe expression matches with the leftmost, longest substring of the input that consists of \"def\", followed by \"total\", followed by any number of tokens that are different from \"def\". Fragment location hence returns the line range 5-11.\n\nA GeFLo-based fragment description for the function \"cut\" takes this form:\n\n<pre>\ndef cut .* > end $\n</pre>\n\nThe expression matches with the leftmost, longest substring of the input that consists of \"def\", followed by \"cut\", followed by any number of tokens, where the substring must be followed by \"end\" and \"$\" (the end of the input). The operator \">\" does not carry any semantics in matching; it only denotes the separation between matched input to be returned by fragment location as opposed to additional matched content. (We may also use the notion of \"follow restriction\".) Fragment location hence returns the line range 13-17.\n\nSpecial conventions regarding comments and whitespace:\n* Comments and whitespace are skipped in the input during matching.\n* Whitespace in regular expressions serves for sequential composition.\n\nSummary of regexp syntax:\n* Metasymbol \" \" for sequential composition.\n* Metasymbol \".\" for any token.\n* Metasymbol \"^\" for start of input.\n* Metasymbol \"$\" for end of input.\n* Metasymbol \">\" for separating the appended matched substring from follow restriction. (look-ahead)\n* Metasymbol \"<\" for separating the prepended matched substring from follow restriction. (look-behind)\n* Metasymbol \"\\\" for escpaping metasymbols for use in token.\n* Metasymbols \"?\", \"+\", \"*\" as usual quantifiers for optional parts and iteration.\n* Metasyntax \"^[''e'']\" for negation; ''e'' is a regular expression."}, "OpenCOBOL": {"name": "OpenCOBOL", "url": "http://101companies.org/index.php/Technology:OpenCOBOL", "headline_links": [], "implementations": [{"type": "Implementation", "name": "cobol"}], "headline": "", "type": "Technology"}, "ADT": {"name": "ADT", "description_links": [{"type": "Page", "name": "plugin"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Technology", "name": "Android_platform"}, {"type": "Technology", "name": "Eclipse"}, {"type": "Concept", "name": "Android_project"}], "url": "http://101companies.org/index.php/Technology:ADT", "headline_links": [{"type": "Language", "name": "Android"}], "implementations": [{"type": "Implementation", "name": "android"}, {"type": "Implementation", "name": "android2"}, {"type": "Implementation", "name": "simpleAndroid"}], "headline": "[[Language:Android]] Development Tool (ADT)", "type": "Technology", "description": "ADT is a [[:Category:plugin]] for the [[Technology:Eclipse]] IDE. It gives a integrated environment in which to develop apps for the [[Technology:Android platform]]. It extends the capabilites of [[Technology:Eclipse]] to let a quickly set up new [[Android project]]s, build an app UI, debug a app, and export signed (or unsigned) app packages (APKs) for distribution."}, "Struts": {"name": "Struts", "description_links": [{"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Concept", "name": "MVC"}, {"type": "Technology", "name": "JSP"}, {"type": "Language", "name": "Java"}, {"type": "Technology", "name": "Servlet_API"}, {"type": "Concept", "name": "Ajax"}, {"type": "Technology", "name": "REST"}, {"type": "Technology", "name": "SOAP"}], "url": "http://101companies.org/index.php/Technology:Struts", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Technology", "name": "JSP"}, {"type": "Technology", "name": "Servlet_API"}], "implementations": [{"type": "Implementation", "name": "strutsAnnotation"}, {"type": "Implementation", "name": "strutsXml"}], "headline": "A [[Language:Java]]-based [[:Category:Web-application framework]] with [[Technology:JSP]] and [[Technology:Servlet API|Servlets]]", "type": "Technology", "description": "Apache Struts is a [[:Category:Web-application framework|web-application framework]] highly dedicated to [[MVC]]. It affects every component of MVC, is it the view ([[Technology:JSP]]), the controller ([[Language:Java]] actions in combination with the [[Technology:Servlet API]]) or the model (Java services). Apache Struts supports [[Ajax]] as well as [[Technology:REST]] and [[Technology:SOAP]] <cite>ApacheStruts2012official</cite>."}, "Java_Print_Service": {"name": "Java Print Service", "url": "http://101companies.org/index.php/Technology:Java Print Service", "headline_links": [], "implementations": [], "headline": "a library for printing in a Java environment", "type": "Technology"}, "CUP": {"name": "CUP", "description_links": [{"type": "Page", "name": "java_cupADOTruntime"}], "url": "http://101companies.org/index.php/Technology:CUP", "headline_links": [{"type": "Language", "name": "Java"}], "implementations": [], "headline": "a parser generator for [[Language:Java]]", "type": "Technology", "description": "There is also a runtime library [[Java:java_cup.runtime]] for CUP."}, "Opera": {"name": "Opera", "url": "http://101companies.org/index.php/Technology:Opera", "headline_links": [], "implementations": [], "headline": "A free (partially open source) Web browser", "type": "Technology"}, "XA": {"name": "XA", "description_links": [], "url": "http://101companies.org/index.php/Technology:XA", "headline_links": [], "implementations": [], "headline": "an X/Open group standard for distributed transactions", "type": "Technology", "description": "XA stands for \"eXtended Architecture\"."}, "Java_SE": {"name": "Java SE", "url": "http://101companies.org/index.php/Technology:Java SE", "headline_links": [], "implementations": [], "headline": "the Java Standard Edition as a concrete instance of the Java platform", "type": "Technology"}, "WP7_SDK": {"name": "WP7 SDK", "url": "http://101companies.org/index.php/Technology:WP7 SDK", "headline_links": [], "implementations": [], "headline": "Windows Phone 7 Software Development Kit", "type": "Technology"}, "XStream": {"name": "XStream", "url": "http://101companies.org/index.php/Technology:XStream", "headline_links": [{"type": "Concept", "name": "XML_serialization"}], "implementations": [], "headline": "a library for [[XML serialization]]", "type": "Technology"}, "BaseX": {"name": "BaseX", "url": "http://101companies.org/index.php/Technology:BaseX", "headline_links": [{"type": "Language", "name": "XPath"}, {"type": "Language", "name": "XQuery"}], "implementations": [{"type": "Implementation", "name": "xquery"}], "headline": "an XML database with [[Language:XPath]] and [[Language:XQuery]] processor", "type": "Technology"}, "Velocity": {"name": "Velocity", "url": "http://101companies.org/index.php/Technology:Velocity", "headline_links": [], "implementations": [], "headline": "(an Apache project on) a template engine", "type": "Technology"}, "Rhino": {"name": "Rhino", "url": "http://101companies.org/index.php/Technology:Rhino", "headline_links": [{"type": "Language", "name": "JavaScript"}, {"type": "Language", "name": "Java"}], "implementations": [], "headline": "[[Language:JavaScript]] for [[Language:Java]]", "type": "Technology"}, "Java_Image_IASLASHO": {"name": "Java Image I/O", "url": "http://101companies.org/index.php/Technology:Java Image I/O", "headline_links": [], "implementations": [], "headline": "an API for loading and saving images in different formats", "type": "Technology"}, "CLR": {"name": "CLR", "url": "http://101companies.org/index.php/Technology:CLR", "headline_links": [{"type": "Technology", "name": "ADOTNET"}], "implementations": [], "headline": "A part of the [[Technology:.NET]] Framework which defines an execution environment for program code", "type": "Technology"}, "Java_misc": {"name": "Java misc", "description_links": [{"type": "Page", "name": "javaADOTutil"}], "url": "http://101companies.org/index.php/Technology:Java misc", "headline_links": [{"type": "Page", "name": "javaADOTutil"}], "implementations": [], "headline": "some parts of the Java package [[Java:java.util]]", "type": "Technology", "description": "This framework is strongly defined by the Java platform.\n\nPragmatically, some slices of the [[Java:java.util]] package were extracted; the present \"technology\" denotes the rest.\n\n=== Interfaces ===\n\n* Comparator\n* Formattable\n\n=== Classes ===\n\n* Calendar\n* Currency\n* Date\n* FormattableFlags\n* Formatter\n* GregorianCalendar\n* ListResourceBundle\n* Locale\n* Locale.Builder\n* Objects\n* PropertyPermission\n* PropertyResourceBundle\n* Random\n* ResourceBundle\n* ResourceBundle.Control\n* Scanner\n* ServiceLoader\n* SimpleTimeZone\n* StringTokenizer\n* Timer\n* TimerTask\n* TimeZone\n* UUID\n\n=== Enums ===\n\n* Formatter.BigDecimalLayoutForm\n* Locale.Category\n\n=== Exceptions ===\n\n* DuplicateFormatFlagsException\n* FormatFlagsConversionMismatchException\n* FormatterClosedException\n* IllegalFormatCodePointException\n* IllegalFormatConversionException\n* IllegalFormatException\n* IllegalFormatFlagsException\n* IllegalFormatPrecisionException\n* IllegalFormatWidthException\n* IllformedLocaleException\n* InputMismatchException\n* InvalidPropertiesFormatException\n* MissingFormatArgumentException\n* MissingFormatWidthException\n* MissingResourceException\n* UnknownFormatConversionException\n* UnknownFormatFlagsException"}, "MSBuild": {"name": "MSBuild", "description_links": [], "url": "http://101companies.org/index.php/Technology:MSBuild", "headline_links": [{"type": "Language", "name": "CSharp"}], "implementations": [], "headline": "A build system used in [[Language:CSharp]] projects", "type": "Technology", "description": "MSBuild is originally the build system of the Visual Studio IDE. It is also used in other C# IDEs like MonoDevelop. MSBuild describes the build informations in XML."}, "JGroups": {"name": "JGroups", "url": "http://101companies.org/index.php/Technology:JGroups", "headline_links": [], "implementations": [], "headline": "a toolkit for reliable multicast communication in Java", "type": "Technology"}, "HsImportMatcher": {"name": "HsImportMatcher", "description_links": [{"type": "Page", "name": "Explorer"}], "url": "http://101companies.org/index.php/Technology:HsImportMatcher", "headline_links": [], "implementations": [], "headline": "an import matcher for Haskell", "type": "Technology", "description": "HsImportMatcher is a part of [[101companies:Explorer]]; it is a Haskell-specific tool for import matching. That is, the technology supports the syntax-aware proof of using a certain Haskell-based technology in terms of its import into Haskell sources. The input/output behavior of HsImportMatcher is the following:\n\n* Input:\n** a Haskell module\n** a namespace (a string)\n* Output:\n** None\n* Exit:\n** Normal: successful matching\n** Abnormal: failed matching (or other problems)"}, "WPF": {"name": "WPF", "url": "http://101companies.org/index.php/Technology:WPF", "headline_links": [], "implementations": [], "headline": "", "type": "Technology"}, "Ant": {"name": "Ant", "url": "http://101companies.org/index.php/Technology:Ant", "headline_links": [], "implementations": [{"type": "Implementation", "name": "egl"}, {"type": "Implementation", "name": "template"}], "headline": "a build automation tool primarily for the Java platform", "type": "Technology"}, "CSharpFragmentLocator": {"name": "CSharpFragmentLocator", "description_links": [{"type": "Page", "name": "Explorer"}, {"type": "Technology", "name": "JFragmentLocator"}], "url": "http://101companies.org/index.php/Technology:CSharpFragmentLocator", "headline_links": [], "implementations": [], "headline": "a fragment locator for C#", "type": "Technology", "description": "CSharpFragmentLocator  is a part of the [[101companies:Explorer]]; it is a C#-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in C# compilation unit. The input/output behavior of CSharpFragmentLocator is the following:\n\n* Input:\n** a C# source code file\n** a fragment description\n* Output:\n** the line range of the located fragment\n\nFor fragment description and output format, please refer to [[Technology:JFragmentLocator]].\n\nThe C# specific properties can be be selected by using the property name as the method name. Consider this property:\n\n<pre>\npublic Guid Id { get; set; }\n</pre>\n\nIt can be selected by using the name \"Id\" as the method:\n<pre>\n{\n  \"method\" : \"Id\"\n}\n</pre>"}, "GlassFish": {"name": "GlassFish", "url": "http://101companies.org/index.php/Technology:GlassFish", "headline_links": [{"type": "Technology", "name": "Java_EE"}, {"type": "Page", "name": "Application_server"}], "implementations": [{"type": "Implementation", "name": "jsf"}], "headline": "A [[Technology:Java EE]] [[:Category:Application server]]", "type": "Technology"}, "101explorer": {"name": "101explorer", "url": "http://101companies.org/index.php/Technology:101explorer", "headline_links": [], "implementations": [], "headline": "an explorer for 101companies contributions", "type": "Technology"}, "Neo4j": {"name": "Neo4j", "description_links": [], "url": "http://101companies.org/index.php/Technology:Neo4j", "headline_links": [{"type": "Technology", "name": "Graph_database"}, {"type": "Language", "name": "Java"}], "implementations": [{"type": "Implementation", "name": "gremlinADASHneo4j"}], "headline": "Neo4j is a [[Technology:Graph database]] implemented in the [[Language:Java]] language.", "type": "Technology", "description": "Neo4j is an open-source graph database, meaning it stores data in the form of graphs in the mathematical sense rather than relational tables."}, "Jaxen": {"name": "Jaxen", "url": "http://101companies.org/index.php/Technology:Jaxen", "headline_links": [], "implementations": [], "headline": "an open source XPath library written in Java", "type": "Technology"}, "IndexedDB": {"name": "IndexedDB", "url": "http://101companies.org/index.php/Technology:IndexedDB", "headline_links": [{"type": "Page", "name": "DBMS"}, {"type": "Page", "name": "API"}, {"type": "Language", "name": "HTML5"}, {"type": "Page", "name": "Client"}], "implementations": [{"type": "Implementation", "name": "html5indexedDatabase"}], "headline": "A [[:Category:DBMS]] [[:Category:API]] in the [[Language:HTML5]] ecosystem for [[:Category:Client|client]] side data storage", "type": "Technology"}, "HaskellDB": {"name": "HaskellDB", "url": "http://101companies.org/index.php/Technology:HaskellDB", "headline_links": [{"type": "Page", "name": "Library"}, {"type": "Page", "name": "DBMS"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "haskellDB"}], "headline": "A [[:Category:Library|combinator library]] for expressing [[:Category:DBMS]] queries in [[Language:Haskell|Haskell]]", "type": "Technology"}, "XMLHttpRequest": {"name": "XMLHttpRequest", "url": "http://101companies.org/index.php/Technology:XMLHttpRequest", "headline_links": [{"type": "Language", "name": "JavaScript"}, {"type": "Page", "name": "API"}, {"type": "Technology", "name": "HTTP"}], "implementations": [{"type": "Implementation", "name": "html5XMLHttpRequest"}, {"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}], "headline": "a [[Language:JavaScript]] [[:Category:API]] for [[Technology:HTTP]]-Requests", "type": "Technology"}, "JDOM": {"name": "JDOM", "url": "http://101companies.org/index.php/Technology:JDOM", "headline_links": [{"type": "Page", "name": "API"}, {"type": "Page", "name": "API_implementation"}], "implementations": [{"type": "Implementation", "name": "jdom"}], "headline": "an [[:Category:API|API]] ([[:Category:API implementation|implementation]]) for tree-based XML processing", "type": "Technology"}, "Xtext": {"name": "Xtext", "url": "http://101companies.org/index.php/Technology:Xtext", "headline_links": [], "implementations": [{"type": "Implementation", "name": "xtext"}], "headline": "a toolkit for development of external textual DSLs", "type": "Technology"}, "JavaMail": {"name": "JavaMail", "url": "http://101companies.org/index.php/Technology:JavaMail", "headline_links": [], "implementations": [], "headline": "a library for handling emails in a Java environment", "type": "Technology"}, "JFreeChart": {"name": "JFreeChart", "url": "http://101companies.org/index.php/Technology:JFreeChart", "headline_links": [], "implementations": [], "headline": "a free Java chart library", "type": "Technology"}, "OGNL": {"name": "OGNL", "description_links": [{"type": "Language", "name": "OGNL"}], "url": "http://101companies.org/index.php/Technology:OGNL", "headline_links": [], "implementations": [], "headline": "a Java library for object graph navigation", "type": "Technology", "description": "OGNL stands for \"Object Graph Navigation Library\", but see the language [[Language:OGNL]]"}, "ADOTNET": {"name": ".NET", "url": "http://101companies.org/index.php/Technology:.NET", "headline_links": [{"type": "Page", "name": "Runtime"}], "implementations": [], "headline": "a library and [[:Category:Runtime|runtime]] which supports several programming languages for Windows operating systems", "type": "Technology"}, "Java_Servlet": {"name": "Java Servlet", "description_links": [{"type": "Technology", "name": "Java_Servlet_API"}], "url": "http://101companies.org/index.php/Technology:Java Servlet", "headline_links": [], "implementations": [], "headline": "a kind of server side Java component", "type": "Technology", "description": "See also the corresponding [[Technology:Java Servlet API]]."}, "DPH": {"name": "DPH", "url": "http://101companies.org/index.php/Technology:DPH", "headline_links": [{"type": "Technology", "name": "GHC"}, {"type": "Concept", "name": "data_parallelism"}], "implementations": [{"type": "Implementation", "name": "dph"}], "headline": "A [[Technology:GHC]] extension for [[data parallelism]]", "type": "Technology"}, "Jython": {"name": "Jython", "url": "http://101companies.org/index.php/Technology:Jython", "headline_links": [], "implementations": [], "headline": "Python for the Java Platform", "type": "Technology"}, "Java_Servlet_API": {"name": "Java Servlet API", "url": "http://101companies.org/index.php/Technology:Java Servlet API", "headline_links": [{"type": "Technology", "name": "Java_Servlet"}], "implementations": [], "headline": "an API for [[Technology:Java Servlet]]s", "type": "Technology"}, "XMLStreamWriter": {"name": "XMLStreamWriter", "url": "http://101companies.org/index.php/Technology:XMLStreamWriter", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Page", "name": "API"}, {"type": "Language", "name": "XML"}], "implementations": [{"type": "Implementation", "name": "sax"}], "headline": "a [[Language:Java]] [[:Category:API]] for writing [[Language:XML]]", "type": "Technology"}, "XSDValidator": {"name": "XSDValidator", "description_links": [{"type": "Concept", "name": "101technology"}], "url": "http://101companies.org/index.php/Technology:XSDValidator", "headline_links": [{"type": "Language", "name": "XSD"}], "implementations": [], "headline": "A validator for [[Language:XSD]]", "type": "Technology", "description": "XSDValidator is a [[101technology]]; it is a XSD-specific validator. XSDValidator relies on System.Xml.Schema API to parse the file and report the errors discovered. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure."}, "dom4j": {"name": "dom4j", "url": "http://101companies.org/index.php/Technology:dom4j", "headline_links": [{"type": "Page", "name": "API"}, {"type": "Page", "name": "API_implementation"}], "implementations": [], "headline": "an [[:Category:API|API]] ([[:Category:API implementation|implementation]]) for tree-based XML processing", "type": "Technology"}, "make": {"name": "make", "description_links": [{"type": "Technology", "name": "GNU_make"}], "url": "http://101companies.org/index.php/Technology:make", "headline_links": [], "implementations": [], "headline": "a popular build automation tool", "type": "Technology", "description": "''make'' is de-facto a name that could refer to different implementations,\n\nOne popular implementation of ''make'' is [[Technology:GNU make]]."}, "ODBC": {"name": "ODBC", "url": "http://101companies.org/index.php/Technology:ODBC", "headline_links": [{"type": "Concept", "name": "API"}], "implementations": [{"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}], "headline": "A standard [[API]] for accessing database management systems", "type": "Technology"}, "Avalon": {"name": "Avalon", "url": "http://101companies.org/index.php/Technology:Avalon", "headline_links": [], "implementations": [], "headline": "an obsolete Apache framework for component and container programming", "type": "Technology"}, "XML_pickler": {"name": "XML pickler", "url": "http://101companies.org/index.php/Technology:XML pickler", "headline_links": [{"type": "Concept", "name": "XML_data_binding"}, {"type": "Language", "name": "Haskell"}], "implementations": [], "headline": "An [[XML data binding]] technology for [[Language:Haskell]]", "type": "Technology"}, "POI": {"name": "POI", "url": "http://101companies.org/index.php/Technology:POI", "headline_links": [], "implementations": [], "headline": "(an Apache project for) a Java API for Microsoft documents", "type": "Technology"}, "Ecore": {"name": "Ecore", "url": "http://101companies.org/index.php/Technology:Ecore", "headline_links": [{"type": "Technology", "name": "EMF"}], "implementations": [{"type": "Implementation", "name": "xtext"}], "headline": "the metamodel component of [[Technology:EMF]]", "type": "Technology"}, "Bouncy_Castle": {"name": "Bouncy Castle", "description_links": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "CSharp"}], "url": "http://101companies.org/index.php/Technology:Bouncy Castle", "headline_links": [], "implementations": [], "headline": "a set of encryption technologies including an API", "type": "Technology", "description": "The full name of the technology is \"Bouncy Castle Crypto APIs\" according to the home page.\n\nBouncy Castle is available for [[Language:Java]] and [[Language:CSharp|C#]]."}, "101worker": {"name": "101worker", "url": "http://101companies.org/index.php/Technology:101worker", "headline_links": [{"type": "Page", "name": "Project"}], "implementations": [], "headline": "The server infrastructure of the [[101companies:Project]]", "type": "Technology"}, "NetBeans": {"name": "NetBeans", "url": "http://101companies.org/index.php/Technology:NetBeans", "headline_links": [{"type": "Language", "name": "Java"}, {"type": "Language", "name": "php"}, {"type": "Language", "name": "cAPLUSAPLUS"}], "implementations": [{"type": "Implementation", "name": "jsf"}], "headline": "an IDE for [[Language:Java]], [[Language:php]], [[Language:c++|c++]] and other languages", "type": "Technology"}, "EJB": {"name": "EJB", "url": "http://101companies.org/index.php/Technology:EJB", "headline_links": [], "implementations": [], "headline": "a server-side component architecture for application development", "type": "Technology"}, "XAMPP": {"name": "XAMPP", "description_links": [{"type": "Technology", "name": "Apache_HTTP_Server"}, {"type": "Technology", "name": "MySQL"}, {"type": "Page", "name": "DBMS"}, {"type": "Language", "name": "PHP"}, {"type": "Page", "name": "Interpreter"}, {"type": "Language", "name": "Perl"}, {"type": "Page", "name": "Interpreter"}], "url": "http://101companies.org/index.php/Technology:XAMPP", "headline_links": [{"type": "Page", "name": "Web_server"}, {"type": "Concept", "name": "Web_programming"}], "implementations": [{"type": "Implementation", "name": "html5ajax"}, {"type": "Implementation", "name": "html5tree"}, {"type": "Implementation", "name": "mySql"}], "headline": "A cross-plattform open-source [[:Category:Web server]] package for local [[Web programming]]", "type": "Technology", "description": "XAMPP contains:\n\n* an [[Technology:Apache HTTP Server]],\n* a [[Technology:MySQL]]-[[:Category:DBMS]],\n* a [[Language:PHP]] [[:Category:Interpreter]]\n* and a [[Language:Perl]] [[:Category:Interpreter]]"}, "BCEL": {"name": "BCEL", "url": "http://101companies.org/index.php/Technology:BCEL", "headline_links": [], "implementations": [], "headline": "a Java bytecode engineering framework", "type": "Technology"}, "HXT": {"name": "HXT", "url": "http://101companies.org/index.php/Technology:HXT", "headline_links": [{"type": "Concept", "name": "toolkit"}, {"type": "Language", "name": "Haskell"}], "implementations": [{"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "hxtPickler"}], "headline": "A [[toolkit]] for tree-based XML processing in [[Language:Haskell]]", "type": "Technology"}, "HPC": {"name": "HPC", "url": "http://101companies.org/index.php/Technology:HPC", "headline_links": [{"type": "Language", "name": "Haskell"}], "implementations": [], "headline": "A tool for recording and displaying [[Language:Haskell]] program coverage", "type": "Technology"}, "Apache_HTTP_Server": {"name": "Apache HTTP Server", "url": "http://101companies.org/index.php/Technology:Apache HTTP Server", "headline_links": [], "implementations": [], "headline": "Apache's web server", "type": "Technology"}, "Android_platform": {"name": "Android platform", "url": "http://101companies.org/index.php/Technology:Android platform", "headline_links": [], "implementations": [], "headline": "A software stack for mobile devices that includes an operating system, middleware, and key applications", "type": "Technology"}, "HsFragmentLocator": {"name": "HsFragmentLocator", "description_links": [{"type": "Page", "name": "Explorer"}], "url": "http://101companies.org/index.php/Technology:HsFragmentLocator", "headline_links": [], "implementations": [], "headline": "a fragment locator for Haskell", "type": "Technology", "description": "HsFragmentLocator is a part of [[101companies:Explorer]]; it is a Haskell-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in a Haskell module. The input/output behavior of HsFragmentLocator is the following:\n\n* Input:\n** a Haskell module\n** a fragment description\n* Output:\n** the line range of the located Haskell fragment\n\nHsFragmentLocator leverages JSON for the description of fragments and the derived line ranges. Consider, for example, the following Haskell module:\n\n<pre>\ndata A = A1 Int | A2 Bool | A3 A\n deriving (Read,Show,Eq)\ndata B = B1 Bool | B2 Int | B3 A\n deriving (Read,Show,Eq)\ndata C = C B\n deriving (Read,Show,Eq)\n\nf :: Int -> Int\nf = id\n\ng = g'\n\ng' :: Bool -> Int\ng' True = 1\ng' False = 0\n\nh :: Bool -> Bool\nh True = False\nh False = True\n</pre>\n\nThe following fragment description locates the datatype \"B\":\n\n<pre>\n{\n \"data\" : \"B\"\n}\n</pre>\n\nThe line range for the located fragment is this:\n\n<pre>\n{\"from\":3,\"to\":4}\n</pre>\n\nThe following fragment description locates the function \"g'\":\n\n<pre>\n{\n \"function\" : \"g'\"\n}\n</pre>\n\nThe line range for the located fragment is this:\n\n<pre>\n{\"from\":13,\"to\":16}\n</pre>\n\nLine 13 is the line of the function signature. (If the function signature is not next to the definition of a function or it declares multiple functions, then the definition is located alone.)"}, "Cabal": {"name": "Cabal", "url": "http://101companies.org/index.php/Technology:Cabal", "headline_links": [{"type": "Language", "name": "Haskell"}], "implementations": [], "headline": "a system for building and packaging [[Language:Haskell]] libraries and programs", "type": "Technology"}, "Object_Streams": {"name": "Object Streams", "url": "http://101companies.org/index.php/Technology:Object Streams", "headline_links": [{"type": "Technology", "name": "Java_SE"}], "implementations": [], "headline": "Classes of of the [[Technology:Java SE]] for I/O for objects", "type": "Technology"}, "xjc": {"name": "xjc", "url": "http://101companies.org/index.php/Technology:xjc", "headline_links": [{"type": "Technology", "name": "JAXB"}, {"type": "Concept", "name": "OASLASHX_mapping"}, {"type": "Technology", "name": "Java_platform"}], "implementations": [{"type": "Implementation", "name": "jaxbChoice"}, {"type": "Implementation", "name": "jaxbComposition"}, {"type": "Implementation", "name": "jaxbExtension"}, {"type": "Implementation", "name": "jaxbSubstitution"}], "headline": "the class generator of the [[Technology:JAXB]] technology for [[O/X mapping]] for the [[Technology:Java platform]]", "type": "Technology"}, "GHCi": {"name": "GHCi", "url": "http://101companies.org/index.php/Technology:GHCi", "headline_links": [{"type": "Language", "name": "Haskell"}, {"type": "Technology", "name": "GHC"}], "implementations": [{"type": "Implementation", "name": "dph"}, {"type": "Implementation", "name": "haskell"}, {"type": "Implementation", "name": "haskellDB"}, {"type": "Implementation", "name": "hdbc"}, {"type": "Implementation", "name": "hxt"}, {"type": "Implementation", "name": "hxtPickler"}, {"type": "Implementation", "name": "mvar"}, {"type": "Implementation", "name": "parsec"}, {"type": "Implementation", "name": "syb"}, {"type": "Implementation", "name": "tmvar"}, {"type": "Implementation", "name": "writerMonad"}, {"type": "Implementation", "name": "wxHaskell"}], "headline": "The [[Language:Haskell]] interpreter as part of [[Technology:GHC]]", "type": "Technology"}, "JPA": {"name": "JPA", "url": "http://101companies.org/index.php/Technology:JPA", "headline_links": [{"type": "Concept", "name": "persistence"}], "implementations": [], "headline": "an API for [[persistence]] in a Java environment", "type": "Technology"}, "Spring": {"name": "Spring", "url": "http://101companies.org/index.php/Technology:Spring", "headline_links": [], "implementations": [], "headline": "an application development framework for Java", "type": "Technology"}, "Rebar": {"name": "Rebar", "url": "http://101companies.org/index.php/Technology:Rebar", "headline_links": [], "implementations": [{"type": "Implementation", "name": "erlang"}], "headline": "an Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases", "type": "Technology"}, "Tidy": {"name": "Tidy", "description_links": [], "url": "http://101companies.org/index.php/Technology:Tidy", "headline_links": [], "implementations": [], "headline": "a utility for tiding up HTML", "type": "Technology", "description": "JDT stands for Java Development Tools."}, "Facelets": {"name": "Facelets", "url": "http://101companies.org/index.php/Technology:Facelets", "headline_links": [{"type": "Page", "name": "Template_processor"}, {"type": "Language", "name": "HTML"}, {"type": "Language", "name": "JavaScript"}, {"type": "Technology", "name": "JSF"}], "implementations": [], "headline": "A [[:Category:Template processor|template processing system]] for generating [[Language:HTML]]/[[Language:JavaScript]]-pages in the [[Technology:JSF]] context", "type": "Technology"}, "SLF4J": {"name": "SLF4J", "description_links": [], "url": "http://101companies.org/index.php/Technology:SLF4J", "headline_links": [], "implementations": [], "headline": "a simple facade for various logging frameworks", "type": "Technology", "description": "SLF4J stands for Simple Logging Facade for Java."}, "Seam": {"name": "Seam", "description_links": [{"type": "Technology", "name": "JBoss_Application_Server"}, {"type": "Technology", "name": "JSF"}, {"type": "Concept", "name": "Ajax"}, {"type": "Page", "name": "WebADASHapplication_framework"}, {"type": "Page", "name": "Web_application"}, {"type": "Language", "name": "Java"}, {"type": "Concept", "name": "ThreeADASHtier_architecture"}], "url": "http://101companies.org/index.php/Technology:Seam", "headline_links": [{"type": "Technology", "name": "Java_EE"}, {"type": "Page", "name": "WebADASHapplication_framework"}], "implementations": [{"type": "Implementation", "name": "seam"}], "headline": "A [[Technology:Java EE]] based [[:Category:Web-application framework|web-application framework]]", "type": "Technology", "description": "[[Technology:JBoss Application Server|JBoss]] Seam is an [[Technology:JSF]] based [[Ajax]] [[:Category:Web-application framework|web-application framework]] for the development of rich [[:Category:Web application|web applications]] in [[Language:Java]]. It is based on a [[Three-tier architecture|three-tier architecture]], where the presentation layer is handled by JSF <cite>SeamF2012official</cite>."}, "gzip": {"name": "gzip", "url": "http://101companies.org/index.php/Technology:gzip", "headline_links": [], "implementations": [], "headline": "A compression and decompression technology", "type": "Technology"}, "Javassist": {"name": "Javassist", "url": "http://101companies.org/index.php/Technology:Javassist", "headline_links": [], "implementations": [], "headline": "a Java bytecode engineering framework", "type": "Technology"}}, "Page": {"101viewACOLONImplementationASLASHspace_matrix": {"discussion_links": [], "name": "101view:Implementation/space matrix", "url": "http://101companies.org/index.php/101view:Implementation/space matrix", "headline_links": [], "discussion": "", "headline": "a matrix view of the spaces per implementation", "type": "Page"}, "JavaACOLONjavaADOTutil": {"discussion_links": [], "name": "Java:java.util", "url": "http://101companies.org/index.php/Java:java.util", "headline_links": [], "discussion": "", "headline": "miscellaneous Java libraries", "type": "Page"}, "101termACOLONPrettyprint": {"discussion_links": [], "name": "101term:Prettyprint", "url": "http://101companies.org/index.php/101term:Prettyprint", "headline_links": [{"type": "Page", "name": "Unparse"}], "discussion": "", "headline": "A synonym for \"[[101term:Unparse]]\"", "type": "Page"}, "101ideaACOLONsocial": {"discussion_links": [], "name": "101idea:social", "url": "http://101companies.org/index.php/101idea:social", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "headline": "enable social networking in [[101companies:Project]]-specific manner", "type": "Page"}, "JavaACOLONjavaADOTnio": {"discussion_links": [], "name": "Java:java.nio", "url": "http://101companies.org/index.php/Java:java.nio", "headline_links": [{"type": "Page", "name": "javaADOTio"}], "discussion": "", "headline": "a supplement of the Java package [[Java:java.io]]", "type": "Page"}, "101contributorACOLONSven_Karol": {"discussion_links": [], "name": "101contributor:Sven Karol", "url": "http://101companies.org/index.php/101contributor:Sven Karol", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONAndy_Kellens": {"discussion_links": [], "name": "101contributor:Andy Kellens", "url": "http://101companies.org/index.php/101contributor:Andy Kellens", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONSalary": {"discussion_links": [], "name": "101term:Salary", "url": "http://101companies.org/index.php/101term:Salary", "headline_links": [{"type": "Page", "name": "Employee"}], "discussion": "", "headline": "The salary of an [[101term:Employee|employee]]", "type": "Page"}, "101contributorACOLONJan_Baltzer": {"discussion_links": [], "name": "101contributor:Jan Baltzer", "url": "http://101companies.org/index.php/101contributor:Jan Baltzer", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONcomADOTsunADOTimageADOTcodecADOTjpeg": {"discussion_links": [], "name": "Java:com.sun.image.codec.jpeg", "url": "http://101companies.org/index.php/Java:com.sun.image.codec.jpeg", "headline_links": [], "discussion": "", "headline": "classes for encoding and decoding JPEG images", "type": "Page"}, "101termACOLONDeserialize": {"discussion_links": [], "name": "101term:Deserialize", "url": "http://101companies.org/index.php/101term:Deserialize", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "De-serialize [[101term:Company|company]] data", "type": "Page"}, "JavaACOLONjavaADOTbeans": {"discussion_links": [], "name": "Java:java.beans", "url": "http://101companies.org/index.php/Java:java.beans", "headline_links": [], "discussion": "", "headline": "a framework for components based on the JavaBeans architecture", "type": "Page"}, "101contributorACOLONHannaADASHMarike_Reger": {"discussion_links": [], "name": "101contributor:Hanna-Marike Reger", "url": "http://101companies.org/index.php/101contributor:Hanna-Marike Reger", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONTony_Sloane": {"discussion_links": [], "name": "101contributor:Tony Sloane", "url": "http://101companies.org/index.php/101contributor:Tony Sloane", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONMartin_Leinberger": {"discussion_links": [], "name": "101contributor:Martin Leinberger", "url": "http://101companies.org/index.php/101contributor:Martin Leinberger", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTio": {"discussion_links": [], "name": "Java:java.io", "url": "http://101companies.org/index.php/Java:java.io", "headline_links": [], "discussion": "", "headline": "Java's I/O framework", "type": "Page"}, "DotnetACOLONSystemADOTXmlADOTSerialization": {"discussion_links": [], "name": "Dotnet:System.Xml.Serialization", "url": "http://101companies.org/index.php/Dotnet:System.Xml.Serialization", "headline_links": [{"type": "Technology", "name": "ADOTNET_XML_Serialization"}], "discussion": "", "headline": ".NET namespace for [[Technology:.NET XML Serialization]]", "type": "Page"}, "101contributorACOLONMartijn_van_Steenbergen": {"discussion_links": [], "name": "101contributor:Martijn van Steenbergen", "url": "http://101companies.org/index.php/101contributor:Martijn van Steenbergen", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONRolfADASHHelge_Pfeiffer": {"discussion_links": [], "name": "101contributor:Rolf-Helge Pfeiffer", "url": "http://101companies.org/index.php/101contributor:Rolf-Helge Pfeiffer", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaxADOTannotation": {"discussion_links": [], "name": "Java:javax.annotation", "url": "http://101companies.org/index.php/Java:javax.annotation", "headline_links": [], "discussion": "", "headline": "support for Java's annotation facility", "type": "Page"}, "101statusACOLONFeatured": {"discussion_links": [], "name": "101status:Featured", "url": "http://101companies.org/index.php/101status:Featured", "headline_links": [], "discussion": "", "headline": "recommendation to users who are interested in diverse, non-straigthforward implementations", "type": "Page"}, "ContributorACOLONRolfADASHHelge_Pfeiffer": {"discussion_links": [], "name": "Contributor:Rolf-Helge Pfeiffer", "url": "http://101companies.org/index.php/Contributor:Rolf-Helge Pfeiffer", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101viewACOLONTechnologies_in_implementations": {"discussion_links": [], "name": "101view:Technologies in implementations", "url": "http://101companies.org/index.php/101view:Technologies in implementations", "headline_links": [{"type": "Page", "name": "101implementation"}], "discussion": "", "headline": "a tag cloud showing the frequency of referring to technologies in [[:Category:101implementation]]s", "type": "Page"}, "101contributorACOLONRebecca_Bindarra": {"discussion_links": [], "name": "101contributor:Rebecca Bindarra", "url": "http://101companies.org/index.php/101contributor:Rebecca Bindarra", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONMarius_Rackwitz": {"discussion_links": [], "name": "101contributor:Marius Rackwitz", "url": "http://101companies.org/index.php/101contributor:Marius Rackwitz", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONHakan_Aksu": {"discussion_links": [], "name": "101contributor:Hakan Aksu", "url": "http://101companies.org/index.php/101contributor:Hakan Aksu", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONPaul_Klint": {"discussion_links": [], "name": "101contributor:Paul Klint", "url": "http://101companies.org/index.php/101contributor:Paul Klint", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONVadim_Zaytsev": {"discussion_links": [], "name": "101contributor:Vadim Zaytsev", "url": "http://101companies.org/index.php/101contributor:Vadim Zaytsev", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101ideaACOLONcbuild": {"discussion_links": [], "name": "101idea:cbuild", "url": "http://101companies.org/index.php/101idea:cbuild", "headline_links": [], "discussion": "", "headline": "Provide continuous building for 101repo", "type": "Page"}, "101contributorACOLONMahdi_Derakhshanmanesh": {"discussion_links": [], "name": "101contributor:Mahdi Derakhshanmanesh", "url": "http://101companies.org/index.php/101contributor:Mahdi Derakhshanmanesh", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONTravis_Gockel": {"discussion_links": [], "name": "101contributor:Travis Gockel", "url": "http://101companies.org/index.php/101contributor:Travis Gockel", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101ideaACOLONigraph": {"discussion_links": [], "name": "101idea:igraph", "url": "http://101companies.org/index.php/101idea:igraph", "headline_links": [{"type": "Page", "name": "Ontology"}], "discussion": "", "headline": "derive implementation-specific slices of the [[101companies:Ontology]]", "type": "Page"}, "101contributorACOLONTassilo_Horn": {"discussion_links": [], "name": "101contributor:Tassilo Horn", "url": "http://101companies.org/index.php/101contributor:Tassilo Horn", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONMartina_Sekulla": {"discussion_links": [], "name": "101contributor:Martina Sekulla", "url": "http://101companies.org/index.php/101contributor:Martina Sekulla", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONKatharina_Naujokat": {"discussion_links": [], "name": "101contributor:Katharina Naujokat", "url": "http://101companies.org/index.php/101contributor:Katharina Naujokat", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101viewACOLONLanguages_in_implementations": {"discussion_links": [], "name": "101view:Languages in implementations", "url": "http://101companies.org/index.php/101view:Languages in implementations", "headline_links": [{"type": "Page", "name": "101implementation"}], "discussion": "", "headline": "a tag cloud showing the frequency of referring to languages in [[:Category:101implementation]]s", "type": "Page"}, "101contributorACOLONJeanADASHMarie_Favre": {"discussion_links": [], "name": "101contributor:Jean-Marie Favre", "url": "http://101companies.org/index.php/101contributor:Jean-Marie Favre", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTlangADOTannotation": {"discussion_links": [], "name": "Java:java.lang.annotation", "url": "http://101companies.org/index.php/Java:java.lang.annotation", "headline_links": [], "discussion": "", "headline": "support for Java's annotation facility", "type": "Page"}, "JavaACOLONjavaxADOTswing": {"discussion_links": [], "name": "Java:javax.swing", "url": "http://101companies.org/index.php/Java:javax.swing", "headline_links": [{"type": "Technology", "name": "Swing"}], "discussion": "", "headline": "primary package of the GUI API [[Technology:Swing]] for the Java platform", "type": "Page"}, "101contributorACOLONJohann_Tissen": {"discussion_links": [], "name": "101contributor:Johann Tissen", "url": "http://101companies.org/index.php/101contributor:Johann Tissen", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTutilADOTjar": {"discussion_links": [], "name": "Java:java.util.jar", "url": "http://101companies.org/index.php/Java:java.util.jar", "headline_links": [], "discussion": "", "headline": "Java library for the JAR format", "type": "Page"}, "JavaACOLONjavaADOTlangADOTref": {"discussion_links": [], "name": "Java:java.lang.ref", "url": "http://101companies.org/index.php/Java:java.lang.ref", "headline_links": [], "discussion": "", "headline": "the Java library for reference objects for interaction with the garbage collector", "type": "Page"}, "101contributorACOLONRalf_L\u00e4mmel": {"discussion_links": [], "name": "101contributor:Ralf L\u00e4mmel", "url": "http://101companies.org/index.php/101contributor:Ralf L\u00e4mmel", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101priorityACOLONHIGH": {"discussion_links": [], "name": "101priority:HIGH", "url": "http://101companies.org/index.php/101priority:HIGH", "headline_links": [{"type": "Page", "name": "101contribution"}], "discussion": "", "headline": "HIGH priority for a [[:Category:101contribution|101contribution]]", "type": "Page"}, "101statusACOLONSuboptimal": {"discussion_links": [], "name": "101status:Suboptimal", "url": "http://101companies.org/index.php/101status:Suboptimal", "headline_links": [{"type": "Page", "name": "101implementation"}], "discussion": "", "headline": "Identify a suboptimal [[:Category:101implementation]]", "type": "Page"}, "JavaACOLONorgADOTantlrADOTruntime": {"discussion_links": [], "name": "Java:org.antlr.runtime", "url": "http://101companies.org/index.php/Java:org.antlr.runtime", "headline_links": [{"type": "Technology", "name": "ANTLR"}], "discussion": "", "headline": "the [[Technology:ANTLR]] runtime", "type": "Page"}, "JavaACOLONjavaADOTutilADOTregex": {"discussion_links": [], "name": "Java:java.util.regex", "url": "http://101companies.org/index.php/Java:java.util.regex", "headline_links": [], "discussion": "", "headline": "a Java library for regular expression matching", "type": "Page"}, "101demonstrationACOLONyapg": {"discussion_links": [], "name": "101demonstration:yapg", "url": "http://101companies.org/index.php/101demonstration:yapg", "headline_links": [{"type": "Technology", "name": "ANTLR"}, {"type": "Concept", "name": "textADASHtoADASHobject_mapping"}], "discussion": "", "headline": "A [[Technology:ANTLR]]-based generator for [[text-to-object mapping]]s", "type": "Page"}, "101termACOLONSerialize": {"discussion_links": [], "name": "101term:Serialize", "url": "http://101companies.org/index.php/101term:Serialize", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Serialize [[101term:Company|company]] data for data storage or exchange", "type": "Page"}, "101contributorACOLONMark_Hills": {"discussion_links": [], "name": "101contributor:Mark Hills", "url": "http://101companies.org/index.php/101contributor:Mark Hills", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101viewACOLONImplementationASLASHfeature_matrix": {"discussion_links": [], "name": "101view:Implementation/feature matrix", "url": "http://101companies.org/index.php/101view:Implementation/feature matrix", "headline_links": [], "discussion": "", "headline": "a matrix view of the features per implementation", "type": "Page"}, "101viewACOLONTechnologies_anywhere": {"discussion_links": [], "name": "101view:Technologies anywhere", "url": "http://101companies.org/index.php/101view:Technologies anywhere", "headline_links": [{"type": "Concept", "name": "101wiki"}], "discussion": "", "headline": "a tag cloud showing the frequency of referring to technologies anywhere on the [[101wiki]]", "type": "Page"}, "JavaACOLONjavaADOTrmi": {"discussion_links": [], "name": "Java:java.rmi", "url": "http://101companies.org/index.php/Java:java.rmi", "headline_links": [{"type": "Concept", "name": "RMI"}], "discussion": "", "headline": "the Java framework for [[RMI]]", "type": "Page"}, "101termACOLONView": {"discussion_links": [], "name": "101term:View", "url": "http://101companies.org/index.php/101term:View", "headline_links": [{"type": "Page", "name": "Company"}, {"type": "Concept", "name": "GUI"}], "discussion": "", "headline": "View [[101term:Company|company]] data in a [[GUI]]", "type": "Page"}, "101contributorACOLONJ\u00fcrgen_Starek": {"discussion_links": [], "name": "101contributor:J\u00fcrgen Starek", "url": "http://101companies.org/index.php/101contributor:J\u00fcrgen Starek", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101viewACOLONTechnologyASLASHspace_matrix": {"discussion_links": [], "name": "101view:Technology/space matrix", "url": "http://101companies.org/index.php/101view:Technology/space matrix", "headline_links": [], "discussion": "", "headline": "a matrix view of the spaces per technology", "type": "Page"}, "101statusACOLONDONE": {"discussion_links": [], "name": "101status:DONE", "url": "http://101companies.org/index.php/101status:DONE", "headline_links": [], "discussion": "", "headline": "the contribution is DONE", "type": "Page"}, "101contributorACOLONMatt_Roberts": {"discussion_links": [], "name": "101contributor:Matt Roberts", "url": "http://101companies.org/index.php/101contributor:Matt Roberts", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101ideaACOLONmorethemes": {"discussion_links": [], "name": "101idea:morethemes", "url": "http://101companies.org/index.php/101idea:morethemes", "headline_links": [], "discussion": "", "headline": "There are always more themes of technologies or capabilities to be covered.", "type": "Page"}, "JavaACOLONjavaADOTlangADOTmanagement": {"discussion_links": [], "name": "Java:java.lang.management", "url": "http://101companies.org/index.php/Java:java.lang.management", "headline_links": [], "discussion": "", "headline": "the API for monitoring and managing the JVM and other components in the Java runtime", "type": "Page"}, "101contributorACOLONJan_Reimann": {"discussion_links": [], "name": "101contributor:Jan Reimann", "url": "http://101companies.org/index.php/101contributor:Jan Reimann", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONManager": {"discussion_links": [], "name": "101term:Manager", "url": "http://101companies.org/index.php/101term:Manager", "headline_links": [{"type": "Page", "name": "Department"}, {"type": "Page", "name": "Company"}], "discussion": "", "headline": "The manager of a [[101term:Department|department]] in the [[101term:Company|company]]", "type": "Page"}, "101termACOLONAddress": {"discussion_links": [], "name": "101term:Address", "url": "http://101companies.org/index.php/101term:Address", "headline_links": [{"type": "Page", "name": "Employee"}], "discussion": "", "headline": "The address of an [[101term:Employee|employee]]", "type": "Page"}, "101contributorACOLONTobias_Schmidt": {"discussion_links": [], "name": "101contributor:Tobias Schmidt", "url": "http://101companies.org/index.php/101contributor:Tobias Schmidt", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONEduard_Ditler": {"discussion_links": [], "name": "101contributor:Eduard Ditler", "url": "http://101companies.org/index.php/101contributor:Eduard Ditler", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONLoad": {"discussion_links": [], "name": "101term:Load", "url": "http://101companies.org/index.php/101term:Load", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Load [[101term:Company|company]] data", "type": "Page"}, "101internalACOLONmeeting04012011": {"discussion_links": [], "name": "101internal:meeting04012011", "url": "http://101companies.org/index.php/101internal:meeting04012011", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONDepartment": {"discussion_links": [], "name": "101term:Department", "url": "http://101companies.org/index.php/101term:Department", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "A department of the [[101term:Company|company]]", "type": "Page"}, "101contributorACOLONThomas_Schmorleiz": {"discussion_links": [], "name": "101contributor:Thomas Schmorleiz", "url": "http://101companies.org/index.php/101contributor:Thomas Schmorleiz", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONEkaterina_Pek": {"discussion_links": [], "name": "101contributor:Ekaterina Pek", "url": "http://101companies.org/index.php/101contributor:Ekaterina Pek", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTlangADOTreflect": {"discussion_links": [], "name": "Java:java.lang.reflect", "url": "http://101companies.org/index.php/Java:java.lang.reflect", "headline_links": [], "discussion": "", "headline": "Java's reflection API", "type": "Page"}, "101modelACOLONargoUML": {"discussion_links": [], "name": "101model:argoUML", "url": "http://101companies.org/index.php/101model:argoUML", "headline_links": [{"type": "Technology", "name": "ArgoUML"}], "discussion": "", "headline": "Structural modeling in UML with [[Technology:ArgoUML]]", "type": "Page"}, "101termACOLONSave": {"discussion_links": [], "name": "101term:Save", "url": "http://101companies.org/index.php/101term:Save", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Save [[101term:Company|company]] data", "type": "Page"}, "101contributorACOLONHelena_Swerdlow": {"discussion_links": [], "name": "101contributor:Helena Swerdlow", "url": "http://101companies.org/index.php/101contributor:Helena Swerdlow", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONEelco_Visser": {"discussion_links": [], "name": "101contributor:Eelco Visser", "url": "http://101companies.org/index.php/101contributor:Eelco Visser", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTsecurity": {"discussion_links": [], "name": "Java:java.security", "url": "http://101companies.org/index.php/Java:java.security", "headline_links": [], "discussion": "", "headline": "Java's security framework", "type": "Page"}, "101contributorACOLONFlorian_Heidenreich": {"discussion_links": [], "name": "101contributor:Florian Heidenreich", "url": "http://101companies.org/index.php/101contributor:Florian Heidenreich", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101statusACOLONTODO": {"discussion_links": [], "name": "101status:TODO", "url": "http://101companies.org/index.php/101status:TODO", "headline_links": [], "discussion": "", "headline": "the contribution is TODO", "type": "Page"}, "JavaACOLONjavaADOTapplet": {"discussion_links": [], "name": "Java:java.applet", "url": "http://101companies.org/index.php/Java:java.applet", "headline_links": [], "discussion": "", "headline": "the Java framework for applets", "type": "Page"}, "JavaACOLONorgADOTcodehausADOTplexusADOTutilADOTxmlADOTpull": {"discussion_links": [], "name": "Java:org.codehaus.plexus.util.xml.pull", "url": "http://101companies.org/index.php/Java:org.codehaus.plexus.util.xml.pull", "headline_links": [], "discussion": "", "headline": "XML utilities of org.codehaus.plexus", "type": "Page"}, "101contributorACOLONJesper_Louis_Andersen": {"discussion_links": [], "name": "101contributor:Jesper Louis Andersen", "url": "http://101companies.org/index.php/101contributor:Jesper Louis Andersen", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTutilADOTlogging": {"discussion_links": [], "name": "Java:java.util.logging", "url": "http://101companies.org/index.php/Java:java.util.logging", "headline_links": [], "discussion": "", "headline": "Java's core logging facilities", "type": "Page"}, "101contributorACOLONTobias_Zimmer": {"discussion_links": [], "name": "101contributor:Tobias Zimmer", "url": "http://101companies.org/index.php/101contributor:Tobias Zimmer", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTlang": {"discussion_links": [], "name": "Java:java.lang", "url": "http://101companies.org/index.php/Java:java.lang", "headline_links": [], "discussion": "", "headline": "the fundamental Java library", "type": "Page"}, "101contributorACOLONIna_Schroeder": {"discussion_links": [], "name": "101contributor:Ina Schroeder", "url": "http://101companies.org/index.php/101contributor:Ina Schroeder", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "DotnetACOLONSystemADOTXml": {"discussion_links": [], "name": "Dotnet:System.Xml", "url": "http://101companies.org/index.php/Dotnet:System.Xml", "headline_links": [{"type": "Language", "name": "XML"}], "discussion": "", "headline": ".NET namespace for [[Language:XML]] support", "type": "Page"}, "101termACOLONParse": {"discussion_links": [], "name": "101term:Parse", "url": "http://101companies.org/index.php/101term:Parse", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Parse text-based representation of [[101term:Company|company]] data", "type": "Page"}, "101contributorACOLONSteffen_Zschaler": {"discussion_links": [], "name": "101contributor:Steffen Zschaler", "url": "http://101companies.org/index.php/101contributor:Steffen Zschaler", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONLyzun_Oleksandr": {"discussion_links": [], "name": "101contributor:Lyzun Oleksandr", "url": "http://101companies.org/index.php/101contributor:Lyzun Oleksandr", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101profileACOLONJava_CLI": {"discussion_links": [], "name": "101profile:Java CLI", "url": "http://101companies.org/index.php/101profile:Java CLI", "headline_links": [{"type": "Page", "name": "Simple_Java"}], "discussion": "", "headline": "use extra CLI-based tools on top of [[101profile:Simple Java]]", "type": "Page"}, "JavaACOLONgnuADOTregexp": {"discussion_links": [], "name": "Java:gnu.regexp", "url": "http://101companies.org/index.php/Java:gnu.regexp", "headline_links": [], "discussion": "", "headline": "a Java library for regular expression matching", "type": "Page"}, "101termACOLONUnparse": {"discussion_links": [], "name": "101term:Unparse", "url": "http://101companies.org/index.php/101term:Unparse", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Unparse [[101term:Company|company]] data into text-based representation", "type": "Page"}, "JavaACOLONcomADOTappleADOTeawt": {"discussion_links": [], "name": "Java:com.apple.eawt", "url": "http://101companies.org/index.php/Java:com.apple.eawt", "headline_links": [], "discussion": "", "headline": "Java extensions by Apple", "type": "Page"}, "101priorityACOLONMEDIUM": {"discussion_links": [], "name": "101priority:MEDIUM", "url": "http://101companies.org/index.php/101priority:MEDIUM", "headline_links": [{"type": "Page", "name": "101contribution"}], "discussion": "", "headline": "MEDIUM priority for a [[:Category:101contribution|101contribution]]", "type": "Page"}, "101contributorACOLONDavid_Saile": {"discussion_links": [], "name": "101contributor:David Saile", "url": "http://101companies.org/index.php/101contributor:David Saile", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONEmployee": {"discussion_links": [], "name": "101term:Employee", "url": "http://101companies.org/index.php/101term:Employee", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "An employee of a [[101term:Company|company]]", "type": "Page"}, "JavaACOLONjavaADOTutilADOTconcurrent": {"discussion_links": [], "name": "Java:java.util.concurrent", "url": "http://101companies.org/index.php/Java:java.util.concurrent", "headline_links": [], "discussion": "", "headline": "Java library for concurrent programming", "type": "Page"}, "101priorityACOLONLOW": {"discussion_links": [], "name": "101priority:LOW", "url": "http://101companies.org/index.php/101priority:LOW", "headline_links": [{"type": "Page", "name": "101contribution"}], "discussion": "", "headline": "LOW priority for a [[:Category:101contribution|101contribution]]", "type": "Page"}, "JavaACOLONjavaADOTtext": {"discussion_links": [], "name": "Java:java.text", "url": "http://101companies.org/index.php/Java:java.text", "headline_links": [], "discussion": "", "headline": "Java library for handling text", "type": "Page"}, "101termACOLONTotal": {"discussion_links": [], "name": "101term:Total", "url": "http://101companies.org/index.php/101term:Total", "headline_links": [{"type": "Page", "name": "Salary"}, {"type": "Page", "name": "Employee"}], "discussion": "", "headline": "Total [[101term:Salary|salaries]] of [[101term:Employee|employees]]", "type": "Page"}, "101termACOLONName": {"discussion_links": [], "name": "101term:Name", "url": "http://101companies.org/index.php/101term:Name", "headline_links": [{"type": "Page", "name": "Employee"}], "discussion": "", "headline": "The name of, for example, an [[101term:Employee|employee]]", "type": "Page"}, "JavaACOLONjava_cupADOTruntime": {"discussion_links": [], "name": "Java:java cup.runtime", "url": "http://101companies.org/index.php/Java:java cup.runtime", "headline_links": [{"type": "Technology", "name": "CUP"}], "discussion": "", "headline": "runtime package of [[Technology:CUP]] parser generator", "type": "Page"}, "JavaACOLONjavaADOTmath": {"discussion_links": [], "name": "Java:java.math", "url": "http://101companies.org/index.php/Java:java.math", "headline_links": [], "discussion": "", "headline": "Java library for arbitrary precision arithmetic", "type": "Page"}, "101ideaACOLONjtracer": {"discussion_links": [], "name": "101idea:jtracer", "url": "http://101companies.org/index.php/101idea:jtracer", "headline_links": [], "discussion": "", "headline": "a tracing framework for Java for use with megamodeling", "type": "Page"}, "101ideaACOLONwikinext": {"discussion_links": [], "name": "101idea:wikinext", "url": "http://101companies.org/index.php/101idea:wikinext", "headline_links": [{"type": "Page", "name": "Project"}], "discussion": "", "headline": "the next wiki approach for the [[101companies:Project]]", "type": "Page"}, "JavaACOLONorgADOTapacheADOTlog": {"discussion_links": [], "name": "Java:org.apache.log", "url": "http://101companies.org/index.php/Java:org.apache.log", "headline_links": [], "discussion": "", "headline": "the Avalon LogKit logging framework used throughout the Avalon project", "type": "Page"}, "101viewACOLONLanguages_anywhere": {"discussion_links": [], "name": "101view:Languages anywhere", "url": "http://101companies.org/index.php/101view:Languages anywhere", "headline_links": [{"type": "Concept", "name": "101wiki"}], "discussion": "", "headline": "a tag cloud showing the frequency of referring to languages anywhere on the [[101wiki]]", "type": "Page"}, "101contributorACOLONThiago_Tonelli_Bartolomei": {"discussion_links": [], "name": "101contributor:Thiago Tonelli Bartolomei", "url": "http://101companies.org/index.php/101contributor:Thiago Tonelli Bartolomei", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONCut": {"discussion_links": [], "name": "101term:Cut", "url": "http://101companies.org/index.php/101term:Cut", "headline_links": [{"type": "Page", "name": "Salary"}, {"type": "Page", "name": "Employee"}], "discussion": "", "headline": "Cut [[101term:Salary|salaries]] of [[101term:Employee|employees]]", "type": "Page"}, "JavaACOLONjavaADOTsql": {"discussion_links": [], "name": "Java:java.sql", "url": "http://101companies.org/index.php/Java:java.sql", "headline_links": [], "discussion": "", "headline": "the Java API for accessing and processing data stored in a data source", "type": "Page"}, "101contributorACOLONMichael_Kusenbach": {"discussion_links": [], "name": "101contributor:Michael Kusenbach", "url": "http://101companies.org/index.php/101contributor:Michael Kusenbach", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONorgADOTapacheADOTxml": {"discussion_links": [], "name": "Java:org.apache.xml", "url": "http://101companies.org/index.php/Java:org.apache.xml", "headline_links": [], "discussion": "", "headline": "several XML-related XML APIs in the org.apache space", "type": "Page"}, "101contributorACOLONHugo_Bruneli\u00e8re": {"discussion_links": [], "name": "101contributor:Hugo Bruneli\u00e8re", "url": "http://101companies.org/index.php/101contributor:Hugo Bruneli\u00e8re", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaADOTnet": {"discussion_links": [], "name": "Java:java.net", "url": "http://101companies.org/index.php/Java:java.net", "headline_links": [], "discussion": "", "headline": "Java's framework for networking applications", "type": "Page"}, "101viewACOLONNumbers": {"discussion_links": [], "name": "101view:Numbers", "url": "http://101companies.org/index.php/101view:Numbers", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONSebastian_Jackel": {"discussion_links": [], "name": "101contributor:Sebastian Jackel", "url": "http://101companies.org/index.php/101contributor:Sebastian Jackel", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "JavaACOLONjavaxADOTjnlp": {"discussion_links": [], "name": "Java:javax.jnlp", "url": "http://101companies.org/index.php/Java:javax.jnlp", "headline_links": [], "discussion": "", "headline": "a framework starting applications over the web", "type": "Page"}, "JavaACOLONjavaxADOTnet": {"discussion_links": [], "name": "Java:javax.net", "url": "http://101companies.org/index.php/Java:javax.net", "headline_links": [], "discussion": "", "headline": "classes for Java networking applications", "type": "Page"}, "JavaACOLONsunADOTmisc": {"discussion_links": [], "name": "Java:sun.misc", "url": "http://101companies.org/index.php/Java:sun.misc", "headline_links": [], "discussion": "", "headline": "a package private to Sun", "type": "Page"}, "JavaACOLONjavaADOTawt": {"discussion_links": [], "name": "Java:java.awt", "url": "http://101companies.org/index.php/Java:java.awt", "headline_links": [{"type": "Technology", "name": "AWT"}], "discussion": "", "headline": "top-level package of the Java's [[Technology:AWT]] framework", "type": "Page"}, "101ideaACOLONmetrics": {"discussion_links": [], "name": "101idea:metrics", "url": "http://101companies.org/index.php/101idea:metrics", "headline_links": [], "discussion": "", "headline": "Apply metrics usefully to 101repo", "type": "Page"}, "101contributorACOLONChristian_Schl\u00f6ffel": {"discussion_links": [], "name": "101contributor:Christian Schl\u00f6ffel", "url": "http://101companies.org/index.php/101contributor:Christian Schl\u00f6ffel", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONRodrigo_Bonifacio": {"discussion_links": [], "name": "101contributor:Rodrigo Bonifacio", "url": "http://101companies.org/index.php/101contributor:Rodrigo Bonifacio", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONCompany": {"discussion_links": [], "name": "101term:Company", "url": "http://101companies.org/index.php/101term:Company", "headline_links": [{"type": "Page", "name": "System"}], "discussion": "", "headline": "The company that uses an implementation of the [[101companies:System]]", "type": "Page"}, "101statusACOLONACTIVE": {"discussion_links": [], "name": "101status:ACTIVE", "url": "http://101companies.org/index.php/101status:ACTIVE", "headline_links": [], "discussion": "", "headline": "the contribution is under active development", "type": "Page"}, "JavaACOLONjavaADOTutilADOTzip": {"discussion_links": [], "name": "Java:java.util.zip", "url": "http://101companies.org/index.php/Java:java.util.zip", "headline_links": [], "discussion": "", "headline": "Java library for zip and gzip file formats", "type": "Page"}, "101termACOLONExport": {"discussion_links": [], "name": "101term:Export", "url": "http://101companies.org/index.php/101term:Export", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Export [[101term:Company|company]] data", "type": "Page"}, "101contributorACOLONBas_Basten": {"discussion_links": [], "name": "101contributor:Bas Basten", "url": "http://101companies.org/index.php/101contributor:Bas Basten", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONImport": {"discussion_links": [], "name": "101term:Import", "url": "http://101companies.org/index.php/101term:Import", "headline_links": [{"type": "Page", "name": "Company"}], "discussion": "", "headline": "Import [[101term:Company|company]] data", "type": "Page"}, "101ideaACOLONmoretechs": {"discussion_links": [], "name": "101idea:moretechs", "url": "http://101companies.org/index.php/101idea:moretechs", "headline_links": [], "discussion": "", "headline": "There are always more technologies to be covered.", "type": "Page"}, "101contributorACOLONDragan_Gasevic": {"discussion_links": [], "name": "101contributor:Dragan Gasevic", "url": "http://101companies.org/index.php/101contributor:Dragan Gasevic", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101statusACOLONBroken": {"discussion_links": [], "name": "101status:Broken", "url": "http://101companies.org/index.php/101status:Broken", "headline_links": [{"type": "Page", "name": "101implementation"}], "discussion": "", "headline": "Identify a broken [[:Category:101implementation]]", "type": "Page"}, "101contributorACOLONChristian_Wende": {"discussion_links": [], "name": "101contributor:Christian Wende", "url": "http://101companies.org/index.php/101contributor:Christian Wende", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101termACOLONEdit": {"discussion_links": [], "name": "101term:Edit", "url": "http://101companies.org/index.php/101term:Edit", "headline_links": [{"type": "Page", "name": "Company"}, {"type": "Concept", "name": "GUI"}], "discussion": "", "headline": "Edit [[101term:Company|company]] data in a [[GUI]]", "type": "Page"}, "101contributorACOLONAndrei_Varanovich": {"discussion_links": [], "name": "101contributor:Andrei Varanovich", "url": "http://101companies.org/index.php/101contributor:Andrei Varanovich", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "TechologyACOLONASP_ADOTNET": {"discussion_links": [], "name": "Techology:ASP .NET", "url": "http://101companies.org/index.php/Techology:ASP .NET", "headline_links": [{"type": "Concept", "name": "Model_View_Controller"}, {"type": "Concept", "name": "web_programming"}, {"type": "Technology", "name": "ADOTNET"}], "discussion": "", "headline": "An [[Model View Controller|MVC]] framework for [[web programming]] in [[Technology:.NET]]", "type": "Page"}, "JavaACOLONorgADOTapacheADOTtoolsADOTant": {"discussion_links": [], "name": "Java:org.apache.tools.ant", "url": "http://101companies.org/index.php/Java:org.apache.tools.ant", "headline_links": [], "discussion": "", "headline": "the Java package for ANT tasks", "type": "Page"}, "101contributorACOLONZef_Hemel": {"discussion_links": [], "name": "101contributor:Zef Hemel", "url": "http://101companies.org/index.php/101contributor:Zef Hemel", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101ideaACOLONsgrep": {"discussion_links": [], "name": "101idea:sgrep", "url": "http://101companies.org/index.php/101idea:sgrep", "headline_links": [], "discussion": "", "headline": "semantical search for API usage and respond like grep", "type": "Page"}, "101contributorACOLONBetim_Sojeva": {"discussion_links": [], "name": "101contributor:Betim Sojeva", "url": "http://101companies.org/index.php/101contributor:Betim Sojeva", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101contributorACOLONJan_Ruether": {"discussion_links": [], "name": "101contributor:Jan Ruether", "url": "http://101companies.org/index.php/101contributor:Jan Ruether", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}, "101ideaACOLONguide": {"discussion_links": [], "name": "101idea:guide", "url": "http://101companies.org/index.php/101idea:guide", "headline_links": [{"type": "Page", "name": "101contribution"}], "discussion": "", "headline": "provide a guidance for [[:Category:101contribution]]s and exploration of interesting resources", "type": "Page"}, "101contributorACOLONAlexander_Anthes": {"discussion_links": [], "name": "101contributor:Alexander Anthes", "url": "http://101companies.org/index.php/101contributor:Alexander Anthes", "headline_links": [], "discussion": "", "headline": "", "type": "Page"}}}